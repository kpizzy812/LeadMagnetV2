# bot/handlers/broadcasts.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import Session, Conversation, Lead
from loguru import logger


broadcasts_router = Router()


@broadcasts_router.callback_query(F.data == "broadcast_main")
async def broadcast_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""

    text = """üì¢ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

üéØ <b>–ü–æ –≤—Å–µ–º –ª–∏–¥–∞–º</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ª–∏–¥–∞–º –≤–æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏—è—Ö
üë• <b>–ü–æ —Å–µ—Å—Å–∏–∏</b> - —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
üîó <b>–ü–æ —Å—Ç–∞—Ç—É—Å—É</b> - –ª–∏–¥–∞–º —Å/–±–µ–∑ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏
üé≠ <b>–ü–æ –ø–µ—Ä—Å–æ–Ω–µ</b> - –ª–∏–¥–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞—Å—Å—ã–ª–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –í—Å–µ–º –ª–∏–¥–∞–º", callback_data="broadcast_all"),
                InlineKeyboardButton(text="üë• –ü–æ —Å–µ—Å—Å–∏–∏", callback_data="broadcast_session")
            ],
            [
                InlineKeyboardButton(text="üîó –ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="broadcast_status"),
                InlineKeyboardButton(text="üé≠ –ü–æ –ø–µ—Ä—Å–æ–Ω–µ", callback_data="broadcast_persona")
            ],
            [
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="broadcast_history"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@broadcasts_router.callback_query(F.data == "broadcast_session")
async def broadcast_session_list(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Session)
                .where(Session.status == 'active')
                .order_by(Session.session_name)
            )
            sessions = result.scalars().all()

        if not sessions:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return

        text = "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"

        keyboard_buttons = []

        for session in sessions:
            text += f"ü§ñ <code>{session.session_name}</code>\n"
            text += f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞: {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}\n"
            text += f"   ‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {session.total_conversations}\n\n"

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üì§ {session.session_name}",
                    callback_data=f"broadcast_session_select_{session.id}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_main")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π")


@broadcasts_router.callback_query(F.data.startswith("broadcast_session_select_"))
async def broadcast_session_select(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session_result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = session_result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º —Å–µ—Å—Å–∏–∏
            total_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.session_id == session_id)
            )
            total_dialogs = total_result.scalar() or 0

            with_ref_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.session_id == session_id,
                    Conversation.ref_link_sent == True
                )
            )
            with_ref = with_ref_result.scalar() or 0

            without_ref = total_dialogs - with_ref

        text = f"""üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {session.session_name}</b>

üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìä <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_dialogs}
‚Ä¢ –° —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π: {with_ref}
‚Ä¢ –ë–µ–∑ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏: {without_ref}

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üéØ –í—Å–µ–º ({total_dialogs})",
                        callback_data=f"broadcast_prepare_{session_id}_all"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üîó –° —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π ({with_ref})",
                        callback_data=f"broadcast_prepare_{session_id}_with_ref"
                    ),
                    InlineKeyboardButton(
                        text=f"üìù –ë–µ–∑ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏ ({without_ref})",
                        callback_data=f"broadcast_prepare_{session_id}_without_ref"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_session")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@broadcasts_router.callback_query(F.data.startswith("broadcast_prepare_"))
async def broadcast_prepare(callback: CallbackQuery):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ - –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parts = callback.data.split("_")
    session_id = int(parts[2])
    target_type = parts[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM)
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫—É

    text = f"""‚úèÔ∏è <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üì§ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –°–µ—Å—Å–∏—è ID: {session_id}
‚Ä¢ –¶–µ–ª—å: {target_type}

üöß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ:
1. –î–æ–±–∞–≤–∏—Ç—å FSM (Finite State Machine) –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
2. –ü–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
3. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_session")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@broadcasts_router.callback_query(F.data == "broadcast_status")
async def broadcast_status(callback: CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏"""

    try:
        async with get_db() as db:
            from sqlalchemy import func

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            with_ref_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.ref_link_sent == True)
            )
            with_ref = with_ref_result.scalar() or 0

            without_ref_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.ref_link_sent == False)
            )
            without_ref = without_ref_result.scalar() or 0

        text = f"""üîó <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏</b>

üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤:</b>
‚Ä¢ –° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π: {with_ref}
‚Ä¢ –ë–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏: {without_ref}

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üîó –° —Å—Å—ã–ª–∫–æ–π ({with_ref})",
                        callback_data="broadcast_status_with_ref"
                    ),
                    InlineKeyboardButton(
                        text=f"üìù –ë–µ–∑ —Å—Å—ã–ª–∫–∏ ({without_ref})",
                        callback_data="broadcast_status_without_ref"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@broadcasts_router.callback_query(F.data == "broadcast_history")
async def broadcast_history(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""

    text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>

üöß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º
‚Ä¢ –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_main")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)