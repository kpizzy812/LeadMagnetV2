# bot/handlers/broadcasts/broadcast.py

import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import Session, Conversation, Lead
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger

broadcasts_router = Router()


class BroadcastStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    waiting_message = State()
    waiting_confirmation = State()


@broadcasts_router.callback_query(F.data == "broadcast_main")
async def broadcast_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""

    text = """üì¢ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

üéØ <b>–ü–æ –≤—Å–µ–º –ª–∏–¥–∞–º</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ª–∏–¥–∞–º –≤–æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏—è—Ö
üë• <b>–ü–æ —Å–µ—Å—Å–∏–∏</b> - —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
üîó <b>–ü–æ —Å—Ç–∞—Ç—É—Å—É</b> - –ª–∏–¥–∞–º —Å/–±–µ–∑ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏
üé≠ <b>–ü–æ –ø–µ—Ä—Å–æ–Ω–µ</b> - –ª–∏–¥–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞—Å—Å—ã–ª–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –í—Å–µ–º –ª–∏–¥–∞–º", callback_data="broadcast_all"),
                InlineKeyboardButton(text="üë• –ü–æ —Å–µ—Å—Å–∏–∏", callback_data="broadcast_session")
            ],
            [
                InlineKeyboardButton(text="üîó –ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="broadcast_status"),
                InlineKeyboardButton(text="üé≠ –ü–æ –ø–µ—Ä—Å–æ–Ω–µ", callback_data="broadcast_persona")
            ],
            [
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="broadcast_history"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@broadcasts_router.callback_query(F.data == "broadcast_session")
async def broadcast_session_list(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Session)
                .where(Session.status == 'active')
                .order_by(Session.session_name)
            )
            sessions = result.scalars().all()

        if not sessions:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return

        text = "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"

        keyboard_buttons = []

        for session in sessions:
            text += f"ü§ñ <code>{session.session_name}</code>\n"
            text += f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞: {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}\n"
            text += f"   ‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {session.total_conversations}\n\n"

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üì§ {session.session_name}",
                    callback_data=f"broadcast_session_select_{session.id}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_main")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π")


@broadcasts_router.callback_query(F.data.startswith("broadcast_session_select_"))
async def broadcast_session_select(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session_result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = session_result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º —Å–µ—Å—Å–∏–∏
            total_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.session_id == session_id)
            )
            total_dialogs = total_result.scalar() or 0

            with_ref_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.session_id == session_id,
                    Conversation.ref_link_sent == True
                )
            )
            with_ref = with_ref_result.scalar() or 0

            without_ref = total_dialogs - with_ref

        text = f"""üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {session.session_name}</b>

üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìä <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_dialogs}
‚Ä¢ –° —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π: {with_ref}
‚Ä¢ –ë–µ–∑ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏: {without_ref}

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üéØ –í—Å–µ–º ({total_dialogs})",
                        callback_data=f"broadcast_prepare_{session_id}_all"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üîó –° —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π ({with_ref})",
                        callback_data=f"broadcast_prepare_{session_id}_with_ref"
                    ),
                    InlineKeyboardButton(
                        text=f"üìù –ë–µ–∑ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏ ({without_ref})",
                        callback_data=f"broadcast_prepare_{session_id}_without_ref"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_session")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@broadcasts_router.callback_query(F.data.startswith("broadcast_prepare_"))
async def broadcast_prepare(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ - –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parts = callback.data.split("_")
    session_id = int(parts[2])
    target_type = parts[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        session_id=session_id,
        target_type=target_type
    )

    text = """‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>

üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–∏–¥–∞–º.

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
‚Ä¢ –ú–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –±—É–¥—É—Ç –ø–∞—É–∑—ã 3-5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /cancel

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_main")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_message)


@broadcasts_router.message(BroadcastStates.waiting_message)
async def broadcast_message_received(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    session_id = data["session_id"]
    target_type = data["target_type"]
    message_text = message.text

    if not message_text or len(message_text.strip()) < 1:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(message_text=message_text)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    async with get_db() as db:
        session_result = await db.execute(
            select(Session).where(Session.id == session_id)
        )
        session = session_result.scalar_one()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        query = select(func.count(Conversation.id)).where(Conversation.session_id == session_id)

        if target_type == "with_ref":
            query = query.where(Conversation.ref_link_sent == True)
        elif target_type == "without_ref":
            query = query.where(Conversation.ref_link_sent == False)

        count_result = await db.execute(query)
        recipients_count = count_result.scalar() or 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = f"""üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üì§ <b>–°–µ—Å—Å–∏—è:</b> {session.session_name}
üéØ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {recipients_count}
üìù <b>–§–∏–ª—å—Ç—Ä:</b> {get_filter_name(target_type)}

üí¨ <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
<pre>{message_text}</pre>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_main")
            ]
        ]
    )

    await message.answer(preview_text, reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_confirmation)


@broadcasts_router.callback_query(F.data == "broadcast_confirm", BroadcastStates.waiting_confirmation)
async def broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    session_id = data["session_id"]
    target_type = data["target_type"]
    message_text = data["message_text"]

    await callback.message.edit_text("üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = await get_broadcast_recipients(session_id, target_type)

        if not recipients:
            await callback.message.edit_text("‚ùå <b>–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>")
            await state.clear()
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            execute_broadcast(
                callback.message,
                session_id,
                recipients,
                message_text
            )
        )

        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.message.edit_text("‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
        await state.clear()


async def get_broadcast_recipients(session_id: int, target_type: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        async with get_db() as db:
            query = (
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(
                    Conversation.session_id == session_id,
                    Conversation.status == 'active'
                )
            )

            if target_type == "with_ref":
                query = query.where(Conversation.ref_link_sent == True)
            elif target_type == "without_ref":
                query = query.where(Conversation.ref_link_sent == False)

            result = await db.execute(query)
            conversations = result.scalars().all()

            recipients = []
            for conv in conversations:
                recipients.append({
                    "username": conv.lead.username,
                    "conversation_id": conv.id
                })

            return recipients

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def execute_broadcast(message: Message, session_id: int, recipients: list, broadcast_text: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        async with get_db() as db:
            session_result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = session_result.scalar_one()

        total_recipients = len(recipients)
        sent_count = 0
        failed_count = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_recipients}\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            f"‚ùå –û—à–∏–±–æ–∫: 0"
        )

        for i, recipient in enumerate(recipients):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await telegram_session_manager.send_message(
                    session_name=session.session_name,
                    username=recipient["username"],
                    message=broadcast_text
                )

                if success:
                    sent_count += 1
                    logger.info(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞: {session.session_name} ‚Üí {recipient['username']}")
                else:
                    failed_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {session.session_name} ‚Üí {recipient['username']}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (i + 1) % 5 == 0 or i == total_recipients - 1:
                    progress_text = (
                        f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{total_recipients}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

                    try:
                        await message.edit_text(progress_text)
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(3)

            except Exception as e:
                failed_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {recipient['username']}: {e}")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_text = f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_recipients}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent_count / total_recipients * 100):.1f}%

üïê <b>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {datetime.now().strftime('%H:%M:%S')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="broadcast_main")
            ]]
        )

        await message.edit_text(final_text, reply_markup=keyboard)

        logger.success(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{total_recipients} —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

        error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_recipients}

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö."""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="broadcast_main")
            ]]
        )

        try:
            await message.edit_text(error_text, reply_markup=keyboard)
        except:
            pass


def get_filter_name(target_type: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_names = {
        "all": "–í—Å–µ –¥–∏–∞–ª–æ–≥–∏",
        "with_ref": "–° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π",
        "without_ref": "–ë–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏"
    }
    return filter_names.get(target_type, target_type)


@broadcasts_router.callback_query(F.data == "broadcast_all")
async def broadcast_all_leads(callback: CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ª–∏–¥–∞–º"""

    try:
        async with get_db() as db:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
            total_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.status == 'active')
            )
            total_leads = total_result.scalar() or 0

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Å—Å–∏—è–º
            sessions_result = await db.execute(
                select(
                    Session.session_name,
                    Session.id,
                    func.count(Conversation.id).label('leads_count')
                )
                .join(Conversation)
                .where(
                    Conversation.status == 'active',
                    Session.status == 'active'
                )
                .group_by(Session.id)
                .order_by(func.count(Conversation.id).desc())
            )
            sessions_stats = sessions_result.all()

        if not sessions_stats:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        text = f"""üéØ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ª–∏–¥–∞–º</b>

üìä <b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:</b> {total_leads}

üìã <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Å—Å–∏—è–º:</b>
"""

        for session in sessions_stats:
            text += f"‚Ä¢ {session.session_name}: {session.leads_count} –¥–∏–∞–ª–æ–≥–æ–≤\n"

        text += f"""
‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏.
–ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º –ª–∏–¥–∞–º.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="broadcast_all_prepare"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ª–∏–¥–∞–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@broadcasts_router.callback_query(F.data == "broadcast_all_prepare")
async def broadcast_all_prepare(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""

    await state.update_data(
        session_id="all",
        target_type="all"
    )

    text = """‚úèÔ∏è <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ª–∏–¥–∞–º</b>

üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ª–∏–¥–∞–º —á–µ—Ä–µ–∑ –í–°–ï —Å–µ—Å—Å–∏–∏.

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç –í–°–ï –ª–∏–¥—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏—è—Ö
‚Ä¢ –ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏
‚Ä¢ –ú–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –±—É–¥—É—Ç –ø–∞—É–∑—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_main")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_message)


@broadcasts_router.callback_query(F.data == "broadcast_status")
async def broadcast_status(callback: CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏"""

    try:
        async with get_db() as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            with_ref_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.ref_link_sent == True,
                    Conversation.status == 'active'
                )
            )
            with_ref = with_ref_result.scalar() or 0

            without_ref_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.ref_link_sent == False,
                    Conversation.status == 'active'
                )
            )
            without_ref = without_ref_result.scalar() or 0

        text = f"""üîó <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏</b>

üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥–æ–≤:</b>
‚Ä¢ –° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π: {with_ref}
‚Ä¢ –ë–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏: {without_ref}

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üîó –° —Å—Å—ã–ª–∫–æ–π ({with_ref})",
                        callback_data="broadcast_status_prepare_with_ref"
                    ),
                    InlineKeyboardButton(
                        text=f"üìù –ë–µ–∑ —Å—Å—ã–ª–∫–∏ ({without_ref})",
                        callback_data="broadcast_status_prepare_without_ref"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@broadcasts_router.callback_query(F.data.startswith("broadcast_status_prepare_"))
async def broadcast_status_prepare(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""

    status_type = callback.data.split("_")[-1]  # with_ref –∏–ª–∏ without_ref

    await state.update_data(
        session_id="status",
        target_type=status_type
    )

    status_name = "—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π" if status_type == "with_ref" else "–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏"

    text = f"""‚úèÔ∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ –ª–∏–¥–∞–º {status_name}</b>

üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç —Ç–æ–ª—å–∫–æ –ª–∏–¥—ã {status_name}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
‚Ä¢ –ú–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –±—É–¥—É—Ç –ø–∞—É–∑—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_main")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_message)


@broadcasts_router.callback_query(F.data == "broadcast_history")
async def broadcast_history(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""

    text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>

üöß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º
‚Ä¢ –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏

–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_main")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@broadcasts_router.message(lambda message: message.text == "/cancel")
async def cancel_broadcast(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    await state.clear()
    await message.answer(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="broadcast_main")
            ]]
        )
    )