# bot/handlers/ai_control/ai_control.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, update, func
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import Session, Conversation, SessionStatus
from core.handlers.message_handler import message_handler
from loguru import logger
import asyncio

ai_control_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ò–ò
GLOBAL_AI_ENABLED = True


@ai_control_router.callback_query(F.data == "ai_control_main")
async def ai_control_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with get_db() as db:
            # –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ò–ò
            enabled_sessions_result = await db.execute(
                select(func.count(Session.id))
                .where(Session.ai_enabled == True)
            )
            enabled_sessions = enabled_sessions_result.scalar() or 0

            # –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            active_dialogs_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.status == "active",
                    Conversation.ai_disabled == False
                )
            )
            active_dialogs = active_dialogs_result.scalar() or 0

            # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            paused_dialogs_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.auto_responses_paused == True)
            )
            paused_dialogs = paused_dialogs_result.scalar() or 0

        global_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if GLOBAL_AI_ENABLED else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"

        text = f"""ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ò–ò</b>

üåê <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:</b> {global_status}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°–µ—Å—Å–∏–π —Å –ò–ò: {enabled_sessions}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {active_dialogs}
‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {paused_dialogs}

‚öôÔ∏è <b>–£—Ä–æ–≤–Ω–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ üåê –ì–ª–æ–±–∞–ª—å–Ω–æ - –≤—Å—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ ü§ñ –ü–æ —Å–µ—Å—Å–∏—è–º - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã  
‚Ä¢ üí¨ –ü–æ –¥–∏–∞–ª–æ–≥–∞–º - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë" if GLOBAL_AI_ENABLED else "üü¢ –í–∫–ª—é—á–∏—Ç—å –≤—Å—ë",
                        callback_data="ai_toggle_global"
                    )
                ],
                [
                    InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", callback_data="ai_sessions_control"),
                    InlineKeyboardButton(text="üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏", callback_data="ai_dialogs_control")
                ],
                [
                    InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="ai_pause_all"),
                    InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë", callback_data="ai_resume_all")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ai_control_main"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@ai_control_router.callback_query(F.data == "ai_toggle_global")
async def ai_toggle_global(callback: CallbackQuery):
    """–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ò–ò"""

    global GLOBAL_AI_ENABLED
    GLOBAL_AI_ENABLED = not GLOBAL_AI_ENABLED

    status = "–≤–∫–ª—é—á–µ–Ω–∞" if GLOBAL_AI_ENABLED else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"

    if not GLOBAL_AI_ENABLED:
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        active_sessions = await message_handler.get_active_sessions()
        for session_name in active_sessions:
            await message_handler.remove_session(session_name)

        await callback.answer(f"üî¥ –°–∏—Å—Ç–µ–º–∞ –ò–ò {status}")
    else:
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        async with get_db() as db:
            result = await db.execute(
                select(Session).where(
                    Session.status == SessionStatus.ACTIVE,
                    Session.ai_enabled == True
                )
            )
            sessions = result.scalars().all()

            for session in sessions:
                await message_handler.add_session(session.session_name)

        await callback.answer(f"üü¢ –°–∏—Å—Ç–µ–º–∞ –ò–ò {status}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await ai_control_main(callback)


@ai_control_router.callback_query(F.data == "ai_pause_all")
async def ai_pause_all(callback: CallbackQuery):
    """–ü–∞—É–∑–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""

    try:
        async with get_db() as db:
            # –°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            await db.execute(
                update(Conversation)
                .where(Conversation.status == "active")
                .values(auto_responses_paused=True)
            )
            await db.commit()

        await callback.answer("‚è∏Ô∏è –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        await ai_control_main(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_resume_all")
async def ai_resume_all(callback: CallbackQuery):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""

    try:
        async with get_db() as db:
            # –£–±–∏—Ä–∞–µ–º –ø–∞—É–∑—É —Å–æ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            await db.execute(
                update(Conversation)
                .values(
                    auto_responses_paused=False,
                    ai_disabled=False
                )
            )
            await db.commit()

        await callback.answer("‚ñ∂Ô∏è –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await ai_control_main(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_sessions_control")
async def ai_sessions_control(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –ø–æ —Å–µ—Å—Å–∏—è–º"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç message_handler
        from core.handlers.message_handler import message_handler
        session_stats = await message_handler.get_session_stats()

        if not session_stats:
            text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –ø–æ —Å–µ—Å—Å–∏—è–º</b>\n\nüìù –°–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_control_main")
                ]]
            )
        else:
            text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –ø–æ —Å–µ—Å—Å–∏—è–º</b>\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            active_sessions = []
            paused_sessions = []
            inactive_sessions = []

            for session_name, stats in session_stats.items():
                status = stats.get("status", "unknown")
                persona = stats.get("persona_type", "–Ω–µ –∑–∞–¥–∞–Ω–∞")

                if status == "active":
                    active_sessions.append((session_name, persona, stats))
                elif status == "paused":
                    paused_sessions.append((session_name, persona, stats))
                else:
                    inactive_sessions.append((session_name, persona, stats))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            text += f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {len(active_sessions)}\n"
            text += f"‚è∏Ô∏è <b>–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö:</b> {len(paused_sessions)}\n"
            text += f"‚ùå <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:</b> {len(inactive_sessions)}\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å–µ—Å—Å–∏–π
            all_sessions = active_sessions + paused_sessions + inactive_sessions

            keyboard_buttons = []

            for i, (session_name, persona, stats) in enumerate(all_sessions[:8]):  # –ü–µ—Ä–≤—ã–µ 8
                status = stats.get("status", "unknown")
                ai_enabled = stats.get("ai_enabled", False)

                status_emoji = {
                    "active": "üü¢",
                    "paused": "‚è∏Ô∏è",
                    "inactive": "üî¥",
                    "disconnected": "‚ö†Ô∏è"
                }.get(status, "‚ùì")

                text += f"{status_emoji} <code>{session_name}</code> ({persona})\n"
                text += f"   üí¨ –î–∏–∞–ª–æ–≥–æ–≤: {stats.get('active_dialogs', 0)} | –°–æ–æ–±—â–µ–Ω–∏–π 24—á: {stats.get('messages_24h', 0)}\n"

                # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if status == "active":
                    button_text = f"‚è∏Ô∏è –ü–∞—É–∑–∞ {session_name}"
                    callback_data = f"ai_pause_session_{session_name}"
                elif status == "paused":
                    button_text = f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ {session_name}"
                    callback_data = f"ai_resume_session_{session_name}"
                else:
                    button_text = f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {session_name}"
                    callback_data = f"ai_restart_session_{session_name}"

                keyboard_buttons.append([
                    InlineKeyboardButton(text=button_text, callback_data=callback_data)
                ])

            # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞ –≤—Å–µ—Ö", callback_data="ai_pause_all_sessions"),
                    InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö", callback_data="ai_resume_all_sessions")
                ],
                [
                    InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="ai_cleanup_sessions"),
                    InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ai_detailed_stats")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ai_sessions_control"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_control_main")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@ai_control_router.callback_query(F.data.startswith("ai_pause_session_"))
async def ai_pause_session(callback: CallbackQuery):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_name = callback.data.replace("ai_pause_session_", "")

        from core.handlers.message_handler import message_handler
        success = await message_handler.pause_session(session_name)

        if success:
            await callback.answer(f"‚è∏Ô∏è –°–µ—Å—Å–∏—è {session_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {session_name}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data.startswith("ai_resume_session_"))
async def ai_resume_session(callback: CallbackQuery):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_name = callback.data.replace("ai_resume_session_", "")

        from core.handlers.message_handler import message_handler
        success = await message_handler.resume_session(session_name)

        if success:
            await callback.answer(f"‚ñ∂Ô∏è –°–µ—Å—Å–∏—è {session_name} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å {session_name}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data.startswith("ai_restart_session_"))
async def ai_restart_session(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_name = callback.data.replace("ai_restart_session_", "")

        from core.handlers.message_handler import message_handler

        # –£–¥–∞–ª—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
        await message_handler.remove_session(session_name)
        await asyncio.sleep(1)
        await message_handler.add_session(session_name)

        await callback.answer(f"üîÑ –°–µ—Å—Å–∏—è {session_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_pause_all_sessions")
async def ai_pause_all_sessions(callback: CallbackQuery):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

    try:
        from core.handlers.message_handler import message_handler

        active_sessions = await message_handler.get_active_sessions()
        paused_count = 0

        for session_name in active_sessions:
            success = await message_handler.pause_session(session_name)
            if success:
                paused_count += 1

        await callback.answer(f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {paused_count} —Å–µ—Å—Å–∏–π")
        await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_resume_all_sessions")
async def ai_resume_all_sessions(callback: CallbackQuery):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

    try:
        from core.handlers.message_handler import message_handler

        session_stats = await message_handler.get_session_stats()
        resumed_count = 0

        for session_name, stats in session_stats.items():
            if stats.get("status") != "active":
                success = await message_handler.resume_session(session_name)
                if success:
                    resumed_count += 1

        await callback.answer(f"‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ {resumed_count} —Å–µ—Å—Å–∏–π")
        await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_cleanup_sessions")
async def ai_cleanup_sessions(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""

    try:
        from core.handlers.message_handler import message_handler

        cleaned_count = await message_handler.cleanup_inactive_sessions()

        if cleaned_count > 0:
            await callback.answer(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        else:
            await callback.answer("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")

        await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_detailed_stats")
async def ai_detailed_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π"""

    try:
        from core.handlers.message_handler import message_handler

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        session_stats = await message_handler.get_session_stats()
        realtime_stats = message_handler.get_realtime_stats()

        text = f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π</b>

üîÑ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {realtime_stats.get('active_sessions', 0)}
‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {realtime_stats.get('paused_sessions', 0)}
‚Ä¢ –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π: {realtime_stats.get('queue_size', 0)}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: {realtime_stats.get('total_response_delays', 0)}

üìà <b>–¢–æ–ø —Å–µ—Å—Å–∏–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>"""

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ 24—á
        sorted_sessions = sorted(
            session_stats.items(),
            key=lambda x: x[1].get('messages_24h', 0),
            reverse=True
        )

        for session_name, stats in sorted_sessions[:5]:
            status_emoji = {
                "active": "üü¢",
                "paused": "‚è∏Ô∏è",
                "inactive": "üî¥"
            }.get(stats.get("status"), "‚ùì")

            text += f"\n{status_emoji} <code>{session_name}</code>"
            text += f"\n   üìä –°–æ–æ–±—â–µ–Ω–∏–π 24—á: {stats.get('messages_24h', 0)}"
            text += f"\n   üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats.get('active_dialogs', 0)}"
            text += f"\n   üìà –í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {stats.get('total_conversions', 0)}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ai_detailed_stats"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_sessions_control")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@ai_control_router.callback_query(F.data.startswith("ai_toggle_session_"))
async def ai_toggle_session(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–ò –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò
            session.ai_enabled = not session.ai_enabled
            await db.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            if session.ai_enabled:
                await message_handler.add_session(session.session_name)
            else:
                await message_handler.remove_session(session.session_name)

            status = "–≤–∫–ª—é—á–µ–Ω" if session.ai_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"‚úÖ –ò–ò –¥–ª—è {session.session_name} {status}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            await ai_sessions_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ò–ò —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@ai_control_router.callback_query(F.data == "ai_dialogs_control")
async def ai_dialogs_control(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –ø–æ –¥–∏–∞–ª–æ–≥–∞–º"""

    try:
        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(
                    Conversation.status == "active",
                    (Conversation.ai_disabled == True) | (Conversation.auto_responses_paused == True)
                )
                .order_by(Conversation.updated_at.desc())
                .limit(10)
            )
            problem_dialogs = result.scalars().all()

        text = "üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –ø–æ –¥–∏–∞–ª–æ–≥–∞–º</b>\n\n"

        if not problem_dialogs:
            text += "‚úÖ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_control_main")
                ]]
            )
        else:
            text += f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(problem_dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:\n\n"

            keyboard_buttons = []
            for conv in problem_dialogs:
                status = "üî¥ –ò–ò –≤—ã–∫–ª" if conv.ai_disabled else "‚è∏Ô∏è –ü–∞—É–∑–∞"
                text += f"{status} @{conv.lead.username} ‚Üî {conv.session.session_name}\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {conv.lead.username}",
                        callback_data=f"ai_restore_dialog_{conv.id}"
                    )
                ])

            keyboard_buttons.append([
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_control_main")
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@ai_control_router.callback_query(F.data.startswith("ai_restore_dialog_"))
async def ai_restore_dialog(callback: CallbackQuery):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–ò –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            await db.execute(
                update(Conversation)
                .where(Conversation.id == conv_id)
                .values(
                    ai_disabled=False,
                    auto_responses_paused=False
                )
            )
            await db.commit()

        await callback.answer("‚úÖ –ò–ò –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await ai_dialogs_control(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")