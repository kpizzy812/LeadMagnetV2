# bot/handlers/dashboard/dashboard.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from storage.database import get_db
from storage.models.base import Conversation, Session, Message as DBMessage, ConversationStatus
from sqlalchemy import select, func
from loguru import logger

dashboard_router = Router()


@dashboard_router.message(Command("start"))
async def cmd_start(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""

    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_dashboard_stats()

    text = f"""üéØ <b>Lead Management System</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats['active_conversations']}
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['conversions_today']}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {stats['pending_followups']}

‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%H:%M:%S')}"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –°–µ—Å—Å–∏–∏", callback_data="sessions_list"),
                InlineKeyboardButton(text="üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="dialogs_list")
            ],
            [
                InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_main"),
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_main")
            ],
            [
                InlineKeyboardButton(text="üìÖ –§–æ–ª–æ—É–∞–ø—ã", callback_data="followups_main"),
                InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò", callback_data="ai_control_main")  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh")
            ]
        ]
    )

    await message.answer(text, reply_markup=keyboard)


@dashboard_router.callback_query(F.data == "dashboard_refresh")
async def refresh_dashboard(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""

    stats = await get_dashboard_stats()

    text = f"""üéØ <b>Lead Management System</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats['active_conversations']}
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['conversions_today']}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {stats['pending_followups']}

‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%H:%M:%S')}"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –°–µ—Å—Å–∏–∏", callback_data="sessions_list"),
                InlineKeyboardButton(text="üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="dialogs_list")
            ],
            [
                InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_main"),
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_main")
            ],
            [
                InlineKeyboardButton(text="üìÖ –§–æ–ª–æ—É–∞–ø—ã", callback_data="followups_main"),
                InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò", callback_data="ai_control_main")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")


async def get_dashboard_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""

    try:
        async with get_db() as db:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            active_conversations_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.status == ConversationStatus.ACTIVE)
            )
            active_conversations = active_conversations_result.scalar() or 0

            # –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π
            total_sessions_result = await db.execute(
                select(func.count(Session.id))
            )
            total_sessions = total_sessions_result.scalar() or 0

            # –°–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            messages_today_result = await db.execute(
                select(func.count(DBMessage.id))
                .where(func.date(DBMessage.created_at) == today)
            )
            messages_today = messages_today_result.scalar() or 0

            # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ —Å–µ–≥–æ–¥–Ω—è (–¥–∏–∞–ª–æ–≥–∏ –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞)
            conversions_today_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.ref_link_sent == True,
                    func.date(Conversation.ref_link_sent_at) == today
                )
            )
            conversions_today = conversions_today_result.scalar() or 0

            # –û–∂–∏–¥–∞—é—â–∏–µ —Ñ–æ–ª–æ—É–∞–ø—ã
            from storage.models.base import FollowupSchedule
            pending_followups_result = await db.execute(
                select(func.count(FollowupSchedule.id))
                .where(FollowupSchedule.executed == False)
            )
            pending_followups = pending_followups_result.scalar() or 0

            return {
                'active_conversations': active_conversations,
                'total_sessions': total_sessions,
                'messages_today': messages_today,
                'conversions_today': conversions_today,
                'pending_followups': pending_followups
            }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return {
            'active_conversations': 0,
            'total_sessions': 0,
            'messages_today': 0,
            'conversions_today': 0,
            'pending_followups': 0
        }