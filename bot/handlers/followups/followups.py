# bot/handlers/followups/followups.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func, case
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta

from storage.database import get_db
from storage.models.base import (
    FollowupSchedule, Conversation, Session, Lead
)
from workflows.followups.scheduler import followup_scheduler
from loguru import logger

followups_router = Router()


@followups_router.callback_query(F.data == "followups_main")
async def followups_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–æ–ª–æ—É–∞–ø–æ–≤"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ–ª–æ—É–∞–ø–æ–≤
        stats = await get_followups_stats()

        text = f"""üìÖ <b>–°–∏—Å—Ç–µ–º–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {stats['pending']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['executed_today']}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['total_week']}

üîÑ <b>–¢–∏–ø—ã —Ñ–æ–ª–æ—É–∞–ø–æ–≤:</b>
‚Ä¢ üîî reminder - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ–±–µ
‚Ä¢ üíé value - –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
‚Ä¢ üì∏ proof - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ üéØ final - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="followups_pending"),
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="followups_stats")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="followups_main"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–ª–æ—É–∞–ø–æ–≤")


@followups_router.callback_query(F.data == "followups_pending")
async def followups_pending(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ñ–æ–ª–æ—É–∞–ø—ã
        pending_followups = await followup_scheduler.get_pending_followups()

        if not pending_followups:
            text = "üìÖ <b>–û–∂–∏–¥–∞—é—â–∏–µ —Ñ–æ–ª–æ—É–∞–ø—ã</b>\n\nüìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤"

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="followups_main")
                ]]
            )
        else:
            text = f"üìÖ <b>–û–∂–∏–¥–∞—é—â–∏–µ —Ñ–æ–ª–æ—É–∞–ø—ã ({len(pending_followups)})</b>\n\n"

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            pending_followups.sort(key=lambda x: x['time_left'])

            keyboard_buttons = []

            for followup in pending_followups[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                time_left = followup['time_left']

                if time_left <= 0:
                    time_str = "‚è∞ –ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"
                elif time_left < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                    time_str = f"‚è≥ {int(time_left / 60)} –º–∏–Ω"
                elif time_left < 86400:  # –ú–µ–Ω—å—à–µ –¥–Ω—è
                    time_str = f"üïê {int(time_left / 3600)} —á"
                else:
                    time_str = f"üìÖ {int(time_left / 86400)} –¥–Ω"

                type_emoji = {
                    "reminder": "üîî",
                    "value": "üíé",
                    "proof": "üì∏",
                    "final": "üéØ"
                }.get(followup['type'], "üìù")

                text += f"{type_emoji} {followup['type']} ‚Üí @{followup['lead_username']}\n"
                text += f"   üì± –°–µ—Å—Å–∏—è: {followup['session_name']}\n"
                text += f"   {time_str}\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if len(pending_followups) <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–ª–æ —Ñ–æ–ª–æ—É–∞–ø–æ–≤
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {followup['type']} ‚Üí @{followup['lead_username'][:10]}",
                            callback_data=f"followup_cancel_{followup['id']}"
                        )
                    ])

            if len(pending_followups) > 10:
                text += f"... –∏ –µ—â–µ {len(pending_followups) - 10} —Ñ–æ–ª–æ—É–∞–ø–æ–≤"

            keyboard_buttons.append([
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="followups_pending"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="followups_main")
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@followups_router.callback_query(F.data.startswith("followup_cancel_"))
async def followup_cancel(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ñ–æ–ª–æ—É–∞–ø–∞"""

    try:
        followup_id = int(callback.data.split("_")[-1])

        success = await followup_scheduler.cancel_followup(followup_id)

        if success:
            await callback.answer("‚úÖ –§–æ–ª–æ—É–∞–ø –æ—Ç–º–µ–Ω–µ–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            await followups_pending(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–æ–ª–æ—É–∞–ø–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–æ–ª–æ—É–∞–ø–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã")


@followups_router.callback_query(F.data == "followups_stats")
async def followups_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤"""

    try:
        async with get_db() as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            type_stats_result = await db.execute(
                select(
                    FollowupSchedule.followup_type,
                    func.count(FollowupSchedule.id).label('total'),
                    func.sum(
                        case(
                            (FollowupSchedule.executed == True, 1),
                            else_=0
                        )
                    ).label('executed')
                )
                .group_by(FollowupSchedule.followup_type)
                .order_by(func.count(FollowupSchedule.id).desc())
            )
            type_stats = type_stats_result.all()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            today = datetime.now().date()

            stats_periods = []
            for days_ago in range(7):
                date = today - timedelta(days=days_ago)

                executed_result = await db.execute(
                    select(func.count(FollowupSchedule.id))
                    .where(
                        FollowupSchedule.executed == True,
                        func.date(FollowupSchedule.executed_at) == date
                    )
                )
                executed = executed_result.scalar() or 0

                stats_periods.append({
                    'date': date,
                    'executed': executed
                })

        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤</b>\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        if type_stats:
            text += "<b>üìà –ü–æ —Ç–∏–ø–∞–º —Ñ–æ–ª–æ—É–∞–ø–æ–≤:</b>\n"

            type_names = {
                "reminder": "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                "value": "üíé –¶–µ–Ω–Ω–æ—Å—Ç—å",
                "proof": "üì∏ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
                "final": "üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ"
            }

            for stat in type_stats:
                type_name = type_names.get(stat.followup_type, stat.followup_type)
                executed = stat.executed or 0
                total = stat.total or 1
                success_rate = (executed / total) * 100

                text += f"{type_name}: {executed}/{total} ({success_rate:.1f}%)\n"

            text += "\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        text += "<b>üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n"
        for period in stats_periods:
            date_str = period['date'].strftime('%d.%m')
            text += f"{date_str}: {period['executed']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="followups_stats"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="followups_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def get_followups_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ–ª–æ—É–∞–ø–æ–≤"""

    try:
        async with get_db() as db:
            # –û–∂–∏–¥–∞—é—â–∏–µ —Ñ–æ–ª–æ—É–∞–ø—ã
            pending_result = await db.execute(
                select(func.count(FollowupSchedule.id))
                .where(FollowupSchedule.executed == False)
            )
            pending = pending_result.scalar() or 0

            # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            executed_today_result = await db.execute(
                select(func.count(FollowupSchedule.id))
                .where(
                    FollowupSchedule.executed == True,
                    func.date(FollowupSchedule.executed_at) == today
                )
            )
            executed_today = executed_today_result.scalar() or 0

            # –í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now().date() - timedelta(days=7)
            total_week_result = await db.execute(
                select(func.count(FollowupSchedule.id))
                .where(
                    FollowupSchedule.executed == True,
                    func.date(FollowupSchedule.executed_at) >= week_ago
                )
            )
            total_week = total_week_result.scalar() or 0

            return {
                'pending': pending,
                'executed_today': executed_today,
                'total_week': total_week
            }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")
        return {
            'pending': 0,
            'executed_today': 0,
            'total_week': 0
        }