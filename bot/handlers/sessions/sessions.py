# bot/handlers/sessions.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import Session, SessionStatus, PersonaType
from loguru import logger

sessions_router = Router()


@sessions_router.callback_query(F.data == "sessions_list")
async def sessions_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Session)
                .order_by(Session.created_at.desc())
                .limit(20)
            )
            sessions = result.scalars().all()

        if not sessions:
            await callback.message.edit_text(
                "üìù –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                    ]]
                )
            )
            return

        text = "üë• <b>–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:</b>\n\n"

        keyboard_buttons = []

        for session in sessions:
            status_emoji = {
                SessionStatus.ACTIVE: "üü¢",
                SessionStatus.INACTIVE: "üü°",
                SessionStatus.BANNED: "üî¥",
                SessionStatus.ERROR: "‚ö†Ô∏è"
            }.get(session.status, "‚ùì")

            ai_status = "ü§ñ" if session.ai_enabled else "üì¥"

            text += f"{status_emoji} {ai_status} <code>{session.session_name}</code>\n"
            text += f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞: {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}\n"
            text += f"   ‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {session.total_conversations}\n"
            text += f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {session.total_conversions}\n\n"

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚öôÔ∏è {session.session_name}",
                    callback_data=f"session_manage_{session.id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="sessions_list")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π")


@sessions_router.callback_query(F.data.startswith("session_manage_"))
async def session_manage(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–µ–π"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        status_emoji = {
            SessionStatus.ACTIVE: "üü¢ –ê–∫—Ç–∏–≤–Ω–∞",
            SessionStatus.INACTIVE: "üü° –ù–µ–∞–∫—Ç–∏–≤–Ω–∞",
            SessionStatus.BANNED: "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
            SessionStatus.ERROR: "‚ö†Ô∏è –û—à–∏–±–∫–∞"
        }.get(session.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        ai_status = "ü§ñ –í–∫–ª—é—á–µ–Ω" if session.ai_enabled else "üì¥ –û—Ç–∫–ª—é—á–µ–Ω"

        text = f"""‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π</b>

üì± <b>–°–µ—Å—Å–∏—è:</b> <code>{session.session_name}</code>
üîê <b>Telegram ID:</b> <code>{session.telegram_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>
üë§ <b>Username:</b> @{session.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji}
ü§ñ <b>–ò–ò:</b> {ai_status}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {session.total_conversations}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {session.total_messages_sent}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {session.total_conversions}

üîó <b>–†–µ—Ñ —Å—Å—ã–ª–∫–∞:</b> {session.project_ref_link or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§ñ –í—ã–∫–ª –ò–ò" if session.ai_enabled else "ü§ñ –í–∫–ª –ò–ò",
                        callback_data=f"session_toggle_ai_{session.id}"
                    ),
                    InlineKeyboardButton(
                        text="üé≠ –ü–µ—Ä—Å–æ–Ω–∞",
                        callback_data=f"session_persona_{session.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí¨ –î–∏–∞–ª–æ–≥–∏",
                        callback_data=f"session_dialogs_{session.id}"
                    ),
                    InlineKeyboardButton(
                        text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞",
                        callback_data=f"session_broadcast_{session.id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="sessions_list")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏")


@sessions_router.callback_query(F.data.startswith("session_toggle_ai_"))
async def session_toggle_ai(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–ò –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò
            session.ai_enabled = not session.ai_enabled
            await db.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            from core.handlers.message_handler import message_handler
            if session.ai_enabled:
                await message_handler.add_session(session.session_name)
            else:
                await message_handler.remove_session(session.session_name)

            status = "–≤–∫–ª—é—á–µ–Ω" if session.ai_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"‚úÖ –ò–ò –¥–ª—è —Å–µ—Å—Å–∏–∏ {status}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
            await session_manage(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ò–ò: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ò–ò")


@sessions_router.callback_query(F.data.startswith("session_persona_"))
async def session_persona_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        text = "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è —Å–µ—Å—Å–∏–∏:</b>\n\n"
        text += "üë® <b>–ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω—ã:</b>\n"
        text += "‚Ä¢ <code>basic_man</code> - –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å\n"
        text += "‚Ä¢ <code>basic_woman</code> - –ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞\n\n"
        text += "üíº <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ:</b>\n"
        text += "‚Ä¢ <code>hyip_man</code> - HYIP —ç–∫—Å–ø–µ—Ä—Ç\n"
        text += "‚Ä¢ <code>investor_man</code> - –ò–Ω–≤–µ—Å—Ç–æ—Ä\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë® –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å",
                        callback_data=f"session_set_persona_{session_id}_basic_man"
                    ),
                    InlineKeyboardButton(
                        text="üë© –ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞",
                        callback_data=f"session_set_persona_{session_id}_basic_woman"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üíº HYIP –º—É–∂—á–∏–Ω–∞",
                        callback_data=f"session_set_persona_{session_id}_hyip_man"
                    ),
                    InlineKeyboardButton(
                        text="üìà –ò–Ω–≤–µ—Å—Ç–æ—Ä",
                        callback_data=f"session_set_persona_{session_id}_investor_man"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"session_manage_{session_id}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@sessions_router.callback_query(F.data.startswith("session_set_persona_"))
async def session_set_persona(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    try:
        parts = callback.data.split("_")
        session_id = int(parts[3])
        persona_type = parts[4]

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É
            session.persona_type = persona_type
            await db.commit()

            persona_names = {
                "basic_man": "–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å",
                "basic_woman": "–ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞",
                "hyip_man": "HYIP –º—É–∂—á–∏–Ω–∞",
                "investor_man": "–ò–Ω–≤–µ—Å—Ç–æ—Ä"
            }

            persona_name = persona_names.get(persona_type, persona_type)
            await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞: {persona_name}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ—Å—Å–∏–µ–π
            await session_manage(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω—ã")


@sessions_router.callback_query(F.data.startswith("session_dialogs_"))
async def session_dialogs(callback: CallbackQuery):
    """–î–∏–∞–ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session_result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = session_result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å–µ—Å—Å–∏–∏
            from storage.models.base import Conversation, Lead
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .where(Conversation.session_id == session_id)
                .order_by(Conversation.updated_at.desc())
                .limit(10)
            )
            conversations = result.scalars().all()

        if not conversations:
            text = f"üí¨ <b>–î–∏–∞–ª–æ–≥–∏ —Å–µ—Å—Å–∏–∏ {session.session_name}</b>\n\n"
            text += "üìù –î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"session_manage_{session_id}"
                    )
                ]]
            )
        else:
            text = f"üí¨ <b>–î–∏–∞–ª–æ–≥–∏ —Å–µ—Å—Å–∏–∏ {session.session_name}</b>\n\n"

            keyboard_buttons = []

            for conv in conversations:
                status_emoji = "üü¢" if conv.status == "active" else "üî¥"
                ref_emoji = "üîó" if conv.ref_link_sent else "üìù"

                text += f"{status_emoji} {ref_emoji} @{conv.lead.username}\n"
                text += f"   ‚Ä¢ –≠—Ç–∞–ø: {conv.current_stage}\n"
                text += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {conv.messages_count}\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üë§ {conv.lead.username}",
                        callback_data=f"dialog_view_{conv.id}"
                    )
                ])

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=f"session_manage_{session_id}"
                )
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")