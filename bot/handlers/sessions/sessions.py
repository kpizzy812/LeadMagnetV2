# bot/handlers/sessions/sessions.py - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –î–õ–Ø –†–ï–¢–†–û–°–ü–ï–ö–¢–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models import Session, SessionStatus, PersonaType, Conversation, ConversationStatus
from core.scanning.retrospective_scanner import retrospective_scanner
from core.handlers.message_handler import message_handler
from loguru import logger

sessions_router = Router()


@sessions_router.callback_query(F.data == "sessions_list")
async def sessions_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Å —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""

    try:
        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–∏–∞–ª–æ–≥–æ–≤
            result = await db.execute(
                select(Session).order_by(Session.created_at.desc()).limit(20)
            )
            sessions = result.scalars().all()

        if not sessions:
            await callback.message.edit_text(
                "üìù –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                    ]]
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–µ—Ä–∞
        scanner_stats = retrospective_scanner.get_stats()

        text = f"""üë• <b>–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π</b>

üîç <b>–†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if scanner_stats.get('is_running') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {scanner_stats.get('scan_interval', 0)} —Å–µ–∫
‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {scanner_stats.get('total_new_messages', 0)}

üìã <b>–°–µ—Å—Å–∏–∏:</b>

"""

        keyboard_buttons = []

        for session in sessions:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏
            async with get_db() as db:
                dialogs_result = await db.execute(
                    select(func.count(Conversation.id)).where(
                        Conversation.session_name == session.session_name
                    )
                )
                total_dialogs = dialogs_result.scalar() or 0

                # –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                pending_result = await db.execute(
                    select(func.count(Conversation.id)).where(
                        Conversation.session_name == session.session_name,
                        Conversation.requires_approval == True,
                        Conversation.admin_approved == False
                    )
                )
                pending_approvals = pending_result.scalar() or 0

            status_emoji = {
                SessionStatus.ACTIVE: "üü¢",
                SessionStatus.INACTIVE: "üü°",
                SessionStatus.ERROR: "‚ö†Ô∏è"
            }.get(session.status, "‚ùì")

            ai_status = "ü§ñ" if session.ai_enabled else "üì¥"
            scan_status = "üîç" if session.ai_enabled and session.status == SessionStatus.ACTIVE else "‚è∏Ô∏è"

            text += f"{status_emoji} {ai_status} {scan_status} <code>{session.session_name}</code>\n"
            text += f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞: {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}\n"
            text += f"   ‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {total_dialogs} (–æ–∂–∏–¥–∞–µ—Ç: {pending_approvals})\n"
            text += f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {session.total_conversions}\n\n"

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚öôÔ∏è {session.session_name}",
                    callback_data=f"session_manage_{session.id}"
                )
            ])

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_buttons.extend([
            [
                InlineKeyboardButton(text="üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="force_scan_now"),
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="pending_approvals")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="sessions_list")
            ]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π")


@sessions_router.callback_query(F.data == "force_scan_now")
async def force_scan_now(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    try:
        await callback.answer("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")

        result = await message_handler.force_scan_now()

        if result.get("success"):
            text = f"""‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

üïê <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {result.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ —Å–µ—Å—Å–∏–π."""
        else:
            text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π", callback_data="sessions_list"),
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="force_scan_now")
            ]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


@sessions_router.callback_query(F.data == "pending_approvals")
async def pending_approvals(callback: CallbackQuery):
    """–î–∏–∞–ª–æ–≥–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        pending = await message_handler.get_pending_approvals()

        if not pending:
            text = """‚úÖ <b>–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>

–í—Å–µ –Ω–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –æ–¥–æ–±—Ä–µ–Ω—ã –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ."""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sessions_list")]
            ])
        else:
            text = f"üîî <b>–î–∏–∞–ª–æ–≥–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ({len(pending)})</b>\n\n"

            keyboard_buttons = []

            for conv in pending[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                last_msg_time = ""
                if conv['last_message_time']:
                    last_msg_time = conv['last_message_time'].strftime('%d.%m %H:%M')

                text += f"üë§ <b>@{conv['lead_username']}</b>\n"
                text += f"ü§ñ –°–µ—Å—Å–∏—è: {conv['session_name']}\n"
                text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {conv['total_messages']}\n"
                text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_msg_time}\n"
                if conv['last_message']:
                    text += f"üìù –¢–µ–∫—Å—Ç: {conv['last_message'][:100]}...\n"
                text += "\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å @{conv['lead_username']}",
                        callback_data=f"approve_conv_{conv['conversation_id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå",
                        callback_data=f"reject_conv_{conv['conversation_id']}"
                    )
                ])

            keyboard_buttons.append([
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sessions_list")
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–π", show_alert=True)


@sessions_router.callback_query(F.data.startswith("approve_conv_"))
async def approve_conversation(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        conv_id = int(callback.data.split("_")[-1])
        admin_id = callback.from_user.id

        success = await message_handler.approve_conversation(
            conversation_id=conv_id,
            admin_id=admin_id,
            comment="–û–¥–æ–±—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        )

        if success:
            await callback.answer("‚úÖ –î–∏–∞–ª–æ–≥ –æ–¥–æ–±—Ä–µ–Ω!", show_alert=True)
            await pending_approvals(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è", show_alert=True)


@sessions_router.callback_query(F.data.startswith("reject_conv_"))
async def reject_conversation(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        conv_id = int(callback.data.split("_")[-1])
        admin_id = callback.from_user.id

        success = await message_handler.reject_conversation(
            conversation_id=conv_id,
            admin_id=admin_id,
            comment="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        )

        if success:
            await callback.answer("üö´ –î–∏–∞–ª–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
            await pending_approvals(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)


@sessions_router.callback_query(F.data.startswith("session_manage_"))
async def session_manage(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–µ–π"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–æ–≤
        session_status = await message_handler.get_session_status(session.session_name)

        status_emoji = {
            SessionStatus.ACTIVE: "üü¢ –ê–∫—Ç–∏–≤–Ω–∞",
            SessionStatus.INACTIVE: "üü° –ù–µ–∞–∫—Ç–∏–≤–Ω–∞",
            SessionStatus.ERROR: "‚ö†Ô∏è –û—à–∏–±–∫–∞"
        }.get(session.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        ai_status = "ü§ñ –í–∫–ª—é—á–µ–Ω" if session.ai_enabled else "üì¥ –û—Ç–∫–ª—é—á–µ–Ω"
        scanning_status = "üîç –°–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è" if session_status.get('scanning_enabled') else "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        text = f"""‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π</b>

üì± <b>–°–µ—Å—Å–∏—è:</b> <code>{session.session_name}</code>
üîê <b>Telegram ID:</b> <code>{session.telegram_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>
üë§ <b>Username:</b> @{session.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji}
ü§ñ <b>–ò–ò:</b> {ai_status}
üîç <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> {scanning_status}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {session_status.get('total_conversations', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {session_status.get('pending_approvals', 0)}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {session.total_conversions}

üîó <b>–†–µ—Ñ —Å—Å—ã–ª–∫–∞:</b> {session.project_ref_link or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}"""

        keyboard_buttons = [
            [
                InlineKeyboardButton(
                    text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" if session.ai_enabled else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    callback_data=f"session_toggle_scanning_{session.id}"
                ),
                InlineKeyboardButton(
                    text="üé≠ –ü–µ—Ä—Å–æ–Ω–∞",
                    callback_data=f"session_persona_{session.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí¨ –î–∏–∞–ª–æ–≥–∏",
                    callback_data=f"session_dialogs_{session.id}"
                ),
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=f"session_stats_{session.id}"
                )
            ]
        ]

        if session_status.get('pending_approvals', 0) > 0:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏—è ({session_status['pending_approvals']})",
                    callback_data=f"session_approvals_{session.id}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="sessions_list")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏")


@sessions_router.callback_query(F.data.startswith("session_toggle_scanning_"))
async def session_toggle_scanning(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if session.ai_enabled:
                success = await message_handler.pause_session_scanning(session.session_name)
                status = "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if success else "–æ—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
            else:
                success = await message_handler.resume_session_scanning(session.session_name)
                status = "–∑–∞–ø—É—â–µ–Ω–æ" if success else "–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞"

            if success:
                await callback.answer(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {status}")
                await session_manage(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")


@sessions_router.callback_query(F.data.startswith("session_persona_"))
async def session_persona_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        text = "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è —Å–µ—Å—Å–∏–∏:</b>\n\n"
        text += "üë® <b>–ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω—ã:</b>\n"
        text += "‚Ä¢ <code>basic_man</code> - –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å\n"
        text += "‚Ä¢ <code>basic_woman</code> - –ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞\n\n"
        text += "üíº <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ:</b>\n"
        text += "‚Ä¢ <code>hyip_man</code> - HYIP —ç–∫—Å–ø–µ—Ä—Ç\n"
        text += "‚Ä¢ <code>investor_man</code> - –ò–Ω–≤–µ—Å—Ç–æ—Ä\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë® –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å",
                        callback_data=f"session_set_persona_{session_id}_basic_man"
                    ),
                    InlineKeyboardButton(
                        text="üë© –ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞",
                        callback_data=f"session_set_persona_{session_id}_basic_woman"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üíº HYIP –º—É–∂—á–∏–Ω–∞",
                        callback_data=f"session_set_persona_{session_id}_hyip_man"
                    ),
                    InlineKeyboardButton(
                        text="üìà –ò–Ω–≤–µ—Å—Ç–æ—Ä",
                        callback_data=f"session_set_persona_{session_id}_investor_man"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"session_manage_{session_id}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@sessions_router.callback_query(F.data.startswith("session_set_persona_"))
async def session_set_persona(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    try:
        parts = callback.data.split("_")
        session_id = int(parts[3])
        persona_type = "_".join(parts[4:])  # basic_man, hyip_man –∏ —Ç.–¥.

        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω—ã
            valid_personas = [p.value for p in PersonaType]
            if persona_type not in valid_personas:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É
            session.persona_type = persona_type
            await db.commit()

            persona_names = {
                PersonaType.BASIC_MAN.value: "–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å",
                PersonaType.BASIC_WOMAN.value: "–ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞",
                PersonaType.HYIP_MAN.value: "HYIP –º—É–∂—á–∏–Ω–∞",
                PersonaType.INVESTOR_MAN.value: "–ò–Ω–≤–µ—Å—Ç–æ—Ä"
            }

            persona_name = persona_names.get(persona_type, persona_type)
            await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞: {persona_name}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ—Å—Å–∏–µ–π
            await session_manage(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω—ã")


@sessions_router.callback_query(F.data.startswith("session_dialogs_"))
async def session_dialogs(callback: CallbackQuery):
    """–î–∏–∞–ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    try:
        session_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session_result = await db.execute(
                select(Session).where(Session.id == session_id)
            )
            session = session_result.scalar_one_or_none()

            if not session:
                await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å–µ—Å—Å–∏–∏
            result = await db.execute(
                select(Conversation)
                .where(Conversation.session_name == session.session_name)
                .order_by(Conversation.updated_at.desc())
                .limit(10)
            )
            conversations = result.scalars().all()

        if not conversations:
            text = f"üí¨ <b>–î–∏–∞–ª–æ–≥–∏ —Å–µ—Å—Å–∏–∏ {session.session_name}</b>\n\n"
            text += "üìù –î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"session_manage_{session_id}"
                    )
                ]]
            )
        else:
            text = f"üí¨ <b>–î–∏–∞–ª–æ–≥–∏ —Å–µ—Å—Å–∏–∏ {session.session_name}</b>\n\n"

            keyboard_buttons = []

            for conv in conversations:
                status_emoji = {
                    ConversationStatus.ACTIVE.value: "üü¢",
                    ConversationStatus.PENDING_APPROVAL.value: "üîî",
                    ConversationStatus.APPROVED.value: "‚úÖ",
                    ConversationStatus.BLOCKED.value: "üî¥"
                }.get(conv.status, "‚ùì")

                ref_emoji = "üîó" if conv.ref_link_sent else "üìù"
                approval_emoji = "‚è≥" if conv.requires_approval and not conv.admin_approved else ""

                text += f"{status_emoji} {ref_emoji} {approval_emoji} @{conv.lead_username}\n"
                text += f"   ‚Ä¢ –≠—Ç–∞–ø: {conv.current_stage}\n"
                text += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {conv.total_messages_received}\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üë§ {conv.lead_username}",
                        callback_data=f"dialog_view_{conv.id}"
                    )
                ])

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=f"session_manage_{session_id}"
                )
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")