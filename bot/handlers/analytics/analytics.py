# bot/handlers/analytics/analytics.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta

from storage.database import get_db
from storage.models.base import (
    Conversation, Session, Message, Lead,
    ConversationStatus, MessageRole, FunnelStage
)
from loguru import logger

analytics_router = Router()


@analytics_router.callback_query(F.data == "analytics_main")
async def analytics_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        stats = await get_analytics_stats()

        text = f"""üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_conversations']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_conversations']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {stats['total_conversions']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']:.1f}%

üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>
‚Ä¢ –ù–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats['new_conversations_24h']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_24h']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {stats['conversions_24h']}

üïê <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.1f}—Å
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions']}

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –ü–æ —Å–µ—Å—Å–∏—è–º", callback_data="analytics_sessions"),
                    InlineKeyboardButton(text="üé≠ –ü–æ –ø–µ—Ä—Å–æ–Ω–∞–º", callback_data="analytics_personas")
                ],
                [
                    InlineKeyboardButton(text="üìà –í–æ—Ä–æ–Ω–∫–∞", callback_data="analytics_funnel"),
                    InlineKeyboardButton(text="‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∏", callback_data="analytics_timing")
                ],
                [
                    InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="analytics_period"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_main")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@analytics_router.callback_query(F.data == "analytics_sessions")
async def analytics_sessions(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º"""

    try:
        async with get_db() as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º
            result = await db.execute(
                select(
                    Session.session_name,
                    Session.persona_type,
                    Session.total_conversations,
                    Session.total_conversions,
                    Session.total_messages_sent,
                    func.count(Conversation.id).label('active_conversations')
                )
                .outerjoin(Conversation, Conversation.session_id == Session.id)
                .where(Conversation.status == ConversationStatus.ACTIVE)
                .group_by(Session.id)
                .order_by(Session.total_conversions.desc())
                .limit(10)
            )
            sessions_stats = result.all()

        if not sessions_stats:
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º</b>\n\nüìù –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text = "üìä <b>–¢–æ–ø —Å–µ—Å—Å–∏–π –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º:</b>\n\n"

            for session in sessions_stats:
                conversion_rate = (session.total_conversions / max(session.total_conversations, 1)) * 100

                text += f"ü§ñ <code>{session.session_name}</code>\n"
                text += f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞: {session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}\n"
                text += f"   ‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {session.total_conversations} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {session.active_conversations})\n"
                text += f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {session.total_conversions} ({conversion_rate:.1f}%)\n"
                text += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {session.total_messages_sent}\n\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_sessions"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@analytics_router.callback_query(F.data == "analytics_personas")
async def analytics_personas(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º"""

    try:
        async with get_db() as db:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–µ—Ä—Å–æ–Ω
            result = await db.execute(
                select(
                    Session.persona_type,
                    func.count(Session.id).label('sessions_count'),
                    func.sum(Session.total_conversations).label('total_conversations'),
                    func.sum(Session.total_conversions).label('total_conversions'),
                    func.avg(Session.total_conversions / Session.total_conversations.nullif(0) * 100).label(
                        'avg_conversion_rate')
                )
                .where(Session.persona_type.isnot(None))
                .group_by(Session.persona_type)
                .order_by(func.sum(Session.total_conversions).desc())
            )
            personas_stats = result.all()

        if not personas_stats:
            text = "üé≠ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º</b>\n\nüìù –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text = "üé≠ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω:</b>\n\n"

            persona_names = {
                "basic_man": "üë® –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å",
                "basic_woman": "üë© –ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞",
                "hyip_man": "üíº HYIP –º—É–∂—á–∏–Ω–∞",
                "hyip_woman": "üíÑ HYIP –∂–µ–Ω—â–∏–Ω–∞",
                "investor_man": "üìà –ò–Ω–≤–µ—Å—Ç–æ—Ä"
            }

            for persona in personas_stats:
                name = persona_names.get(persona.persona_type, persona.persona_type)
                avg_rate = persona.avg_conversion_rate or 0

                text += f"{name}\n"
                text += f"   ‚Ä¢ –°–µ—Å—Å–∏–π: {persona.sessions_count}\n"
                text += f"   ‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {persona.total_conversations or 0}\n"
                text += f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {persona.total_conversions or 0}\n"
                text += f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {avg_rate:.1f}%\n\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_personas"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@analytics_router.callback_query(F.data == "analytics_funnel")
async def analytics_funnel(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""

    try:
        async with get_db() as db:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏
            result = await db.execute(
                select(
                    Conversation.current_stage,
                    func.count(Conversation.id).label('count')
                )
                .where(Conversation.status == ConversationStatus.ACTIVE)
                .group_by(Conversation.current_stage)
                .order_by(func.count(Conversation.id).desc())
            )
            funnel_stats = result.all()

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
            conversions_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.ref_link_sent == True)
            )
            total_conversions = conversions_result.scalar() or 0

            # –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤
            total_result = await db.execute(
                select(func.count(Conversation.id))
            )
            total_conversations = total_result.scalar() or 0

        stage_names = {
            "initial_contact": "ü§ù –ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
            "trust_building": "ü§ó –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è",
            "project_inquiry": "‚ùì –í—ã—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            "interest_qualification": "üéØ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞",
            "presentation": "üì¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
            "objection_handling": "üõ°Ô∏è –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            "conversion": "üí∞ –ö–æ–Ω–≤–µ—Ä—Å–∏—è",
            "post_conversion": "‚úÖ –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"
        }

        text = f"üìà <b>–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂</b>\n\n"
        text += f"üìä <b>–û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è:</b> {total_conversions}/{total_conversations} "
        text += f"({(total_conversions / max(total_conversations, 1) * 100):.1f}%)\n\n"

        if funnel_stats:
            text += "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º:</b>\n"
            for stage in funnel_stats:
                stage_name = stage_names.get(stage.current_stage, stage.current_stage)
                percentage = (stage.count / max(total_conversations, 1)) * 100
                text += f"{stage_name}: {stage.count} ({percentage:.1f}%)\n"
        else:
            text += "üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_funnel"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@analytics_router.callback_query(F.data == "analytics_timing")
async def analytics_timing(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤"""

    try:
        async with get_db() as db:
            # –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Å–µ—Å—Å–∏—è–º
            result = await db.execute(
                select(
                    Session.session_name,
                    func.avg(Conversation.avg_response_time).label('avg_response'),
                    func.min(Conversation.avg_response_time).label('min_response'),
                    func.max(Conversation.avg_response_time).label('max_response')
                )
                .join(Conversation)
                .where(Conversation.avg_response_time > 0)
                .group_by(Session.id)
                .order_by(func.avg(Conversation.avg_response_time))
                .limit(10)
            )
            timing_stats = result.all()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            overall_result = await db.execute(
                select(
                    func.avg(Conversation.avg_response_time).label('overall_avg'),
                    func.min(Conversation.avg_response_time).label('overall_min'),
                    func.max(Conversation.avg_response_time).label('overall_max')
                )
                .where(Conversation.avg_response_time > 0)
            )
            overall_stats = overall_result.first()

        text = "‚è±Ô∏è <b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"

        if overall_stats and overall_stats.overall_avg:
            text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {overall_stats.overall_avg:.1f}—Å\n"
            text += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {overall_stats.overall_min:.1f}—Å\n"
            text += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {overall_stats.overall_max:.1f}—Å\n\n"

            if timing_stats:
                text += "<b>–ü–æ —Å–µ—Å—Å–∏—è–º (—Ç–æ–ø –±—ã—Å—Ç—Ä—ã—Ö):</b>\n"
                for session in timing_stats:
                    text += f"ü§ñ <code>{session.session_name}</code>\n"
                    text += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {session.avg_response:.1f}—Å\n"
                    text += f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {session.min_response:.1f}—Å - {session.max_response:.1f}—Å\n\n"
        else:
            text += "üìù –î–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_timing"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@analytics_router.callback_query(F.data == "analytics_period")
async def analytics_period(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        periods_data = await get_period_analytics()

        text = f"""üìÖ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã</b>

üìà <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>
‚Ä¢ –ù–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {periods_data['24h']['new_conversations']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {periods_data['24h']['messages']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {periods_data['24h']['conversions']}

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>
‚Ä¢ –ù–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {periods_data['7d']['new_conversations']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {periods_data['7d']['messages']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {periods_data['7d']['conversions']}

üìã <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –ù–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {periods_data['30d']['new_conversations']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {periods_data['30d']['messages']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {periods_data['30d']['conversions']}

üìà <b>–¢—Ä–µ–Ω–¥—ã:</b>
‚Ä¢ –†–æ—Å—Ç –¥–∏–∞–ª–æ–≥–æ–≤: {periods_data['trends']['conversations_growth']:.1f}%
‚Ä¢ –†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {periods_data['trends']['conversions_growth']:.1f}%"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_period"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


async def get_analytics_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    try:
        async with get_db() as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
            total_conversations_result = await db.execute(
                select(func.count(Conversation.id))
            )
            total_conversations = total_conversations_result.scalar() or 0

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            active_conversations_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.status == ConversationStatus.ACTIVE)
            )
            active_conversations = active_conversations_result.scalar() or 0

            # –û–±—â–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            total_conversions_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.ref_link_sent == True)
            )
            total_conversions = total_conversions_result.scalar() or 0

            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            conversion_rate = (total_conversions / max(total_conversations, 1)) * 100

            # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(hours=24)

            new_conversations_24h_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.created_at >= yesterday)
            )
            new_conversations_24h = new_conversations_24h_result.scalar() or 0

            messages_24h_result = await db.execute(
                select(func.count(Message.id))
                .where(Message.created_at >= yesterday)
            )
            messages_24h = messages_24h_result.scalar() or 0

            conversions_24h_result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.ref_link_sent == True,
                    Conversation.ref_link_sent_at >= yesterday
                )
            )
            conversions_24h = conversions_24h_result.scalar() or 0

            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            avg_response_result = await db.execute(
                select(func.avg(Conversation.avg_response_time))
                .where(Conversation.avg_response_time > 0)
            )
            avg_response_time = avg_response_result.scalar() or 0

            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            active_sessions_result = await db.execute(
                select(func.count(Session.id))
                .where(Session.status == 'active', Session.ai_enabled == True)
            )
            active_sessions = active_sessions_result.scalar() or 0

            return {
                'total_conversations': total_conversations,
                'active_conversations': active_conversations,
                'total_conversions': total_conversions,
                'conversion_rate': conversion_rate,
                'new_conversations_24h': new_conversations_24h,
                'messages_24h': messages_24h,
                'conversions_24h': conversions_24h,
                'avg_response_time': avg_response_time,
                'active_sessions': active_sessions
            }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return {
            'total_conversations': 0,
            'active_conversations': 0,
            'total_conversions': 0,
            'conversion_rate': 0,
            'new_conversations_24h': 0,
            'messages_24h': 0,
            'conversions_24h': 0,
            'avg_response_time': 0,
            'active_sessions': 0
        }


async def get_period_analytics() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã"""

    try:
        async with get_db() as db:
            now = datetime.now()

            periods = {
                '24h': now - timedelta(hours=24),
                '7d': now - timedelta(days=7),
                '30d': now - timedelta(days=30)
            }

            result_data = {
                'trends': {
                    'conversations_growth': 0,
                    'conversions_growth': 0
                }
            }

            for period_name, start_date in periods.items():
                # –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
                conversations_result = await db.execute(
                    select(func.count(Conversation.id))
                    .where(Conversation.created_at >= start_date)
                )
                new_conversations = conversations_result.scalar() or 0

                # –°–æ–æ–±—â–µ–Ω–∏—è
                messages_result = await db.execute(
                    select(func.count(Message.id))
                    .where(Message.created_at >= start_date)
                )
                messages = messages_result.scalar() or 0

                # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
                conversions_result = await db.execute(
                    select(func.count(Conversation.id))
                    .where(
                        Conversation.ref_link_sent == True,
                        Conversation.ref_link_sent_at >= start_date
                    )
                )
                conversions = conversions_result.scalar() or 0

                result_data[period_name] = {
                    'new_conversations': new_conversations,
                    'messages': messages,
                    'conversions': conversions
                }

            # –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ 7–¥ –∏ 30–¥)
            if result_data['30d']['new_conversations'] > 0:
                week_avg = result_data['7d']['new_conversations'] / 7
                month_avg = result_data['30d']['new_conversations'] / 30
                result_data['trends']['conversations_growth'] = ((week_avg - month_avg) / month_avg) * 100

            if result_data['30d']['conversions'] > 0:
                week_conv_avg = result_data['7d']['conversions'] / 7
                month_conv_avg = result_data['30d']['conversions'] / 30
                result_data['trends']['conversions_growth'] = ((week_conv_avg - month_conv_avg) / month_conv_avg) * 100

            return result_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return {
            '24h': {'new_conversations': 0, 'messages': 0, 'conversions': 0},
            '7d': {'new_conversations': 0, 'messages': 0, 'conversions': 0},
            '30d': {'new_conversations': 0, 'messages': 0, 'conversions': 0},
            'trends': {'conversations_growth': 0, 'conversions_growth': 0}
        }