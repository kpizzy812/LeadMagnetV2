# bot/handlers/dialogs.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy import select, func, update
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import Conversation, Lead, Session, Message as DBMessage
from loguru import logger

dialogs_router = Router()

class DialogStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    waiting_message = State()

@dialogs_router.callback_query(F.data == "dialogs_list")
async def dialogs_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .order_by(Conversation.updated_at.desc())
                .limit(15)
            )
            conversations = result.scalars().all()

        if not conversations:
            await callback.message.edit_text(
                "üí¨ –î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                    ]]
                )
            )
            return

        text = "üí¨ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:</b>\n\n"
        keyboard_buttons = []

        for conv in conversations:
            status_emoji = {
                "active": "üü¢",
                "paused": "‚è∏Ô∏è",
                "completed": "‚úÖ",
                "blocked": "üî¥"
            }.get(conv.status, "‚ùì")

            ref_emoji = "üîó" if conv.ref_link_sent else "üìù"

            text += f"{status_emoji} {ref_emoji} @{conv.lead.username} ‚Üî {conv.session.session_name}\n"
            text += f"   ‚Ä¢ –≠—Ç–∞–ø: {conv.current_stage}\n"
            text += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {conv.messages_count}\n\n"

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üë§ {conv.lead.username}",
                    callback_data=f"dialog_view_{conv.id}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dialogs_list")
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard_buttons.append([
            InlineKeyboardButton(text="üõ°Ô∏è –§–∏–ª—å—Ç—Ä—ã", callback_data="dialogs_filters")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")


@dialogs_router.callback_query(F.data.startswith("dialog_view_"))
async def dialog_view(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .options(selectinload(Conversation.messages))
                .where(Conversation.id == conv_id)
            )
            conversation = result.scalar_one_or_none()

        if not conversation:
            await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        ai_status = "ü§ñ –í–∫–ª—é—á–µ–Ω" if conversation.session.ai_enabled else "üì¥ –û—Ç–∫–ª—é—á–µ–Ω"

        text = f"""üí¨ <b>–î–∏–∞–ª–æ–≥ —Å @{conversation.lead.username}</b>

üë§ <b>–õ–∏–¥:</b> @{conversation.lead.username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {conversation.session.session_name}
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {conversation.session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {conversation.status}
üéØ <b>–≠—Ç–∞–ø:</b> {conversation.current_stage}
üîó <b>–†–µ—Ñ —Å—Å—ã–ª–∫–∞:</b> {'‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' if conversation.ref_link_sent else '‚ùå –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'}
{ai_status}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {conversation.messages_count}
‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {conversation.user_messages_count}
‚Ä¢ –û—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {conversation.assistant_messages_count}

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {conversation.created_at.strftime('%d.%m.%Y %H:%M')}
üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {conversation.updated_at.strftime('%d.%m.%Y %H:%M')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí¨ –ò—Å—Ç–æ—Ä–∏—è",
                        callback_data=f"dialog_history_{conv_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
                        callback_data=f"dialog_send_{conv_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü§ñ –ò–ò –≤–∫–ª/–≤—ã–∫–ª",
                        callback_data=f"dialog_toggle_ai_{conv_id}"
                    ),
                    InlineKeyboardButton(
                        text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                        callback_data=f"dialog_analytics_{conv_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"dialog_delete_{conv_id}"
                    ),
                    InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="dialogs_list")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞")


@dialogs_router.callback_query(F.data.startswith("dialog_history_"))
async def dialog_history(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""

    try:
        conv_id = int(callback.data.split("_")[-1])
        page = 0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–∑–∂–µ

        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .options(selectinload(Conversation.messages))
                .where(Conversation.id == conv_id)
            )
            conversation = result.scalar_one_or_none()

        if not conversation:
            await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = f"üí¨ <b>–ò—Å—Ç–æ—Ä–∏—è: @{conversation.lead.username} ‚Üî {conversation.session.session_name}</b>\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = conversation.messages[-15:] if conversation.messages else []

        if not messages:
            text += "üìù –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            for msg in messages:
                role_emoji = "üë§" if msg.role == "user" else "ü§ñ"
                time_str = msg.created_at.strftime('%d.%m %H:%M')

                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                content = msg.content
                if len(content) > 100:
                    content = content[:100] + "..."

                text += f"{role_emoji} <b>[{time_str}]</b>\n{content}\n\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        callback_data=f"dialog_send_{conv_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=f"dialog_history_{conv_id}"
                    ),
                    InlineKeyboardButton(
                        text="üîô –ö –¥–∏–∞–ª–æ–≥—É",
                        callback_data=f"dialog_view_{conv_id}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")


@dialogs_router.callback_query(F.data.startswith("dialog_send_"))
async def dialog_send_message(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(conversation_id=conv_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(Conversation.id == conv_id)
            )
            conversation = result.scalar_one_or_none()

            if not conversation:
                await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

        text = f"""‚úèÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

üë§ <b>–õ–∏–¥:</b> @{conversation.lead.username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {conversation.session.session_name}
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {conversation.session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"dialog_view_{conv_id}")
            ]]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(DialogStates.waiting_message)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@dialogs_router.message(DialogStates.waiting_message)
async def dialog_message_received(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–∏–∞–ª–æ–≥"""

    try:
        data = await state.get_data()
        conv_id = data.get("conversation_id")
        message_text = message.text

        if not message_text or len(message_text.strip()) < 1:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(Conversation.id == conv_id)
            )
            conversation = result.scalar_one_or_none()

            if not conversation:
                await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        from core.integrations.telegram_client import telegram_session_manager

        success = await telegram_session_manager.send_message(
            session_name=conversation.session.session_name,
            username=conversation.lead.username,
            message=message_text
        )

        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            from storage.models.base import Message as DBMessage, MessageRole

            async with get_db() as db:
                db_message = DBMessage(
                    conversation_id=conversation.id,
                    lead_id=conversation.lead_id,
                    session_id=conversation.session_id,
                    role=MessageRole.ASSISTANT,
                    content=message_text,
                    funnel_stage=conversation.current_stage,
                    processed=True
                )
                db.add(db_message)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                conversation.messages_count += 1
                conversation.assistant_messages_count += 1
                conversation.last_assistant_message_at = datetime.utcnow()

                await db.commit()

            await message.answer(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{conversation.lead.username}\n"
                f"ü§ñ –û—Ç –∏–º–µ–Ω–∏: {conversation.session.session_name}"
            )

            logger.success(
                f"üì§ –†—É—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {conversation.session.session_name} ‚Üí {conversation.lead.username}")

        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()

@dialogs_router.message(lambda message: message.text == "/cancel")
async def cancel_dialog_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""

    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dialogs_router.callback_query(F.data.startswith("dialog_toggle_ai_"))
async def dialog_toggle_ai(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–ò –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.session))
                .where(Conversation.id == conv_id)
            )
            conversation = result.scalar_one_or_none()

            if not conversation:
                await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ò–ò –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
            session = conversation.session
            session.ai_enabled = not session.ai_enabled
            await db.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            from core.handlers.message_handler import message_handler
            if session.ai_enabled:
                await message_handler.add_session(session.session_name)
            else:
                await message_handler.remove_session(session.session_name)

            status = "–≤–∫–ª—é—á–µ–Ω" if session.ai_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"‚úÖ –ò–ò –¥–ª—è —Å–µ—Å—Å–∏–∏ {session.session_name} {status}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
            await dialog_view(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ò–ò –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ò–ò")


@dialogs_router.callback_query(F.data.startswith("approve_conversation_"))
async def approve_conversation(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            await db.execute(
                update(Conversation)
                .where(Conversation.id == conv_id)
                .values(
                    is_whitelisted=True,
                    requires_approval=False
                )
            )
            await db.commit()

        await callback.answer("‚úÖ –î–∏–∞–ª–æ–≥ –æ–¥–æ–±—Ä–µ–Ω")
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b>"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@dialogs_router.callback_query(F.data.startswith("reject_conversation_"))
async def reject_conversation(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            await db.execute(
                update(Conversation)
                .where(Conversation.id == conv_id)
                .values(
                    is_blacklisted=True,
                    requires_approval=False
                )
            )
            await db.commit()

        await callback.answer("üö´ –î–∏–∞–ª–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        await callback.message.edit_text(
            callback.message.text + "\n\nüö´ <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


# 5. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤ –±–æ—Ç:

@dialogs_router.callback_query(F.data == "dialogs_filters")
async def dialogs_filters_main(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""

    try:
        async with get_db() as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
            pending_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.requires_approval == True)
            )
            pending = pending_result.scalar() or 0

            whitelisted_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.is_whitelisted == True)
            )
            whitelisted = whitelisted_result.scalar() or 0

            blacklisted_result = await db.execute(
                select(func.count(Conversation.id))
                .where(Conversation.is_blacklisted == True)
            )
            blacklisted = blacklisted_result.scalar() or 0

        text = f"""üõ°Ô∏è <b>–§–∏–ª—å—Ç—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pending}
‚Ä¢ –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: {whitelisted}
‚Ä¢ –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {blacklisted}

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="dialogs_pending"),
                    InlineKeyboardButton(text="‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", callback_data="dialogs_whitelist")
                ],
                [
                    InlineKeyboardButton(text="üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="dialogs_blacklist"),
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="dialogs_filter_settings")
                ],
                [
                    InlineKeyboardButton(text="üîô –ö –¥–∏–∞–ª–æ–≥–∞–º", callback_data="dialogs_list")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@dialogs_router.callback_query(F.data.startswith("dialog_delete_"))
async def dialog_delete(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            from sqlalchemy import delete
            await db.execute(delete(DBMessage).where(DBMessage.conversation_id == conv_id))

            # –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–∏–∞–ª–æ–≥
            await db.execute(delete(Conversation).where(Conversation.id == conv_id))

            await db.commit()

        await callback.answer("‚úÖ –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω")
        await dialogs_list(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")


@dialogs_router.callback_query(F.data == "dialogs_pending")
async def dialogs_pending(callback: CallbackQuery):
    """–î–∏–∞–ª–æ–≥–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(Conversation.requires_approval == True)
                .order_by(Conversation.created_at.desc())
                .limit(10)
            )
            conversations = result.scalars().all()

        if not conversations:
            text = "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>\n\nüìù –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è"
        else:
            text = f"‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ({len(conversations)})</b>\n\n"

            for conv in conversations:
                time_ago = datetime.now() - conv.created_at
                hours_ago = int(time_ago.total_seconds() / 3600)

                text += f"üë§ @{conv.lead.username}\n"
                text += f"ü§ñ {conv.session.session_name}\n"
                text += f"‚è∞ {hours_ago}—á –Ω–∞–∑–∞–¥\n\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dialogs_pending"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dialogs_filters")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@dialogs_router.callback_query(F.data == "dialogs_whitelist")
async def dialogs_whitelist(callback: CallbackQuery):
    """–î–∏–∞–ª–æ–≥–∏ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(Conversation.is_whitelisted == True)
                .order_by(Conversation.updated_at.desc())
                .limit(10)
            )
            conversations = result.scalars().all()

        if not conversations:
            text = "‚úÖ <b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n\nüìù –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"
        else:
            text = f"‚úÖ <b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ({len(conversations)})</b>\n\n"

            for conv in conversations:
                status_emoji = "üü¢" if conv.status == "active" else "üî¥"
                text += f"{status_emoji} @{conv.lead.username} ‚Üî {conv.session.session_name}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dialogs_whitelist"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dialogs_filters")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@dialogs_router.callback_query(F.data == "dialogs_blacklist")
async def dialogs_blacklist(callback: CallbackQuery):
    """–î–∏–∞–ª–æ–≥–∏ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .where(Conversation.is_blacklisted == True)
                .order_by(Conversation.updated_at.desc())
                .limit(10)
            )
            conversations = result.scalars().all()

        if not conversations:
            text = "üö´ <b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>\n\nüìù –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"
        else:
            text = f"üö´ <b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ({len(conversations)})</b>\n\n"

            for conv in conversations:
                text += f"üö´ @{conv.lead.username} ‚Üî {conv.session.session_name}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dialogs_blacklist"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dialogs_filters")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@dialogs_router.callback_query(F.data == "dialogs_filter_settings")
async def dialogs_filter_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""

    text = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>

üîç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –ø—Ä–æ–µ–∫—Ç, –∏–Ω–≤–µ—Å—Ç, –∑–∞—Ä–∞–±–æ—Ç–æ–∫
‚Ä¢ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: —Å–ø–∞–º, —Ä–µ–∫–ª–∞–º–∞, —Å–∫–∏–¥–∫–∞
‚Ä¢ –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è

üìù <b>–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –û–¥–æ–±—Ä–∏—Ç—å –¥–∏–∞–ª–æ–≥ - –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
‚Ä¢ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –¥–∏–∞–ª–æ–≥–æ–≤

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dialogs_filters")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)