# bot/handlers/dialogs.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import Conversation, Lead, Session, Message as DBMessage
from loguru import logger

dialogs_router = Router()


@dialogs_router.callback_query(F.data == "dialogs_list")
async def dialogs_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""

    try:
        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .order_by(Conversation.updated_at.desc())
                .limit(15)
            )
            conversations = result.scalars().all()

        if not conversations:
            await callback.message.edit_text(
                "üí¨ –î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                    ]]
                )
            )
            return

        text = "üí¨ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:</b>\n\n"
        keyboard_buttons = []

        for conv in conversations:
            status_emoji = {
                "active": "üü¢",
                "paused": "‚è∏Ô∏è",
                "completed": "‚úÖ",
                "blocked": "üî¥"
            }.get(conv.status, "‚ùì")

            ref_emoji = "üîó" if conv.ref_link_sent else "üìù"

            text += f"{status_emoji} {ref_emoji} @{conv.lead.username} ‚Üî {conv.session.session_name}\n"
            text += f"   ‚Ä¢ –≠—Ç–∞–ø: {conv.current_stage}\n"
            text += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {conv.messages_count}\n\n"

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üë§ {conv.lead.username}",
                    callback_data=f"dialog_view_{conv.id}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dialogs_list")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")


@dialogs_router.callback_query(F.data.startswith("dialog_view_"))
async def dialog_view(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""

    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            result = await db.execute(
                select(Conversation)
                .options(selectinload(Conversation.lead))
                .options(selectinload(Conversation.session))
                .options(selectinload(Conversation.messages))
                .where(Conversation.id == conv_id)
            )
            conversation = result.scalar_one_or_none()

        if not conversation:
            await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        text = f"""üí¨ <b>–î–∏–∞–ª–æ–≥ —Å @{conversation.lead.username}</b>

üë§ <b>–õ–∏–¥:</b> @{conversation.lead.username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {conversation.session.session_name}
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {conversation.session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {conversation.status}
üéØ <b>–≠—Ç–∞–ø:</b> {conversation.current_stage}
üîó <b>–†–µ—Ñ —Å—Å—ã–ª–∫–∞:</b> {'‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' if conversation.ref_link_sent else '‚ùå –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {conversation.messages_count}
‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {conversation.user_messages_count}
‚Ä¢ –û—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {conversation.assistant_messages_count}

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {conversation.created_at.strftime('%d.%m.%Y %H:%M')}
üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {conversation.updated_at.strftime('%d.%m.%Y %H:%M')}"""

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if conversation.messages:
            text += "\n\nüìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            for msg in conversation.messages[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                role_emoji = "üë§" if msg.role == "user" else "ü§ñ"
                time_str = msg.created_at.strftime('%H:%M')
                content_preview = msg.content[:50] + "..." if len(msg.content) > 50 else msg.content
                text += f"{role_emoji} [{time_str}] {content_preview}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
                        callback_data=f"dialog_send_{conv_id}"
                    ),
                    InlineKeyboardButton(
                        text="ü§ñ –ò–ò –≤–∫–ª/–≤—ã–∫–ª",
                        callback_data=f"dialog_toggle_ai_{conv_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                        callback_data=f"dialog_analytics_{conv_id}"
                    ),
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"dialog_delete_{conv_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="dialogs_list")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞")


@dialogs_router.callback_query(F.data.startswith("dialog_send_"))
async def dialog_send_message(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dialogs_router.callback_query(F.data.startswith("dialog_toggle_ai_"))
async def dialog_toggle_ai(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ò–ò –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ ai_disabled –≤ –º–æ–¥–µ–ª—å Conversation
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dialogs_router.callback_query(F.data.startswith("dialog_delete_"))
async def dialog_delete(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        conv_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            from sqlalchemy import delete
            await db.execute(delete(DBMessage).where(DBMessage.conversation_id == conv_id))

            # –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–∏–∞–ª–æ–≥
            await db.execute(delete(Conversation).where(Conversation.id == conv_id))

            await db.commit()

        await callback.answer("‚úÖ –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω")
        await dialogs_list(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")