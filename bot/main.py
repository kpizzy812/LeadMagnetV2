# bot/main.py

import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

from config.settings.base import settings
from bot.middlewares.auth import AuthMiddleware
from bot.handlers.dashboard import dashboard_router
from bot.handlers.sessions import sessions_router
from bot.handlers.dialogs import dialogs_router
from bot.handlers.analytics import analytics_router
from bot.handlers.broadcasts import broadcasts_router
from loguru import logger


class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ Telegram –±–æ—Ç–∞"""

    def __init__(self):
        self.bot: Bot = None
        self.dp: Dispatcher = None
        self.running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            self.bot = Bot(
                token=settings.telegram.bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML),
                session=AiohttpSession()
            )

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.dp = Dispatcher()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
            self.dp.message.middleware(AuthMiddleware())
            self.dp.callback_query.middleware(AuthMiddleware())

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            self.dp.include_router(dashboard_router)
            self.dp.include_router(sessions_router)
            self.dp.include_router(dialogs_router)
            self.dp.include_router(analytics_router)
            self.dp.include_router(broadcasts_router)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot or not self.dp:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        self.running = True

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            self.running = False

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if self.running and self.bot:
            try:
                await self.bot.session.close()
                logger.info("ü§ñ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")

    async def send_notification(self, admin_id: int, message: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
        try:
            await self.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {admin_id}: {e}")

    async def broadcast_to_admins(self, message: str, reply_markup=None):
        """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
        for admin_id in settings.telegram.admin_ids:
            await self.send_notification(admin_id, message, reply_markup)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
bot_manager = BotManager()