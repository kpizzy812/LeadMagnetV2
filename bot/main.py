# bot/main.py

import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config.settings.base import settings
from bot.middlewares.auth import AuthMiddleware
from bot.handlers.dashboard.dashboard import dashboard_router
from bot.handlers.sessions.sessions import sessions_router
from bot.handlers.dialogs.dialogs import dialogs_router
from bot.handlers.analytics.analytics import analytics_router
from bot.handlers.broadcasts.broadcast import broadcasts_router
from bot.handlers.followups.followups import followups_router
from bot.handlers.ai_control.ai_control import ai_control_router
from loguru import logger

from cold_outreach.bot_handlers.main_menu import outreach_router
from cold_outreach.core.outreach_manager import outreach_manager
from cold_outreach.campaigns.campaign_manager import campaign_manager
from cold_outreach.templates.template_manager import template_manager
from cold_outreach.leads.lead_manager import lead_manager
from cold_outreach.bot_handlers.campaign_handlers import campaign_handlers_router

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ Telegram –±–æ—Ç–∞"""

    def __init__(self):
        self.bot: Bot = None
        self.dp: Dispatcher = None
        self.running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            self.bot = Bot(
                token=settings.telegram.bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML),
                session=AiohttpSession()
            )

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.dp = Dispatcher()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
            self.dp.message.middleware(AuthMiddleware())
            self.dp.callback_query.middleware(AuthMiddleware())

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            self.dp.include_router(dashboard_router)
            self.dp.include_router(sessions_router)
            self.dp.include_router(dialogs_router)
            self.dp.include_router(analytics_router)
            self.dp.include_router(broadcasts_router)
            self.dp.include_router(followups_router)
            self.dp.include_router(ai_control_router)

            # –ù–û–í–û–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Cold Outreach
            self.dp.include_router(outreach_router)
            outreach_router.include_router(campaign_handlers_router)


            await outreach_manager.initialize()
            await campaign_manager.initialize()
            await template_manager.initialize()
            await lead_manager.initialize()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot or not self.dp:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        self.running = True

        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            await self.notify_admins_startup()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            self.running = False

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if self.running and self.bot:
            try:
                # –ù–û–í–û–ï: –ó–∞–≤–µ—Ä—à–∞–µ–º OutreachManager
                await outreach_manager.shutdown()
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await self.notify_admins_shutdown()

                await self.bot.session.close()
                logger.info("ü§ñ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")

    async def notify_admins_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""

        startup_message = """üöÄ <b>Lead Management System –∑–∞–ø—É—â–µ–Ω–∞!</b>

‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
ü§ñ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
üé≠ –ü–µ—Ä—Å–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start"""

        for admin_id in settings.telegram.admin_ids:
            try:
                await self.bot.send_message(admin_id, startup_message)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    async def notify_admins_shutdown(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""

        shutdown_message = """üõë <b>Lead Management System –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É</b>

–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è...
–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã"""

        for admin_id in settings.telegram.admin_ids:
            try:
                await self.bot.send_message(admin_id, shutdown_message)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    async def send_notification(self, admin_id: int, message: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
        try:
            await self.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {admin_id}: {e}")

    async def broadcast_to_admins(self, message: str, reply_markup=None):
        """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
        for admin_id in settings.telegram.admin_ids:
            await self.send_notification(admin_id, message, reply_markup)

    async def notify_new_lead(self, session_name: str, lead_username: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ"""

        message = f"""üÜï <b>–ù–æ–≤—ã–π –ª–∏–¥!</b>

üë§ <b>–õ–∏–¥:</b> @{lead_username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {session_name}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

–°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞."""

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π callback –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üí¨ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥–∏",
                    callback_data="dialogs_list"
                )
            ]]
        )

        await self.broadcast_to_admins(message, keyboard)

    async def notify_conversion(self, session_name: str, lead_username: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""

        message = f"""üéØ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è!</b>

‚úÖ <b>–õ–∏–¥:</b> @{lead_username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {session_name}
üîó <b>–†–µ—Ñ —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ"""

        await self.broadcast_to_admins(message)

    async def notify_error(self, error_type: str, details: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""

        message = f"""‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üîç <b>–¢–∏–ø:</b> {error_type}
üìù <b>–î–µ—Ç–∞–ª–∏:</b> {details}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."""

        await self.broadcast_to_admins(message)

    async def get_system_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""

        try:
            from storage.database import db_manager
            from core.handlers.message_handler import message_handler
            from core.integrations.openai_client import openai_client

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            db_status = "‚úÖ" if await db_manager.health_check() else "‚ùå"
            openai_status = "‚úÖ" if await openai_client.health_check() else "‚ùå"

            active_sessions = await message_handler.get_active_sessions()
            sessions_count = len(active_sessions)

            status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status}
ü§ñ <b>OpenAI API:</b> {openai_status}
üì± <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:</b> {sessions_count}

üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%H:%M:%S')}"""

            return status_text

        except Exception as e:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:</b> {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
bot_manager = BotManager()