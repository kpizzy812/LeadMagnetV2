# cold_outreach/leads/duplicate_filter.py

from typing import Set, Dict, Optional
from sqlalchemy import select, func
from storage.database import get_db
from storage.models.cold_outreach import OutreachLead
from loguru import logger


class DuplicateFilter:
    """–§–∏–ª—å—Ç—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ª–∏–¥–æ–≤"""

    def __init__(self):
        # –ö—ç—à username'–æ–≤ –ø–æ —Å–ø–∏—Å–∫–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.username_cache: Dict[int, Set[str]] = {}
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –≤—Å–µ—Ö username'–æ–≤
        self.global_username_cache: Set[str] = set()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            await self._build_cache()
            logger.info("‚úÖ DuplicateFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DuplicateFilter: {e}")
            raise

    async def _build_cache(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö username'–æ–≤"""

        try:
            async with get_db() as db:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ username'—ã
                result = await db.execute(
                    select(OutreachLead.username, OutreachLead.lead_list_id)
                )

                usernames_data = result.fetchall()

                for username, list_id in usernames_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à —Å–ø–∏—Å–∫–∞
                    if list_id not in self.username_cache:
                        self.username_cache[list_id] = set()

                    normalized_username = self._normalize_username(username)
                    self.username_cache[list_id].add(normalized_username)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
                    self.global_username_cache.add(normalized_username)

                total_usernames = len(self.global_username_cache)
                total_lists = len(self.username_cache)

                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_usernames} username'–æ–≤ –∏–∑ {total_lists} —Å–ø–∏—Å–∫–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—ç—à–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")

    def _normalize_username(self, username: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            return str(username).strip().lower().lstrip("@")
        except Exception:
            return username

    async def is_duplicate(self, username: str, list_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ username –¥—É–±–ª–∏–∫–∞—Ç–æ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–ø–∏—Å–∫–µ"""

        try:
            normalized_username = self._normalize_username(username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–ø–∏—Å–∫–∞
            if list_id in self.username_cache:
                return normalized_username in self.username_cache[list_id]

            # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é
            return await self._check_duplicate_in_db(normalized_username, list_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ {username}: {e}")
            return False

    async def is_global_duplicate(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ username –¥—É–±–ª–∏–∫–∞—Ç–æ–º –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ"""

        try:
            normalized_username = self._normalize_username(username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
            if normalized_username in self.global_username_cache:
                return True

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
            async with get_db() as db:
                result = await db.execute(
                    select(func.count(OutreachLead.id))
                    .where(OutreachLead.username == normalized_username)
                )
                count = result.scalar() or 0
                return count > 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞ {username}: {e}")
            return False

    async def _check_duplicate_in_db(self, username: str, list_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –ë–î –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(func.count(OutreachLead.id))
                    .where(
                        OutreachLead.username == username,
                        OutreachLead.lead_list_id == list_id
                    )
                )
                count = result.scalar() or 0
                return count > 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –ë–î: {e}")
            return False

    async def add_username(self, username: str, list_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ username –≤ –∫—ç—à"""

        try:
            normalized_username = self._normalize_username(username)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à —Å–ø–∏—Å–∫–∞
            if list_id not in self.username_cache:
                self.username_cache[list_id] = set()

            self.username_cache[list_id].add(normalized_username)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
            self.global_username_cache.add(normalized_username)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è username {username} –≤ –∫—ç—à: {e}")

    async def remove_username(self, username: str, list_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ username –∏–∑ –∫—ç—à–∞"""

        try:
            normalized_username = self._normalize_username(username)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ —Å–ø–∏—Å–∫–∞
            if list_id in self.username_cache:
                self.username_cache[list_id].discard(normalized_username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
            # (–µ—Å–ª–∏ username –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ)
            should_remove_global = True
            for cache_set in self.username_cache.values():
                if normalized_username in cache_set:
                    should_remove_global = False
                    break

            if should_remove_global:
                self.global_username_cache.discard(normalized_username)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è username {username} –∏–∑ –∫—ç—à–∞: {e}")

    async def find_duplicates_in_list(self, list_id: int) -> Dict[str, list]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞"""

        try:
            async with get_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ username'—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                result = await db.execute(
                    select(
                        OutreachLead.username,
                        func.count(OutreachLead.id).label('count'),
                        func.array_agg(OutreachLead.id).label('lead_ids')
                    )
                    .where(OutreachLead.lead_list_id == list_id)
                    .group_by(OutreachLead.username)
                    .having(func.count(OutreachLead.id) > 1)
                )

                duplicates = {}
                for row in result.fetchall():
                    username, count, lead_ids = row
                    duplicates[username] = {
                        'count': count,
                        'lead_ids': lead_ids
                    }

                return duplicates

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ {list_id}: {e}")
            return {}

    async def find_cross_list_duplicates(self) -> Dict[str, list]:
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏"""

        try:
            async with get_db() as db:
                # –ù–∞—Ö–æ–¥–∏–º username'—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
                result = await db.execute(
                    select(
                        OutreachLead.username,
                        func.count(func.distinct(OutreachLead.lead_list_id)).label('lists_count'),
                        func.array_agg(func.distinct(OutreachLead.lead_list_id)).label('list_ids')
                    )
                    .group_by(OutreachLead.username)
                    .having(func.count(func.distinct(OutreachLead.lead_list_id)) > 1)
                )

                cross_duplicates = {}
                for row in result.fetchall():
                    username, lists_count, list_ids = row
                    cross_duplicates[username] = {
                        'lists_count': lists_count,
                        'list_ids': list_ids
                    }

                return cross_duplicates

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ–∂—Å–ø–∏—Å–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return {}

    async def remove_duplicates_from_list(self, list_id: int, keep_first: bool = True) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""

        try:
            duplicates = await self.find_duplicates_in_list(list_id)
            removed_count = 0

            async with get_db() as db:
                for username, duplicate_info in duplicates.items():
                    lead_ids = duplicate_info['lead_ids']

                    if keep_first:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π), —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                        ids_to_remove = lead_ids[1:]
                    else:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Å–∞–º—ã–π –Ω–æ–≤—ã–π), —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                        ids_to_remove = lead_ids[:-1]

                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
                    from sqlalchemy import update
                    await db.execute(
                        update(OutreachLead)
                        .where(OutreachLead.id.in_(ids_to_remove))
                        .values(
                            is_blocked=True,
                            block_reason="duplicate_removed"
                        )
                    )

                    removed_count += len(ids_to_remove)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    if keep_first:
                        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –∫—ç—à–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω
                        pass  # –û–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å—Ç–∞–µ—Ç—Å—è

                await db.commit()

            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ {list_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await self._rebuild_list_cache(list_id)

            return removed_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ {list_id}: {e}")
            return 0

    async def _rebuild_list_cache(self, list_id: int):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""

        try:
            async with get_db() as db:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à —Å–ø–∏—Å–∫–∞
                if list_id in self.username_cache:
                    del self.username_cache[list_id]

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                result = await db.execute(
                    select(OutreachLead.username)
                    .where(
                        OutreachLead.lead_list_id == list_id,
                        OutreachLead.is_blocked == False
                    )
                )

                usernames = result.scalars().all()

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à
                self.username_cache[list_id] = {
                    self._normalize_username(username) for username in usernames
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—ç—à–∞ —Å–ø–∏—Å–∫–∞ {list_id}: {e}")

    async def get_duplicate_stats(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""

        try:
            stats = {
                "total_usernames_in_cache": len(self.global_username_cache),
                "lists_in_cache": len(self.username_cache),
                "duplicates_within_lists": {},
                "cross_list_duplicates_count": 0
            }

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–∏—Å–∫–∞–º
            for list_id, usernames in self.username_cache.items():
                stats["duplicates_within_lists"][list_id] = len(usernames)

            # –ú–µ–∂—Å–ø–∏—Å–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cross_duplicates = await self.find_cross_list_duplicates()
            stats["cross_list_duplicates_count"] = len(cross_duplicates)

            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return {
                "total_usernames_in_cache": 0,
                "lists_in_cache": 0,
                "duplicates_within_lists": {},
                "cross_list_duplicates_count": 0
            }

    async def refresh_cache(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""

        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
            self.username_cache.clear()
            self.global_username_cache.clear()

            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à
            await self._build_cache()

            logger.info("üîÑ –ö—ç—à –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")

    def get_cache_size(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞"""

        try:
            return {
                "global_cache_size": len(self.global_username_cache),
                "list_caches_count": len(self.username_cache),
                "total_list_usernames": sum(len(usernames) for usernames in self.username_cache.values())
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: {e}")
            return {"global_cache_size": 0, "list_caches_count": 0, "total_list_usernames": 0}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
duplicate_filter = DuplicateFilter()