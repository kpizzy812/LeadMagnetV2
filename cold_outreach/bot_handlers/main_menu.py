# cold_outreach/bot_handlers/main_menu.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from cold_outreach.core.outreach_manager import outreach_manager
from cold_outreach.bot_handlers.lead_handlers import leads_handlers_router
from cold_outreach.bot_handlers.template_handlers import template_handlers_router
from cold_outreach.bot_handlers.channel_post_handlers import channel_post_router  # –ù–û–í–û–ï
from cold_outreach.bot_handlers.analytics_handlers import analytics_handlers_router  # –ù–û–í–û–ï
from loguru import logger

outreach_router = Router()

# –í–∫–ª—é—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
outreach_router.include_router(leads_handlers_router)
outreach_router.include_router(template_handlers_router)
outreach_router.include_router(channel_post_router)  # –ù–û–í–û–ï
outreach_router.include_router(analytics_handlers_router)  # –ù–û–í–û–ï

@outreach_router.callback_query(F.data == "outreach_main")
async def outreach_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        active_campaigns = await outreach_manager.get_active_campaigns()
        session_stats = await outreach_manager.get_session_outreach_stats()

        available_sessions = sum(1 for stats in session_stats.values() if stats.get("can_send", False))
        blocked_sessions = sum(1 for stats in session_stats.values() if stats.get("is_blocked", False))

        text = f"""üì§ <b>–°–∏—Å—Ç–µ–º–∞ —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {len(active_campaigns)}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {available_sessions}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {blocked_sessions}

üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ª–∏–¥–æ–≤
‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ üì∫ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ üöÄ –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–∞–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏."""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìã –°–ø–∏—Å–∫–∏ –ª–∏–¥–æ–≤", callback_data="outreach_leads"),
                    InlineKeyboardButton(text="üìù –®–∞–±–ª–æ–Ω—ã", callback_data="outreach_templates")
                ],
                [
                    InlineKeyboardButton(text="üöÄ –ö–∞–º–ø–∞–Ω–∏–∏", callback_data="outreach_campaigns"),
                    InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="outreach_analytics")
                ],
                [
                    InlineKeyboardButton(text="‚öôÔ∏è –°–µ—Å—Å–∏–∏", callback_data="outreach_sessions"),
                    InlineKeyboardButton(text="üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="outreach_safety")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@outreach_router.callback_query(F.data == "outreach_leads")
async def outreach_leads_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏"""

    try:
        from cold_outreach.leads.lead_manager import LeadManager
        lead_manager = LeadManager()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏—Å–∫–æ–≤
        lists_data = await lead_manager.get_all_lists()

        total_lists = len(lists_data)
        total_leads = sum(lst.get("total_leads", 0) for lst in lists_data)

        text = f"""üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ª–∏–¥–æ–≤</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–ø–∏—Å–∫–æ–≤: {total_lists}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤: {total_leads}

üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ø–∏—Å–∫–æ–≤
‚Ä¢ –ò–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞/CSV
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="leads_create_list"),
                    InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤", callback_data="leads_import")
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                    InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", callback_data="leads_duplicates")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –ª–∏–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@outreach_router.callback_query(F.data == "outreach_templates")
async def outreach_templates_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤"""

    try:
        from cold_outreach.templates.template_manager import TemplateManager
        template_manager = TemplateManager()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–±–ª–æ–Ω–æ–≤
        templates_list = await template_manager.get_templates_list(limit=100)
        channel_templates = await template_manager.get_channel_templates()

        total_templates = len(templates_list)
        active_templates = sum(1 for t in templates_list if t.get("is_active", False))
        channel_posts_count = len(channel_templates)

        text = f"""üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {total_templates}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_templates}
‚Ä¢ –ü–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤: {channel_posts_count}

üéØ <b>–¢–∏–ø—ã —à–∞–±–ª–æ–Ω–æ–≤:</b>
‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
‚Ä¢ üì∫ –ü–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º
‚Ä¢ ü§ñ –ò–ò —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞

üí° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ûï –¢–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="templates_create"),
                    InlineKeyboardButton(text="üì∫ –ò–∑ –∫–∞–Ω–∞–ª–∞", callback_data="templates_create_from_channel")
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —à–∞–±–ª–æ–Ω—ã", callback_data="templates_view_all"),
                    InlineKeyboardButton(text="üì∫ –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–æ–≤", callback_data="templates_view_channel_posts")
                ],
                [
                    InlineKeyboardButton(text="üé≠ –ü–æ –ø–µ—Ä—Å–æ–Ω–∞–º", callback_data="templates_by_persona"),
                    InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="templates_stats")
                ],
                [
                    InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="templates_channel_help"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@outreach_router.callback_query(F.data == "outreach_campaigns")
async def outreach_campaigns_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏"""

    try:
        from cold_outreach.campaigns.campaign_manager import CampaignManager
        from storage.database import get_db
        from storage.models.cold_outreach import OutreachCampaign
        from sqlalchemy import select, func

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–π
        async with get_db() as db:
            total_result = await db.execute(select(func.count(OutreachCampaign.id)))
            total_campaigns = total_result.scalar() or 0

            active_result = await db.execute(
                select(func.count(OutreachCampaign.id))
                .where(OutreachCampaign.status == "active")
            )
            active_campaigns = active_result.scalar() or 0

            completed_result = await db.execute(
                select(func.count(OutreachCampaign.id))
                .where(OutreachCampaign.status == "completed")
            )
            completed_campaigns = completed_result.scalar() or 0

        text = f"""üöÄ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_campaigns}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_campaigns}

‚ö° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–æ–º/–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã
‚Ä¢ –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è", callback_data="campaigns_create"),
                    InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns_view_all")
                ],
                [
                    InlineKeyboardButton(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="campaigns_active"),
                    InlineKeyboardButton(text="üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="campaigns_monitor")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –∫–∞–º–ø–∞–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@outreach_router.callback_query(F.data == "outreach_sessions")
async def outreach_sessions_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π
        session_stats = await outreach_manager.get_session_outreach_stats()

        total_sessions = len(session_stats)
        outreach_mode = sum(1 for stats in session_stats.values() if stats.get("mode") == "outreach")
        response_mode = sum(1 for stats in session_stats.values() if stats.get("mode") == "response")
        blocked_sessions = sum(1 for stats in session_stats.values() if stats.get("is_blocked", False))

        text = f"""‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}
‚Ä¢ –í —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {outreach_mode}
‚Ä¢ –í —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–æ–≤: {response_mode}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_sessions}

üîÑ <b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ <code>outreach</code> - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–ª–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ <code>response</code> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–µ—Å—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π."""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π", callback_data="sessions_outreach_stats"),
                    InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤", callback_data="sessions_limits")
                ],
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="sessions_blocked"),
                    InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º—ã", callback_data="sessions_switch_modes")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@outreach_router.callback_query(F.data == "outreach_safety")
async def outreach_safety_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        from cold_outreach.safety.error_handler import OutreachErrorHandler
        from cold_outreach.safety.rate_limiter import RateLimiter

        error_handler = OutreachErrorHandler()
        rate_limiter = RateLimiter()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        blocked_stats = await error_handler.get_blocked_sessions_stats()
        rate_stats = await rate_limiter.get_sessions_stats()

        text = f"""üîí <b>–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b>
‚Ä¢ FloodWait —Å–µ—Å—Å–∏–π: {blocked_stats.get('flood_wait_sessions', 0)}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {blocked_stats.get('blocked_sessions', 0)}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {blocked_stats.get('total_blocked', 0)}

‚ö° <b>–õ–∏–º–∏—Ç—ã:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤: {len(rate_stats)}
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é
‚Ä¢ –£–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

üõ°Ô∏è <b>–ó–∞—â–∏—Ç–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ @spambot
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ Telegram"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="safety_blocked_sessions"),
                    InlineKeyboardButton(text="‚ö° –õ–∏–º–∏—Ç—ã", callback_data="safety_rate_limits")
                ],
                [
                    InlineKeyboardButton(text="üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="safety_recovery"),
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="safety_stats")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@outreach_router.callback_query(F.data == "outreach_analytics")
async def outreach_analytics_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    try:
        from storage.database import get_db
        from storage.models.cold_outreach import OutreachMessage, OutreachMessageStatus
        from sqlalchemy import select, func
        from datetime import datetime, timedelta

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.utcnow() - timedelta(hours=24)

        async with get_db() as db:
            # –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 24—á
            sent_24h_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.sent_at >= yesterday,
                    OutreachMessage.status == OutreachMessageStatus.SENT
                )
            )
            sent_24h = sent_24h_result.scalar() or 0

            # –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 24—á
            responses_24h_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.sent_at >= yesterday,
                    OutreachMessage.got_response == True
                )
            )
            responses_24h = responses_24h_result.scalar() or 0

            # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞ 24—á
            conversions_24h_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.sent_at >= yesterday,
                    OutreachMessage.converted == True
                )
            )
            conversions_24h = conversions_24h_result.scalar() or 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        response_rate = (responses_24h / max(sent_24h, 1)) * 100
        conversion_rate = (conversions_24h / max(sent_24h, 1)) * 100

        text = f"""üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_24h}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {responses_24h}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {conversions_24h}

üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ Response Rate: {response_rate:.1f}%
‚Ä¢ Conversion Rate: {conversion_rate:.1f}%

üéØ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìù –ü–æ —à–∞–±–ª–æ–Ω–∞–º", callback_data="analytics_templates"),
                    InlineKeyboardButton(text="ü§ñ –ü–æ —Å–µ—Å—Å–∏—è–º", callback_data="analytics_sessions")
                ],
                [
                    InlineKeyboardButton(text="üìÖ –ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="analytics_time"),
                    InlineKeyboardButton(text="üé≠ –ü–æ –ø–µ—Ä—Å–æ–Ω–∞–º", callback_data="analytics_personas")
                ],
                [
                    InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="analytics_detailed"),
                    InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="analytics_export")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_main")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")