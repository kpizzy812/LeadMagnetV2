# cold_outreach/bot_handlers/campaign_handlers.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from cold_outreach.campaigns.campaign_manager import campaign_manager
from cold_outreach.leads.lead_manager import lead_manager
from cold_outreach.templates.template_manager import template_manager
from cold_outreach.core import outreach_manager
from loguru import logger

campaign_handlers_router = Router()


class CampaignStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π"""
    waiting_name = State()
    waiting_description = State()
    selecting_list = State()
    selecting_template = State()
    selecting_sessions = State()
    configuring_settings = State()


@campaign_handlers_router.callback_query(F.data == "campaigns_create")
async def campaigns_create_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""

    text = """üöÄ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç X", "–Ø–Ω–≤–∞—Ä—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"

üí° –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–ø–∏—Å–∫–µ."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_campaigns")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(CampaignStates.waiting_name)


@campaign_handlers_router.message(CampaignStates.waiting_name)
async def campaigns_create_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""

    campaign_name = message.text.strip()

    if not campaign_name or len(campaign_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(campaign_name=campaign_name)

    text = f"""üöÄ <b>–ö–∞–º–ø–∞–Ω–∏—è: "{campaign_name}"</b>

üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."""

    await message.answer(text)
    await state.set_state(CampaignStates.waiting_description)


@campaign_handlers_router.message(CampaignStates.waiting_description)
async def campaigns_create_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""

    description = message.text.strip() if message.text.strip() != "-" else None
    await state.update_data(description=description)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ª–∏–¥–æ–≤
    try:
        lists_data = await lead_manager.get_all_lists()

        if not lists_data:
            text = """‚ùå <b>–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤.

–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="leads_create_list")
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_campaigns")
                    ]
                ]
            )

            await message.answer(text, reply_markup=keyboard)
            await state.clear()
            return

        data = await state.get_data()
        campaign_name = data["campaign_name"]

        text = f"""üöÄ <b>–ö–∞–º–ø–∞–Ω–∏—è: "{campaign_name}"</b>

üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:

–ù–∞–π–¥–µ–Ω–æ —Å–ø–∏—Å–∫–æ–≤: {len(lists_data)}"""

        keyboard_buttons = []
        for lst in lists_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìã {lst['name']} ({lst['total_leads']} –ª–∏–¥–æ–≤)",
                    callback_data=f"campaign_select_list_{lst['id']}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_campaigns")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer(text, reply_markup=keyboard)
        await state.set_state(CampaignStates.selecting_list)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤")
        await state.clear()


@campaign_handlers_router.callback_query(F.data.startswith("campaign_select_list_"), CampaignStates.selecting_list)
async def campaigns_select_list(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""

    try:
        list_id = int(callback.data.split("_")[-1])
        await state.update_data(lead_list_id=list_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates_list = await template_manager.get_templates_list(limit=20)

        if not templates_list:
            text = """‚ùå <b>–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è.

–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="templates_create")
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_campaigns")
                    ]
                ]
            )

            await callback.message.edit_text(text, reply_markup=keyboard)
            await state.clear()
            return

        data = await state.get_data()
        campaign_name = data["campaign_name"]

        text = f"""üöÄ <b>–ö–∞–º–ø–∞–Ω–∏—è: "{campaign_name}"</b>

üìù –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:

–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates_list)}"""

        keyboard_buttons = []
        for template in templates_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            template_type = "üì∫" if template.get("category") == "channel_post" else "üìù"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{template_type} {template['name'][:30]}...",
                    callback_data=f"campaign_select_template_{template['id']}"
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_campaigns")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(CampaignStates.selecting_template)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞")


@campaign_handlers_router.callback_query(F.data.startswith("campaign_select_template_"),
                                         CampaignStates.selecting_template)
async def campaigns_select_template(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    try:
        template_id = int(callback.data.split("_")[-1])
        await state.update_data(template_id=template_id)

        data = await state.get_data()
        campaign_name = data["campaign_name"]

        # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å–µ—Å—Å–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        text = f"""üöÄ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: "{campaign_name}"</b>

‚è≥ –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –õ–∏–º–∏—Ç: 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00-18:00
‚Ä¢ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""

        await callback.message.edit_text(text)

        # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
        campaign_id = await campaign_manager.create_campaign(
            name=campaign_name,
            description=data.get("description", ""),
            lead_list_id=data["lead_list_id"],
            template_id=template_id,
            session_names=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            settings={
                "max_messages_per_day": 5,
                "delay_between_messages": 1800,
                "session_daily_limit": 5,
                "daily_start_hour": 10,
                "daily_end_hour": 18
            }
        )

        if campaign_id:
            text = f"""‚úÖ <b>–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>

üöÄ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {campaign_name}
üÜî <b>ID:</b> {campaign_id}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ß–µ—Ä–Ω–æ–≤–∏–∫

üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "—á–µ—Ä–Ω–æ–≤–∏–∫". –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ—ë –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å.

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                            callback_data=f"campaign_start_{campaign_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å",
                            callback_data=f"campaign_settings_{campaign_id}"
                        ),
                        InlineKeyboardButton(
                            text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä",
                            callback_data=f"campaign_view_{campaign_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="campaigns_view_all"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
                    ]
                ]
            )
        else:
            text = """‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏</b>

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
                ]]
            )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")

    await state.clear()


@campaign_handlers_router.callback_query(F.data == "campaigns_view_all")
async def campaigns_view_all(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π"""

    try:
        from storage.database import get_db
        from storage.models.cold_outreach import OutreachCampaign
        from sqlalchemy import select, desc

        async with get_db() as db:
            result = await db.execute(
                select(OutreachCampaign)
                .order_by(desc(OutreachCampaign.created_at))
                .limit(10)
            )
            campaigns = result.scalars().all()

        if not campaigns:
            text = """üìã <b>–ö–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="campaigns_create")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
                    ]
                ]
            )
        else:
            text = f"""üìã <b>–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(campaigns)})</b>

"""

            keyboard_buttons = []

            for campaign in campaigns:
                status_emoji = {
                    "draft": "üìù",
                    "active": "üöÄ",
                    "paused": "‚è∏Ô∏è",
                    "completed": "‚úÖ",
                    "failed": "‚ùå"
                }.get(campaign.status, "‚ùì")

                progress = 0
                if campaign.total_targets > 0:
                    progress = (campaign.processed_targets / campaign.total_targets) * 100

                text += f"{status_emoji} <b>{campaign.name}</b>\n"
                text += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {campaign.processed_targets}/{campaign.total_targets} ({progress:.1f}%)\n"
                text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {campaign.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"{status_emoji} {campaign.name[:20]}...",
                        callback_data=f"campaign_stats_{campaign.id}"
                    ),
                    InlineKeyboardButton(
                        text="üöÄ" if campaign.status == "draft" else "‚è∏Ô∏è",
                        callback_data=f"campaign_start_{campaign.id}" if campaign.status == "draft" else f"campaign_stop_{campaign.id}"
                    )
                ])

            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="campaigns_create")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="campaigns_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π")


@campaign_handlers_router.callback_query(F.data == "campaigns_active")
async def campaigns_active(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""

    try:
        from cold_outreach.core.outreach_manager import outreach_manager

        active_campaigns = await outreach_manager.get_active_campaigns()

        if not active_campaigns:
            text = """‚ñ∂Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏</b>

üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏.

–°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="campaigns_create")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
                    ]
                ]
            )
        else:
            text = f"""‚ñ∂Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(active_campaigns)})</b>

"""

            keyboard_buttons = []

            for campaign in active_campaigns:
                text += f"üöÄ <b>{campaign['name']}</b>\n"
                text += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {campaign['processed_targets']}/{campaign['total_targets']} ({campaign['progress_percent']}%)\n"
                text += f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {campaign['successful_sends']}\n"
                text += f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {campaign['failed_sends']}\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üöÄ {campaign['name'][:25]}...",
                        callback_data=f"campaign_view_{campaign['campaign_id']}"
                    )
                ])

            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="campaigns_active"),
                    InlineKeyboardButton(text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="campaigns_monitor")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@campaign_handlers_router.callback_query(F.data == "campaigns_monitor")
async def campaigns_monitor(callback: CallbackQuery):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–ø–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    text = """üìà <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–ø–∞–Ω–∏–π</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π
‚Ä¢ –û—à–∏–±–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="campaigns_active")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_campaigns")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@campaign_handlers_router.callback_query(F.data.startswith("campaign_start_"))
async def campaign_start_handler(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏"""
    try:
        campaign_id = int(callback.data.split("_")[-1])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        await callback.message.edit_text("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ outreach_manager
        success = await outreach_manager.start_campaign(campaign_id)

        if success:
            text = f"‚úÖ <b>–ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n–°–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="campaigns_monitor")],
                [InlineKeyboardButton(text="üîô –ö –∫–∞–º–ø–∞–Ω–∏—è–º", callback_data="outreach_campaigns")]
            ])
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∫–∞–º–ø–∞–Ω–∏—è–º", callback_data="outreach_campaigns")]
            ])

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")


@campaign_handlers_router.callback_query(F.data.startswith("campaign_stop_"))
async def campaign_stop_handler(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    try:
        campaign_id = int(callback.data.split("_")[-1])

        await callback.message.edit_text("‚è∏Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é...")

        success = await outreach_manager.stop_campaign(campaign_id)

        if success:
            text = f"‚è∏Ô∏è <b>–ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n–°–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤."
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"campaign_stats_{campaign_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞–º–ø–∞–Ω–∏—è–º", callback_data="outreach_campaigns")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")


@campaign_handlers_router.callback_query(F.data.startswith("campaign_stats_"))
async def campaign_stats_handler(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    try:
        campaign_id = int(callback.data.split("_")[-1])

        progress = await campaign_manager.get_campaign_progress(campaign_id)

        if not progress:
            await callback.answer("‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {progress['name']}</b>

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {progress['processed_targets']}/{progress['total_targets']} ({progress['progress_percent']}%)
- –£—Å–ø–µ—à–Ω–æ: {progress['successful_sends']}
- –ù–µ—É–¥–∞—á–Ω–æ: {progress['failed_sends']}

üìÖ <b>–í—Ä–µ–º—è:</b>
- –ó–∞–ø—É—â–µ–Ω–∞: {progress['started_at'].strftime('%d.%m.%Y %H:%M') if progress['started_at'] else '–ù–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å'}
- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {progress['last_activity'].strftime('%d.%m.%Y %H:%M') if progress['last_activity'] else '–ù–µ—Ç'}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {progress['status']}"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"campaign_stats_{campaign_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞–º–ø–∞–Ω–∏—è–º", callback_data="outreach_campaigns")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@campaign_handlers_router.callback_query(F.data.startswith("campaign_view_"))
async def campaign_view_handler(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–º–ø–∞–Ω–∏–∏"""

    campaign_id = int(callback.data.split("_")[-1])

    text = f"""üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–º–ø–∞–Ω–∏–∏</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ö–∞–º–ø–∞–Ω–∏—è ID: {campaign_id}

–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏–∏."""

    await callback.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@campaign_handlers_router.callback_query(F.data.startswith("campaign_settings_"))
async def campaign_settings_handler(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏"""

    campaign_id = int(callback.data.split("_")[-1])

    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ö–∞–º–ø–∞–Ω–∏—è ID: {campaign_id}

–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤, –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã, —Å–µ—Å—Å–∏–π."""

    await callback.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@campaign_handlers_router.message(F.text == "/cancel")
async def cancel_campaign_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–º–ø–∞–Ω–∏—è–º–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–∞–º–ø–∞–Ω–∏—è–º", callback_data="outreach_campaigns")
            ]]
        )
    )