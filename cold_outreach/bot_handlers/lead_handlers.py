# cold_outreach/bot_handlers/lead_handlers.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from cold_outreach.leads.lead_manager import lead_manager
from loguru import logger

leads_handlers_router = Router()


class LeadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤"""
    waiting_list_name = State()
    waiting_list_description = State()
    waiting_leads_data = State()


@leads_handlers_router.callback_query(F.data == "leads_create_list")
async def leads_create_list_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""

    text = """üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤:

–ù–∞–ø—Ä–∏–º–µ—Ä: "Telegram –∫–∞–Ω–∞–ª—ã –∫—Ä–∏–ø—Ç–æ", "Instagram –±–ª–æ–≥–µ—Ä—ã", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã"

üí° –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–ª–∏—á–∞—Ç—å —Å–ø–∏—Å–∫–∏ –≤ –±—É–¥—É—â–µ–º."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_leads")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(LeadStates.waiting_list_name)


@leads_handlers_router.message(LeadStates.waiting_list_name)
async def leads_create_list_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞"""

    list_name = message.text.strip()

    if not list_name or len(list_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(list_name=list_name)

    text = f"""üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞: "{list_name}"</b>

üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

–û–ø–∏—à–∏—Ç–µ –æ—Ç–∫—É–¥–∞ —ç—Ç–∏ –ª–∏–¥—ã, –∫–∞–∫–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."""

    await message.answer(text)
    await state.set_state(LeadStates.waiting_list_description)


@leads_handlers_router.message(LeadStates.waiting_list_description)
async def leads_create_list_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞"""

    description = message.text.strip() if message.text.strip() != "-" else None

    data = await state.get_data()
    list_name = data["list_name"]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    try:
        list_id = await lead_manager.create_lead_list(
            name=list_name,
            description=description,
            source="telegram_bot"
        )

        if list_id:
            text = f"""‚úÖ <b>–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {list_name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}
üÜî <b>ID:</b> {list_id}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–æ–≤ –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–æ–≤",
                            callback_data=f"leads_import_to_{list_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                    ]
                ]
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]]
            )

        await message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")

    await state.clear()


@leads_handlers_router.callback_query(F.data.startswith("leads_import_to_"))
async def leads_import_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤ –≤ —Å–ø–∏—Å–æ–∫"""

    list_id = int(callback.data.split("_")[-1])
    await state.update_data(list_id=list_id)

    text = """üì• <b>–ò–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤</b>

üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ username'–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>

1Ô∏è‚É£ <b>–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫:</b>
<code>username1
username2  
@username3
username4</code>

2Ô∏è‚É£ <b>CSV —Ñ–æ—Ä–º–∞—Ç:</b>
<code>username,first_name,last_name
user1,–ò–≤–∞–Ω,–ü–µ—Ç—Ä–æ–≤
user2,–ú–∞—Ä–∏—è,–°–∏–¥–æ—Ä–æ–≤–∞</code>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π username —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
‚Ä¢ –°–∏–º–≤–æ–ª @ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_leads")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(LeadStates.waiting_leads_data)


@leads_handlers_router.message(LeadStates.waiting_leads_data)
async def leads_import_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤"""

    data = await state.get_data()
    list_id = data["list_id"]
    leads_text = message.text

    if not leads_text or len(leads_text.strip()) < 5:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥–æ–≤...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–¥–æ–≤
        result = await lead_manager.import_leads_from_text(
            list_id=list_id,
            text=leads_text,
            format_type="username_only"  # –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        total = result["total_processed"]
        added = result["added"]
        duplicates = result["duplicates"]
        invalid = result["invalid"]
        errors = result["errors"]

        text = f"""üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞</b>

‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}

‚ö†Ô∏è <b>–ò—Å–∫–ª—é—á–µ–Ω–æ:</b>
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid}
‚Ä¢ –û—à–∏–±–æ–∫: {errors}

üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–∏—Ö –ª–∏–¥–æ–≤."""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        if errors > 0 and len(result["details"]) <= 10:
            text += "\n\nüìù <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n"
            for detail in result["details"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                if detail["status"] == "error":
                    text += f"‚Ä¢ {detail['username']}: {detail['reason']}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                        callback_data=f"campaigns_create_for_list_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]
            ]
        )

        await processing_msg.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤: {e}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ª–∏–¥–æ–≤")

    await state.clear()


@leads_handlers_router.callback_query(F.data == "leads_view_all")
async def leads_view_all_lists(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤"""

    try:
        lists_data = await lead_manager.get_all_lists()

        if not lists_data:
            text = "üìö <b>–°–ø–∏—Å–∫–∏ –ª–∏–¥–æ–≤</b>\n\nüìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="leads_create_list")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                    ]
                ]
            )
        else:
            text = f"üìö <b>–í—Å–µ —Å–ø–∏—Å–∫–∏ –ª–∏–¥–æ–≤ ({len(lists_data)})</b>\n\n"

            keyboard_buttons = []

            for lst in lists_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status_emoji = "‚úÖ" if lst['is_active'] else "‚ùå"
                progress = f"{lst['processed_leads']}/{lst['total_leads']}"

                text += f"{status_emoji} <b>{lst['name']}</b>\n"
                text += f"   ‚Ä¢ –õ–∏–¥–æ–≤: {lst['total_leads']}\n"
                text += f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {progress}\n"
                text += f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω: {lst['created_at'].strftime('%d.%m.%Y')}\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìã {lst['name'][:25]}...",
                        callback_data=f"leads_view_list_{lst['id']}"
                    )
                ])

            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="leads_create_list"),
                    InlineKeyboardButton(text="üîç –î—É–±–ª–∏–∫–∞—Ç—ã", callback_data="leads_duplicates")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leads_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤")


@leads_handlers_router.callback_query(F.data.startswith("leads_view_list_"))
async def leads_view_specific_list(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""

    try:
        list_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏—Å–∫–∞
        stats = await lead_manager.get_list_stats(list_id)

        if not stats:
            await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = f"""üìã <b>{stats['name']}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {stats['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {stats['source'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {stats['total_leads']}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed_leads']}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {stats['available_leads']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_leads']}

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_contacts']}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_contacts']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {stats['created_at'].strftime('%d.%m.%Y %H:%M')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–æ–≤",
                        callback_data=f"leads_import_to_{list_id}"
                    ),
                    InlineKeyboardButton(
                        text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                        callback_data=f"campaigns_create_for_list_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üßπ –û—á–∏—Å—Ç–∏—Ç—å",
                        callback_data=f"leads_clean_{list_id}"
                    ),
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"leads_delete_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞")


@leads_handlers_router.callback_query(F.data.startswith("leads_clean_"))
async def leads_clean_list(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ª–∏–¥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""

    try:
        list_id = int(callback.data.split("_")[-1])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = """üßπ <b>–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤</b>

–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username'—ã
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å",
                        callback_data=f"leads_clean_confirm_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"leads_view_list_{list_id}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@leads_handlers_router.callback_query(F.data.startswith("leads_clean_confirm_"))
async def leads_clean_list_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞"""

    try:
        list_id = int(callback.data.split("_")[-1])

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        result = await lead_manager.clean_invalid_leads(list_id)

        text = f"""‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ª–∏–¥–æ–≤: {result['total_checked']}
‚Ä¢ –û—á–∏—â–µ–Ω–æ: {result['cleaned']}

–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìã –ö —Å–ø–∏—Å–∫—É",
                    callback_data=f"leads_view_list_{list_id}"
                )
            ]]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")


@leads_handlers_router.callback_query(F.data.startswith("leads_delete_"))
async def leads_delete_list(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""

    try:
        list_id = int(callback.data.split("_")[-1])

        text = """üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–Ω–µ —É–¥–∞–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é).

–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"leads_delete_confirm_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"leads_view_list_{list_id}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@leads_handlers_router.callback_query(F.data.startswith("leads_delete_confirm_"))
async def leads_delete_list_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞"""

    try:
        list_id = int(callback.data.split("_")[-1])

        # –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        success = await lead_manager.delete_lead_list(list_id)

        if success:
            text = """‚úÖ <b>–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω</b>

–°–ø–∏—Å–æ–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö."""
        else:
            text = """‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>

–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö."""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all")
            ]]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


@leads_handlers_router.callback_query(F.data == "leads_duplicates")
async def leads_find_duplicates(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ª–∏–¥–æ–≤"""

    try:
        from cold_outreach.leads.duplicate_filter import duplicate_filter

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        stats = await duplicate_filter.get_duplicate_stats()
        cross_duplicates = await duplicate_filter.find_cross_list_duplicates()

        text = f"""üîç <b>–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ Username'–æ–≤ –≤ –∫—ç—à–µ: {stats['total_usernames_in_cache']}
‚Ä¢ –°–ø–∏—Å–∫–æ–≤: {stats['lists_in_cache']}
‚Ä¢ –ú–µ–∂—Å–ø–∏—Å–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats['cross_list_duplicates_count']}

üîÑ <b>–î—É–±–ª–∏–∫–∞—Ç—ã –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏:</b>"""

        if cross_duplicates:
            text += f"\n–ù–∞–π–¥–µ–Ω–æ {len(cross_duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n\n"
            for username, info in list(cross_duplicates.items())[:5]:
                text += f"‚Ä¢ @{username}: –≤ {info['lists_count']} —Å–ø–∏—Å–∫–∞—Ö\n"

            if len(cross_duplicates) > 5:
                text += f"\n... –∏ –µ—â–µ {len(cross_duplicates) - 5} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"
        else:
            text += "\n‚úÖ –ú–µ–∂—Å–ø–∏—Å–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à",
                        callback_data="leads_refresh_cache"
                    )
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")


@leads_handlers_router.callback_query(F.data == "leads_refresh_cache")
async def leads_refresh_cache(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""

    try:
        from cold_outreach.leads.duplicate_filter import duplicate_filter

        await callback.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        await duplicate_filter.refresh_cache()

        text = """‚úÖ <b>–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω</b>

–ö—ç—à –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã", callback_data="leads_duplicates")
            ]]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")


@leads_handlers_router.callback_query(F.data == "leads_import")
async def leads_import_general(callback: CallbackQuery):
    """–û–±—â–∏–π –∏–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤ (–≤—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞)"""

    try:
        lists_data = await lead_manager.get_all_lists()

        if not lists_data:
            text = """üì• <b>–ò–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤</b>

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.

–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="leads_create_list")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                    ]
                ]
            )
        else:
            text = """üì• <b>–ò–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤:"""

            keyboard_buttons = []
            for lst in lists_data[:10]:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìã {lst['name']} ({lst['total_leads']} –ª–∏–¥–æ–≤)",
                        callback_data=f"leads_import_to_{lst['id']}"
                    )
                ])

            keyboard_buttons.append([
                InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="leads_create_list"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@leads_handlers_router.message(lambda message: message.text == "/cancel")
async def cancel_lead_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ª–∏–¥–∞–º–∏"""

    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –ª–∏–¥–∞–º", callback_data="outreach_leads")
            ]]
        )
    )