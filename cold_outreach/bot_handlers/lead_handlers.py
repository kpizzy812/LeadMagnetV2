# cold_outreach/bot_handlers/lead_handlers.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from cold_outreach.leads.lead_manager import lead_manager
from loguru import logger

leads_handlers_router = Router()


class LeadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤"""
    waiting_list_name = State()
    waiting_list_description = State()
    waiting_leads_data = State()


@leads_handlers_router.callback_query(F.data == "leads_create_list")
async def leads_create_list_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""

    text = """üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤:

–ù–∞–ø—Ä–∏–º–µ—Ä: "Telegram –∫–∞–Ω–∞–ª—ã –∫—Ä–∏–ø—Ç–æ", "Instagram –±–ª–æ–≥–µ—Ä—ã", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã"

üí° –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–ª–∏—á–∞—Ç—å —Å–ø–∏—Å–∫–∏ –≤ –±—É–¥—É—â–µ–º."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_leads")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(LeadStates.waiting_list_name)


@leads_handlers_router.message(LeadStates.waiting_list_name)
async def leads_create_list_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞"""

    list_name = message.text.strip()

    if not list_name or len(list_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(list_name=list_name)

    text = f"""üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞: "{list_name}"</b>

üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

–û–ø–∏—à–∏—Ç–µ –æ—Ç–∫—É–¥–∞ —ç—Ç–∏ –ª–∏–¥—ã, –∫–∞–∫–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."""

    await message.answer(text)
    await state.set_state(LeadStates.waiting_list_description)


@leads_handlers_router.message(LeadStates.waiting_list_description)
async def leads_create_list_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞"""

    description = message.text.strip() if message.text.strip() != "-" else None

    data = await state.get_data()
    list_name = data["list_name"]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    try:
        list_id = await lead_manager.create_lead_list(
            name=list_name,
            description=description,
            source="telegram_bot"
        )

        if list_id:
            text = f"""‚úÖ <b>–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {list_name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}
üÜî <b>ID:</b> {list_id}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–æ–≤ –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–æ–≤",
                            callback_data=f"leads_import_to_{list_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                    ]
                ]
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]]
            )

        await message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")

    await state.clear()


@leads_handlers_router.callback_query(F.data.startswith("leads_import_to_"))
async def leads_import_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤ –≤ —Å–ø–∏—Å–æ–∫"""

    list_id = int(callback.data.split("_")[-1])
    await state.update_data(list_id=list_id)

    text = """üì• <b>–ò–º–ø–æ—Ä—Ç –ª–∏–¥–æ–≤</b>

üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ username'–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>

1Ô∏è‚É£ <b>–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫:</b>
<code>username1
username2  
@username3
username4</code>

2Ô∏è‚É£ <b>CSV —Ñ–æ—Ä–º–∞—Ç:</b>
<code>username,first_name,last_name
user1,–ò–≤–∞–Ω,–ü–µ—Ç—Ä–æ–≤
user2,–ú–∞—Ä–∏—è,–°–∏–¥–æ—Ä–æ–≤–∞</code>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π username —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
‚Ä¢ –°–∏–º–≤–æ–ª @ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_leads")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(LeadStates.waiting_leads_data)


@leads_handlers_router.message(LeadStates.waiting_leads_data)
async def leads_import_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤"""

    data = await state.get_data()
    list_id = data["list_id"]
    leads_text = message.text

    if not leads_text or len(leads_text.strip()) < 5:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥–æ–≤...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–¥–æ–≤
        result = await lead_manager.import_leads_from_text(
            list_id=list_id,
            text=leads_text,
            format_type="username_only"  # –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        total = result["total_processed"]
        added = result["added"]
        duplicates = result["duplicates"]
        invalid = result["invalid"]
        errors = result["errors"]

        text = f"""üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞</b>

‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}

‚ö†Ô∏è <b>–ò—Å–∫–ª—é—á–µ–Ω–æ:</b>
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}
‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid}
‚Ä¢ –û—à–∏–±–æ–∫: {errors}

üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–∏—Ö –ª–∏–¥–æ–≤."""

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        if errors > 0 and len(result["details"]) <= 10:
            text += "\n\nüìù <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n"
            for detail in result["details"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                if detail["status"] == "error":
                    text += f"‚Ä¢ {detail['username']}: {detail['reason']}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                        callback_data=f"campaigns_create_for_list_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —Å–ø–∏—Å–∫–∏", callback_data="leads_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_leads")
                ]
            ]
        )

        await processing_msg.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤: {e}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ª–∏–¥–æ–≤")

    await state.clear()


@leads_handlers_router.callback_query(F.data == "leads_view_all")
async def leads_view_all_lists(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤"""

    try:
        lists_data = await lead_manager.get_all_lists()

        if not lists_data:
            text = "üìö <b>–°–ø–∏—Å–∫–∏ –ª–∏–¥–æ–≤</b>\n\nüìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ª–∏–¥–æ–≤."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [