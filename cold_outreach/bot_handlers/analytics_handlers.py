# cold_outreach/bot_handlers/analytics_handlers.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from typing import Dict, List, Any

from storage.database import get_db
from storage.models.cold_outreach import (
    OutreachCampaign, OutreachMessage, OutreachTemplate,
    OutreachLead, OutreachMessageStatus
)
from sqlalchemy import select, func, and_, desc
from loguru import logger

analytics_handlers_router = Router()


@analytics_handlers_router.callback_query(F.data == "analytics_templates")
async def analytics_templates(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""

    try:
        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —à–∞–±–ª–æ–Ω–∞–º
            template_stats_query = """
            SELECT 
                ot.id,
                ot.name,
                ot.usage_count,
                COUNT(om.id) as total_sent,
                COUNT(CASE WHEN om.status = 'sent' THEN 1 END) as successful_sent,
                COUNT(CASE WHEN om.got_response = true THEN 1 END) as responses,
                COUNT(CASE WHEN om.converted = true THEN 1 END) as conversions,
                AVG(CASE WHEN om.response_time IS NOT NULL THEN om.response_time END) as avg_response_time
            FROM outreach_templates ot
            LEFT JOIN outreach_messages om ON ot.id = om.template_id
            WHERE ot.is_active = true
            GROUP BY ot.id, ot.name, ot.usage_count
            ORDER BY total_sent DESC
            LIMIT 10
            """

            result = await db.execute(template_stats_query)
            template_stats = result.fetchall()

        if not template_stats:
            text = """üìù <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º</b>

üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–æ–≤.

–°–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìù –®–∞–±–ª–æ–Ω—ã", callback_data="outreach_templates"),
                        InlineKeyboardButton(text="üöÄ –ö–∞–º–ø–∞–Ω–∏–∏", callback_data="outreach_campaigns")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                    ]
                ]
            )
        else:
            text = f"üìù <b>–¢–æ–ø —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"

            keyboard_buttons = []

            for stats in template_stats:
                template_id, name, usage_count, total_sent, successful_sent, responses, conversions, avg_response_time = stats

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                delivery_rate = (successful_sent / max(total_sent, 1)) * 100
                response_rate = (responses / max(successful_sent, 1)) * 100
                conversion_rate = (conversions / max(successful_sent, 1)) * 100

                text += f"üìù <b>{name}</b>\n"
                text += f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent} (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivery_rate:.1f}%)\n"
                text += f"   üí¨ –û—Ç–≤–µ—Ç–æ–≤: {responses} ({response_rate:.1f}%)\n"
                text += f"   üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {conversions} ({conversion_rate:.1f}%)\n"

                if avg_response_time:
                    hours = int(avg_response_time // 3600)
                    text += f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {hours}—á\n"

                text += "\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìä {name[:20]}... ({response_rate:.1f}%)",
                        callback_data=f"analytics_template_detail_{template_id}"
                    )
                ])

            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="üìà –°—Ä–∞–≤–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data="analytics_templates_compare"),
                    InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="analytics_templates_export")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_templates"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@analytics_handlers_router.callback_query(F.data.startswith("analytics_template_detail_"))
async def analytics_template_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É"""

    try:
        template_id = int(callback.data.split("_")[-1])

        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–±–ª–æ–Ω–∞
            template_result = await db.execute(
                select(OutreachTemplate).where(OutreachTemplate.id == template_id)
            )
            template = template_result.scalar_one_or_none()

            if not template:
                await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            thirty_days_ago = datetime.utcnow() - timedelta(days=30)

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_sent_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.template_id == template_id,
                    OutreachMessage.sent_at >= thirty_days_ago
                )
            )
            total_sent = total_sent_result.scalar() or 0

            # –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
            delivered_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.template_id == template_id,
                    OutreachMessage.status == OutreachMessageStatus.SENT,
                    OutreachMessage.sent_at >= thirty_days_ago
                )
            )
            delivered = delivered_result.scalar() or 0

            # –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
            responses_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.template_id == template_id,
                    OutreachMessage.got_response == True,
                    OutreachMessage.sent_at >= thirty_days_ago
                )
            )
            responses = responses_result.scalar() or 0

            # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
            conversions_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(
                    OutreachMessage.template_id == template_id,
                    OutreachMessage.converted == True,
                    OutreachMessage.sent_at >= thirty_days_ago
                )
            )
            conversions = conversions_result.scalar() or 0

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ—à–∏–±–æ–∫
            error_stats_result = await db.execute(
                select(
                    OutreachMessage.error_code,
                    func.count(OutreachMessage.id).label('count')
                )
                .where(
                    OutreachMessage.template_id == template_id,
                    OutreachMessage.status.in_([
                        OutreachMessageStatus.FAILED,
                        OutreachMessageStatus.BLOCKED,
                        OutreachMessageStatus.FLOOD_WAIT
                    ]),
                    OutreachMessage.sent_at >= thirty_days_ago
                )
                .group_by(OutreachMessage.error_code)
                .order_by(desc(func.count(OutreachMessage.id)))
            )
            error_stats = error_stats_result.fetchall()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        delivery_rate = (delivered / max(total_sent, 1)) * 100
        response_rate = (responses / max(delivered, 1)) * 100
        conversion_rate = (conversions / max(delivered, 1)) * 100

        text = f"""üìù <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {template.name}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered} ({delivery_rate:.1f}%)
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {responses} ({response_rate:.1f}%)
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {conversions} ({conversion_rate:.1f}%)

üéØ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {(conversions / max(total_sent, 1)) * 100:.2f}%
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {template.avg_response_time or 'N/A'}

üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>
<code>{template.text[:200]}{'...' if len(template.text) > 200 else ''}</code>"""

        if error_stats:
            text += "\n\n‚ùå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>\n"
            for error_code, count in error_stats[:3]:
                text += f"‚Ä¢ {error_code or 'Unknown'}: {count}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º",
                                         callback_data=f"analytics_template_timeline_{template_id}"),
                    InlineKeyboardButton(text="üîß –£–ª—É—á—à–µ–Ω–∏—è", callback_data=f"template_suggestions_{template_id}")
                ],
                [
                    InlineKeyboardButton(text="üìù –ö —à–∞–±–ª–æ–Ω—É", callback_data=f"template_view_{template_id}"),
                    InlineKeyboardButton(text="üìä –í—Å–µ —à–∞–±–ª–æ–Ω—ã", callback_data="analytics_templates")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@analytics_handlers_router.callback_query(F.data == "analytics_sessions")
async def analytics_sessions(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º"""

    try:
        from cold_outreach.core.outreach_manager import outreach_manager

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π
        session_stats = await outreach_manager.get_session_outreach_stats()

        if not session_stats:
            text = """ü§ñ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º</b>

üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]]
            )
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sessions_list = []
            for session_name, stats in session_stats.items():
                daily_sent = stats.get("daily_sent", 0)
                daily_limit = stats.get("daily_limit", 1)
                efficiency = (daily_sent / daily_limit) * 100 if daily_limit > 0 else 0

                sessions_list.append({
                    "name": session_name,
                    "stats": stats,
                    "efficiency": efficiency
                })

            sessions_list.sort(key=lambda x: x["efficiency"], reverse=True)

            text = f"ü§ñ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º ({len(sessions_list)})</b>\n\n"

            keyboard_buttons = []

            for session_data in sessions_list[:10]:  # –¢–æ–ø 10
                session_name = session_data["name"]
                stats = session_data["stats"]
                efficiency = session_data["efficiency"]

                mode_emoji = "üì§" if stats.get("mode") == "outreach" else "üí¨"
                status_emoji = "üö´" if stats.get("is_blocked") else "‚úÖ"
                premium_emoji = "üíé" if stats.get("is_premium") else "üì±"

                daily_sent = stats.get("daily_sent", 0)
                daily_limit = stats.get("daily_limit", 0)
                total_messages = stats.get("total_messages", 0)

                text += f"{mode_emoji}{status_emoji}{premium_emoji} <b>{session_name}</b>\n"
                text += f"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%\n"
                text += f"   üì§ –°–µ–≥–æ–¥–Ω—è: {daily_sent}/{daily_limit}\n"
                text += f"   üìà –í—Å–µ–≥–æ: {total_messages}\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"{mode_emoji} {session_name[:15]}... ({efficiency:.0f}%)",
                        callback_data=f"analytics_session_detail_{session_name}"
                    )
                ])

            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_sessions"),
                    InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="outreach_sessions")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@analytics_handlers_router.callback_query(F.data.startswith("analytics_session_detail_"))
async def analytics_session_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏"""

    try:
        session_name = callback.data.replace("analytics_session_detail_", "")

        async with get_db() as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            seven_days_ago = datetime.utcnow() - timedelta(days=7)

            # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
            daily_stats_result = await db.execute(
                select(
                    func.date(OutreachMessage.sent_at).label('date'),
                    func.count(OutreachMessage.id).label('total'),
                    func.count(
                        func.nullif(OutreachMessage.status != OutreachMessageStatus.SENT, True)
                    ).label('successful'),
                    func.count(
                        func.nullif(OutreachMessage.got_response != True, True)
                    ).label('responses')
                )
                .where(
                    OutreachMessage.session_name == session_name,
                    OutreachMessage.sent_at >= seven_days_ago
                )
                .group_by(func.date(OutreachMessage.sent_at))
                .order_by(func.date(OutreachMessage.sent_at))
            )
            daily_stats = daily_stats_result.fetchall()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_result = await db.execute(
                select(func.count(OutreachMessage.id))
                .where(OutreachMessage.session_name == session_name)
            )
            total_messages = total_result.scalar() or 0

            # –°–µ—Å—Å–∏—è —Å–µ–π—á–∞—Å
            from cold_outreach.core.outreach_manager import outreach_manager
            session_stats = await outreach_manager.get_session_outreach_stats()
            current_stats = session_stats.get(session_name, {})

        text = f"""ü§ñ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {session_name}</b>

üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –†–µ–∂–∏–º: {current_stats.get('mode', 'unknown')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if current_stats.get('is_blocked') else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –¢–∏–ø: {'üíé Premium' if current_stats.get('is_premium') else 'üì± –û–±—ã—á–Ω—ã–π'}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {current_stats.get('daily_sent', 0)}/{current_stats.get('daily_limit', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {current_stats.get('active_dialogs', 0)}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>"""

        if daily_stats:
            total_week = sum(stat.total for stat in daily_stats)
            successful_week = sum(stat.successful for stat in daily_stats)
            responses_week = sum(stat.responses for stat in daily_stats)

            text += f"""
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_week}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {successful_week} ({(successful_week / max(total_week, 1)) * 100:.1f}%)
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {responses_week} ({(responses_week / max(successful_week, 1)) * 100:.1f}%)

üìÖ <b>–ü–æ –¥–Ω—è–º:</b>"""

            for stat in daily_stats[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
                date_str = stat.date.strftime('%d.%m')
                success_rate = (stat.successful / max(stat.total, 1)) * 100
                text += f"\n‚Ä¢ {date_str}: {stat.total} ({success_rate:.0f}% –¥–æ—Å—Ç–∞–≤–∫–∞)"
        else:
            text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"

        text += f"\n\nüéØ <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_messages}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"session_settings_{session_name}"),
                    InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data=f"session_restart_{session_name}")
                ],
                [
                    InlineKeyboardButton(text="üìä –í—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="analytics_sessions"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@analytics_handlers_router.callback_query(F.data == "analytics_time")
async def analytics_time(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""

    try:
        async with get_db() as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            seven_days_ago = datetime.utcnow() - timedelta(days=7)

            hourly_stats_result = await db.execute(
                select(
                    func.extract('hour', OutreachMessage.sent_at).label('hour'),
                    func.count(OutreachMessage.id).label('total'),
                    func.count(
                        func.nullif(OutreachMessage.got_response != True, True)
                    ).label('responses')
                )
                .where(
                    OutreachMessage.sent_at >= seven_days_ago,
                    OutreachMessage.status == OutreachMessageStatus.SENT
                )
                .group_by(func.extract('hour', OutreachMessage.sent_at))
                .order_by(func.extract('hour', OutreachMessage.sent_at))
            )
            hourly_stats = hourly_stats_result.fetchall()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            weekday_stats_result = await db.execute(
                select(
                    func.extract('dow', OutreachMessage.sent_at).label('weekday'),
                    func.count(OutreachMessage.id).label('total'),
                    func.count(
                        func.nullif(OutreachMessage.got_response != True, True)
                    ).label('responses')
                )
                .where(
                    OutreachMessage.sent_at >= seven_days_ago,
                    OutreachMessage.status == OutreachMessageStatus.SENT
                )
                .group_by(func.extract('dow', OutreachMessage.sent_at))
                .order_by(func.extract('dow', OutreachMessage.sent_at))
            )
            weekday_stats = weekday_stats_result.fetchall()

        text = "‚è∞ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"

        if hourly_stats:
            text += "üïê <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:</b>\n"

            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —á–∞—Å—ã
            best_hours = []
            for stat in hourly_stats:
                hour = int(stat.hour)
                response_rate = (stat.responses / max(stat.total, 1)) * 100
                best_hours.append((hour, response_rate, stat.total))

            best_hours.sort(key=lambda x: x[1], reverse=True)

            for hour, response_rate, total in best_hours[:5]:
                text += f"‚Ä¢ {hour:02d}:00 - {response_rate:.1f}% –æ—Ç–≤–µ—Ç–æ–≤ ({total} –æ—Ç–ø—Ä–∞–≤–æ–∫)\n"

        if weekday_stats:
            text += "\nüìÖ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"

            weekday_names = {
                0: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", 1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫",
                3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞"
            }

            weekday_data = []
            for stat in weekday_stats:
                day_name = weekday_names.get(int(stat.weekday), "Unknown")
                response_rate = (stat.responses / max(stat.total, 1)) * 100
                weekday_data.append((day_name, response_rate, stat.total))

            weekday_data.sort(key=lambda x: x[1], reverse=True)

            for day_name, response_rate, total in weekday_data:
                text += f"‚Ä¢ {day_name}: {response_rate:.1f}% –æ—Ç–≤–µ—Ç–æ–≤ ({total} –æ—Ç–ø—Ä–∞–≤–æ–∫)\n"

        text += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        if hourly_stats:
            best_hour = max(hourly_stats, key=lambda x: (x.responses / max(x.total, 1)))
            text += f"‚Ä¢ –õ—É—á—à–∏–π —á–∞—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {int(best_hour.hour):02d}:00\n"

        if weekday_stats:
            best_day = max(weekday_stats, key=lambda x: (x.responses / max(x.total, 1)))
            day_name = weekday_names.get(int(best_day.weekday), "Unknown")
            text += f"‚Ä¢ –õ—É—á—à–∏–π –¥–µ–Ω—å: {day_name}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_time_detailed"),
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", callback_data="analytics_time_settings")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_time"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@analytics_handlers_router.callback_query(F.data == "analytics_detailed")
async def analytics_detailed(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ"""

    try:
        async with get_db() as db:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            now = datetime.utcnow()
            yesterday = now - timedelta(days=1)
            week_ago = now - timedelta(days=7)
            month_ago = now - timedelta(days=30)

            periods = {
                "24—á": yesterday,
                "7–¥": week_ago,
                "30–¥": month_ago
            }

            report_data = {}

            for period_name, start_date in periods.items():
                # –û–±—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                total_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(OutreachMessage.sent_at >= start_date)
                )
                total = total_result.scalar() or 0

                # –£—Å–ø–µ—à–Ω—ã–µ
                successful_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(
                        OutreachMessage.sent_at >= start_date,
                        OutreachMessage.status == OutreachMessageStatus.SENT
                    )
                )
                successful = successful_result.scalar() or 0

                # –û—Ç–≤–µ—Ç—ã
                responses_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(
                        OutreachMessage.sent_at >= start_date,
                        OutreachMessage.got_response == True
                    )
                )
                responses = responses_result.scalar() or 0

                # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
                conversions_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(
                        OutreachMessage.sent_at >= start_date,
                        OutreachMessage.converted == True
                    )
                )
                conversions = conversions_result.scalar() or 0

                report_data[period_name] = {
                    "total": total,
                    "successful": successful,
                    "responses": responses,
                    "conversions": conversions,
                    "delivery_rate": (successful / max(total, 1)) * 100,
                    "response_rate": (responses / max(successful, 1)) * 100,
                    "conversion_rate": (conversions / max(successful, 1)) * 100
                }

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
            active_campaigns_result = await db.execute(
                select(func.count(OutreachCampaign.id))
                .where(OutreachCampaign.status == "active")
            )
            active_campaigns = active_campaigns_result.scalar() or 0

            # –¢–æ–ø –æ—à–∏–±–∫–∏
            errors_result = await db.execute(
                select(
                    OutreachMessage.error_code,
                    func.count(OutreachMessage.id).label('count')
                )
                .where(
                    OutreachMessage.sent_at >= week_ago,
                    OutreachMessage.error_code.isnot(None)
                )
                .group_by(OutreachMessage.error_code)
                .order_by(desc(func.count(OutreachMessage.id)))
                .limit(5)
            )
            top_errors = errors_result.fetchall()

        text = f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã</b>

üöÄ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:</b> {active_campaigns}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>"""

        for period_name, data in report_data.items():
            text += f"""

üìÖ <b>–ó–∞ {period_name}:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['total']}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {data['successful']} ({data['delivery_rate']:.1f}%)
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {data['responses']} ({data['response_rate']:.1f}%)
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {data['conversions']} ({data['conversion_rate']:.1f}%)"""

        if top_errors:
            text += "\n\n‚ùå <b>–¢–æ–ø –æ—à–∏–±–æ–∫ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
            for error_code, count in top_errors:
                text += f"‚Ä¢ {error_code or 'Unknown'}: {count}\n"

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        if report_data["24—á"]["total"] > 0 and report_data["7–¥"]["total"] > 0:
            daily_avg_week = report_data["7–¥"]["total"] / 7
            daily_yesterday = report_data["24—á"]["total"]
            trend = "üìà" if daily_yesterday > daily_avg_week else "üìâ"
            text += f"\n\n{trend} <b>–¢—Ä–µ–Ω–¥:</b> "
            text += f"–í—á–µ—Ä–∞ {daily_yesterday} vs —Å—Ä–µ–¥–Ω–µ–µ {daily_avg_week:.1f}/–¥–µ–Ω—å"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="analytics_export_detailed"),
                    InlineKeyboardButton(text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email", callback_data="analytics_email_report")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_detailed"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")


@analytics_handlers_router.callback_query(F.data == "analytics_export")
async def analytics_export(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    try:
        text = """üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:

üîπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ CSV - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel
‚Ä¢ JSON - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

üîπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–æ–≤  
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä CSV –æ—Ç—á–µ—Ç", callback_data="analytics_export_csv"),
                    InlineKeyboardButton(text="üìã JSON –¥–∞–Ω–Ω—ã–µ", callback_data="analytics_export_json")
                ],
                [
                    InlineKeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="analytics_export_text"),
                    InlineKeyboardButton(text="üìß Email –æ—Ç—á–µ—Ç", callback_data="analytics_export_email")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")


@analytics_handlers_router.callback_query(F.data.startswith("analytics_export_"))
async def analytics_export_format(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""

    try:
        export_format = callback.data.split("_")[-1]

        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        text = f"""üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {export_format.upper()}</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.

–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
‚Ä¢ –î–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="analytics_detailed")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_export")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@analytics_handlers_router.callback_query(F.data == "analytics_personas")
async def analytics_personas(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º (–∑–∞–≥–ª—É—à–∫–∞)"""

    text = """üé≠ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä—Å–æ–Ω
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω—ã"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_analytics")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@analytics_handlers_router.callback_query(F.data.startswith("analytics_template_timeline_"))
async def analytics_template_timeline(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —à–∞–±–ª–æ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""

    template_id = callback.data.split("_")[-1]

    text = f"""üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ –¥–Ω—è–º</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ –¥–Ω—è–º:
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤  
‚Ä¢ –¢—Ä–µ–Ω–¥—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ö —à–∞–±–ª–æ–Ω—É", callback_data=f"analytics_template_detail_{template_id}")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="analytics_templates")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
