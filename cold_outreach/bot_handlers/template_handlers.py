# cold_outreach/bot_handlers/template_handlers.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from cold_outreach.templates.template_manager import template_manager
from loguru import logger

template_handlers_router = Router()


class TemplateStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    waiting_name = State()
    waiting_description = State()
    waiting_text = State()
    waiting_category = State()


@template_handlers_router.callback_query(F.data == "templates_create")
async def templates_create_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""

    text = """üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–º", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"

üí° –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_templates")
        ]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(TemplateStates.waiting_name)


@template_handlers_router.message(TemplateStates.waiting_name)
async def templates_create_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""

    template_name = message.text.strip()

    if not template_name or len(template_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(template_name=template_name)

    text = f"""üìù <b>–®–∞–±–ª–æ–Ω: "{template_name}"</b>

üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

–û–ø–∏—à–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Ü–µ–ª—å –∏ —Ç.–¥.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."""

    await message.answer(text)
    await state.set_state(TemplateStates.waiting_description)


@template_handlers_router.message(TemplateStates.waiting_description)
async def templates_create_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""

    description = message.text.strip() if message.text.strip() != "-" else None
    await state.update_data(description=description)

    text = """üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:

<b>üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
‚Ä¢ <code>{username}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ <code>{first_name}</code> - –∏–º—è
‚Ä¢ <code>{full_name}</code> - –ø–æ–ª–Ω–æ–µ –∏–º—è
‚Ä¢ <code>{date}</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
‚Ä¢ <code>{random_greeting}</code> - —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ <code>{random_emoji}</code> - —Å–ª—É—á–∞–π–Ω—ã–π emoji

<b>üìù –ü—Ä–∏–º–µ—Ä:</b>
<code>–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–£–≤–∏–¥–µ–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥—É–º–∞–ª - –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ç–µ–º–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç?

–°–∞–º –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò-–±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–ø–µ—á–∞—Ç–ª—è—é—Ç üìà

–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</code>"""

    await message.answer(text)
    await state.set_state(TemplateStates.waiting_text)


@template_handlers_router.message(TemplateStates.waiting_text)
async def templates_create_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞"""

    template_text = message.text.strip()

    if not template_text or len(template_text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
    validation = await template_manager.validate_template(template_text)

    if not validation["valid"]:
        error_text = "‚ùå <b>–û—à–∏–±–∫–∏ –≤ —à–∞–±–ª–æ–Ω–µ:</b>\n"
        for error in validation["errors"]:
            error_text += f"‚Ä¢ {error}\n"

        await message.answer(error_text)
        return

    await state.update_data(template_text=template_text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    warnings_text = ""
    if validation["warnings"]:
        warnings_text = "\n‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
        for warning in validation["warnings"]:
            warnings_text += f"‚Ä¢ {warning}\n"

    data = await state.get_data()

    text = f"""üìù <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['template_name']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}

üí¨ <b>–¢–µ–∫—Å—Ç:</b>
<pre>{template_text}</pre>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –î–ª–∏–Ω–∞: {validation['length']} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(validation['variables'])}
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(validation['variables']) if validation['variables'] else '–ù–µ—Ç'}

{warnings_text}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞:"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="template_cat_introduction"),
                InlineKeyboardButton(text="üíº –ë–∏–∑–Ω–µ—Å", callback_data="template_cat_business")
            ],
            [
                InlineKeyboardButton(text="üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data="template_cat_investment"),
                InlineKeyboardButton(text="üî• HYIP", callback_data="template_cat_hyip")
            ],
            [
                InlineKeyboardButton(text="üìù –û–±—â–∏–π", callback_data="template_cat_general"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="outreach_templates")
            ]
        ]
    )

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(TemplateStates.waiting_category)


@template_handlers_router.callback_query(F.data.startswith("template_cat_"), TemplateStates.waiting_category)
async def templates_create_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""

    category = callback.data.replace("template_cat_", "")

    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
    try:
        template_id = await template_manager.create_template(
            name=data["template_name"],
            text=data["template_text"],
            description=data["description"],
            category=category,
            created_by="telegram_bot"
        )

        if template_id:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
            preview = await template_manager.preview_substitution(
                data["template_text"],
                {"username": "example_user", "first_name": "–ò–≤–∞–Ω"}
            )

            text = f"""‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['template_name']}
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}
üÜî <b>ID:</b> {template_id}

üì± <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:</b>
<pre>{preview}</pre>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö —Ä–∞—Å—Å—ã–ª–∫–∏."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                            callback_data=f"campaigns_create_with_template_{template_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üìö –í—Å–µ —à–∞–±–ª–æ–Ω—ã", callback_data="templates_view_all"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_templates")
                    ]
                ]
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_templates")
                ]]
            )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")

    await state.clear()


@template_handlers_router.callback_query(F.data == "templates_view_all")
async def templates_view_all(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""

    try:
        templates_list = await template_manager.get_templates_list(limit=15)

        if not templates_list:
            text = "üìù <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\nüìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="templates_create")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_templates")
                    ]
                ]
            )
        else:
            text = f"üìù <b>–í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã ({len(templates_list)})</b>\n\n"

            keyboard_buttons = []

            for template in templates_list:
                status_emoji = "‚úÖ" if template['is_active'] else "‚ùå"
                text += f"{status_emoji} <b>{template['name']}</b>\n"
                text += f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category'] or '–û–±—â–∞—è'}\n"
                text += f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {template['usage_count']}\n"
                text += f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {template['conversion_rate']:.1f}%\n\n"

                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìù {template['name'][:20]}...",
                        callback_data=f"template_view_{template['id']}"
                    )
                ])

            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="templates_create"),
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="templates_stats")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="templates_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_templates")
                ]
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")


@template_handlers_router.callback_query(F.data.startswith("template_view_"))
async def template_view_specific(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""

    try:
        template_id = int(callback.data.split("_")[-1])

        template = await template_manager.get_template(template_id)
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        stats = await template_manager.get_template_stats(template_id)

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = await template_manager.preview_substitution(
            template.text,
            {"username": "example_user", "first_name": "–ò–≤–∞–Ω"}
        )

        text = f"""üìù <b>{template.name}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {template.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {template.category or '–û–±—â–∞—è'}

üí¨ <b>–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:</b>
<pre>{template.text}</pre>

üì± <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>
<pre>{preview}</pre>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['usage_count']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['total_sent']}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['successful_sent']} ({stats['delivery_rate']:.1f}%)
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {stats['response_count']} ({stats['response_rate']:.1f}%)

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {stats['created_at'].strftime('%d.%m.%Y %H:%M')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
                        callback_data=f"campaigns_create_with_template_{template_id}"
                    ),
                    InlineKeyboardButton(
                        text="üìä –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                        callback_data=f"template_suggestions_{template_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"template_duplicate_{template_id}"
                    ),
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"template_delete_{template_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üìö –í—Å–µ —à–∞–±–ª–æ–Ω—ã", callback_data="templates_view_all"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="outreach_templates")
                ]
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞")


@template_handlers_router.callback_query(F.data.startswith("template_suggestions_"))
async def template_suggestions(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞"""

    try:
        template_id = int(callback.data.split("_")[-1])

        suggestions = await template_manager.suggest_improvements(template_id)

        if not suggestions:
            text = "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é</b>\n\n‚úÖ –®–∞–±–ª–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        else:
            text = "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞:</b>\n\n"
            for i, suggestion in enumerate(suggestions, 1):
                text += f"{i}. {suggestion}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîô –ö —à–∞–±–ª–æ–Ω—É",
                    callback_data=f"template_view_{template_id}"
                )
            ]]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@template_handlers_router.message(lambda message: message.text == "/cancel")
async def cancel_template_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""

    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="outreach_templates")
            ]]
        )
    )