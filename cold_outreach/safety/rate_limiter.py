# cold_outreach/safety/rate_limiter.py

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from sqlalchemy import select, update
from dataclasses import dataclass

from storage.database import get_db
from storage.models.base import Session
from storage.models.cold_outreach import CampaignSessionAssignment
from loguru import logger


@dataclass
class SessionLimits:
    """–õ–∏–º–∏—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    daily_limit: int
    hourly_limit: int
    is_premium: bool
    current_daily_sent: int = 0
    current_hourly_sent: int = 0
    last_reset_date: Optional[datetime] = None
    last_reset_hour: Optional[int] = None


class RateLimiter:
    """–°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def __init__(self):
        self.session_limits: Dict[str, SessionLimits] = {}
        self.send_history: Dict[str, list] = {}  # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–µ—Å—Å–∏—è–º
        self.last_send_time: Dict[str, datetime] = {}

        # –ë–∞–∑–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
        self.base_limits = {
            "regular": {
                "daily": 5,
                "hourly": 2,
                "min_delay": 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            },
            "premium": {
                "daily": 20,
                "hourly": 8,
                "min_delay": 900  # 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            }
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤"""
        try:
            await self._load_session_limits()
            logger.info("‚úÖ RateLimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RateLimiter: {e}")
            raise

    async def _load_session_limits(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.status == "active")
                )
                sessions = result.scalars().all()

                for session in sessions:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Å—Å–∏–∏ (–æ–±—ã—á–Ω–∞—è –∏–ª–∏ –ø—Ä–µ–º–∏—É–º)
                    is_premium = await self._is_premium_session(session.session_name)

                    limits_config = self.base_limits["premium" if is_premium else "regular"]

                    self.session_limits[session.session_name] = SessionLimits(
                        daily_limit=limits_config["daily"],
                        hourly_limit=limits_config["hourly"],
                        is_premium=is_premium,
                        last_reset_date=datetime.now().date(),
                        last_reset_hour=datetime.now().hour
                    )

                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è {len(self.session_limits)} —Å–µ—Å—Å–∏–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Å–µ—Å—Å–∏–π: {e}")

    async def _is_premium_session(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Å—Å–∏—è –ø—Ä–µ–º–∏—É–º"""

        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º —Å–µ—Å—Å–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –≤ –ë–î, –∏–ª–∏ –≤–Ω–µ—à–Ω–µ–º—É API

            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            premium_keywords = ["premium", "pro", "vip", "plus"]
            return any(keyword in session_name.lower() for keyword in premium_keywords)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ {session_name}: {e}")
            return False

    async def can_send_message(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self._update_counters(session_name)

            limits = self.session_limits.get(session_name)
            if not limits:
                logger.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            if limits.current_daily_sent >= limits.daily_limit:
                logger.debug(
                    f"üö´ –°–µ—Å—Å–∏—è {session_name} –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({limits.current_daily_sent}/{limits.daily_limit})")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
            if limits.current_hourly_sent >= limits.hourly_limit:
                logger.debug(
                    f"üö´ –°–µ—Å—Å–∏—è {session_name} –¥–æ—Å—Ç–∏–≥–ª–∞ —á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({limits.current_hourly_sent}/{limits.hourly_limit})")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if not await self._check_min_delay(session_name):
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {session_name}: {e}")
            return False

    async def _update_counters(self, session_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        try:
            limits = self.session_limits.get(session_name)
            if not limits:
                return

            now = datetime.now()
            current_date = now.date()
            current_hour = now.hour

            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            if limits.last_reset_date != current_date:
                limits.current_daily_sent = 0
                limits.last_reset_date = current_date
                logger.debug(f"üîÑ –°–±—Ä–æ—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è {session_name}")

            # –°–±—Ä–æ—Å —á–∞—Å–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            if limits.last_reset_hour != current_hour:
                limits.current_hourly_sent = 0
                limits.last_reset_hour = current_hour
                logger.debug(f"üîÑ –°–±—Ä–æ—à–µ–Ω —á–∞—Å–æ–≤–æ–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è {session_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è {session_name}: {e}")

    async def _check_min_delay(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""

        try:
            last_send = self.last_send_time.get(session_name)
            if not last_send:
                return True

            limits = self.session_limits.get(session_name)
            if not limits:
                return True

            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            limits_config = self.base_limits["premium" if limits.is_premium else "regular"]
            min_delay = limits_config["min_delay"]

            time_since_last = (datetime.now() - last_send).total_seconds()

            if time_since_last < min_delay:
                logger.debug(f"‚è≥ –°–µ—Å—Å–∏—è {session_name} –¥–æ–ª–∂–Ω–∞ –∂–¥–∞—Ç—å –µ—â–µ {min_delay - time_since_last:.0f}—Å")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è {session_name}: {e}")
            return True

    async def record_message_sent(self, session_name: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            limits = self.session_limits.get(session_name)
            if not limits:
                logger.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            limits.current_daily_sent += 1
            limits.current_hourly_sent += 1

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_send_time[session_name] = datetime.now()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if session_name not in self.send_history:
                self.send_history[session_name] = []

            self.send_history[session_name].append(datetime.now())

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            if len(self.send_history[session_name]) > 100:
                self.send_history[session_name] = self.send_history[session_name][-100:]

            logger.debug(
                f"üìä –ó–∞–ø–∏—Å–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è {session_name}: {limits.current_daily_sent}/{limits.daily_limit} –∑–∞ –¥–µ–Ω—å")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {session_name}: {e}")

    async def get_session_load(self, session_name: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ (0.0-1.0)"""

        try:
            limits = self.session_limits.get(session_name)
            if not limits:
                return 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É
            daily_load = limits.current_daily_sent / limits.daily_limit

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ —á–∞—Å–æ–≤–æ–º—É –ª–∏–º–∏—Ç—É
            hourly_load = limits.current_hourly_sent / limits.hourly_limit

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
            return min(max(daily_load, hourly_load), 1.0)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {session_name}: {e}")
            return 1.0

    async def get_daily_sent_count(self, session_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å"""

        limits = self.session_limits.get(session_name)
        return limits.current_daily_sent if limits else 0

    async def get_daily_limit(self, session_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–µ—Å—Å–∏–∏"""

        limits = self.session_limits.get(session_name)
        return limits.daily_limit if limits else 0

    async def get_time_until_next_send(self, session_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            last_send = self.last_send_time.get(session_name)
            if last_send:
                limits = self.session_limits.get(session_name)
                if limits:
                    limits_config = self.base_limits["premium" if limits.is_premium else "regular"]
                    min_delay = limits_config["min_delay"]

                    time_since_last = (datetime.now() - last_send).total_seconds()
                    if time_since_last < min_delay:
                        return int(min_delay - time_since_last)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
            await self._update_counters(session_name)
            limits = self.session_limits.get(session_name)

            if limits and limits.current_hourly_sent >= limits.hourly_limit:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
                now = datetime.now()
                next_hour = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
                return int((next_hour - now).total_seconds())

            return 0  # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–π—á–∞—Å

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {session_name}: {e}")
            return 3600  # –ß–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def set_session_limits(
            self,
            session_name: str,
            daily_limit: int,
            hourly_limit: int,
            is_premium: bool = False
    ):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        try:
            self.session_limits[session_name] = SessionLimits(
                daily_limit=daily_limit,
                hourly_limit=hourly_limit,
                is_premium=is_premium,
                last_reset_date=datetime.now().date(),
                last_reset_hour=datetime.now().hour
            )

            logger.info(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è {session_name}: {daily_limit}/–¥–µ–Ω—å, {hourly_limit}/—á–∞—Å")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {session_name}: {e}")

    async def get_sessions_stats(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º"""

        try:
            stats = {}

            for session_name, limits in self.session_limits.items():
                await self._update_counters(session_name)

                stats[session_name] = {
                    "daily_sent": limits.current_daily_sent,
                    "daily_limit": limits.daily_limit,
                    "hourly_sent": limits.current_hourly_sent,
                    "hourly_limit": limits.hourly_limit,
                    "is_premium": limits.is_premium,
                    "load": await self.get_session_load(session_name),
                    "can_send": await self.can_send_message(session_name),
                    "next_send_in": await self.get_time_until_next_send(session_name),
                    "last_send": self.last_send_time.get(session_name)
                }

            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return {}

    async def reset_session_counters(self, session_name: str):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ (—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å)"""

        try:
            limits = self.session_limits.get(session_name)
            if limits:
                limits.current_daily_sent = 0
                limits.current_hourly_sent = 0

                if session_name in self.last_send_time:
                    del self.last_send_time[session_name]

                logger.info(f"üîÑ –°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è {session_name}: {e}")

    async def block_session_temporarily(self, session_name: str, duration_minutes: int):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏"""

        try:
            limits = self.session_limits.get(session_name)
            if limits:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ 0 –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                limits.daily_limit = 0
                limits.hourly_limit = 0

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                asyncio.create_task(
                    self._restore_session_after_delay(session_name, duration_minutes)
                )

                logger.warning(f"üö´ –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def _restore_session_after_delay(self, session_name: str, delay_minutes: int):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""

        try:
            await asyncio.sleep(delay_minutes * 60)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            is_premium = await self._is_premium_session(session_name)
            limits_config = self.base_limits["premium" if is_premium else "regular"]

            await self.set_session_limits(
                session_name=session_name,
                daily_limit=limits_config["daily"],
                hourly_limit=limits_config["hourly"],
                is_premium=is_premium
            )

            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–∏–º–∏—Ç–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
rate_limiter = RateLimiter()