# cold_outreach/safety/error_handler.py

import asyncio
import re
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from telethon.errors import (
    FloodWaitError, UserPrivacyRestrictedError, PeerFloodError,
    ChatWriteForbiddenError, UserBannedInChannelError, AuthKeyUnregisteredError
)
from sqlalchemy import select, update

from storage.database import get_db
from storage.models.cold_outreach import SpamBlockRecord, OutreachMessage, OutreachMessageStatus
from loguru import logger


class OutreachErrorHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def __init__(self):
        self.blocked_sessions: Dict[str, datetime] = {}
        self.flood_wait_sessions: Dict[str, datetime] = {}
        self.recovery_attempts: Dict[str, int] = {}

    async def handle_send_error(
            self,
            error: Exception,
            session_name: str,
            campaign_id: int,
            lead_id: int,
            message_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏"""

        try:
            error_info = {
                "error_type": type(error).__name__,
                "error_message": str(error),
                "session_name": session_name,
                "campaign_id": campaign_id,
                "lead_id": lead_id,
                "handled": False,
                "action": "none",
                "retry_after": None,
                "block_session": False
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if isinstance(error, FloodWaitError):
                error_info = await self._handle_flood_wait_error(error, session_name, error_info)

            elif isinstance(error, UserPrivacyRestrictedError):
                error_info = await self._handle_privacy_error(error, session_name, error_info)

            elif isinstance(error, PeerFloodError):
                error_info = await self._handle_peer_flood_error(error, session_name, error_info)

            elif isinstance(error, (ChatWriteForbiddenError, UserBannedInChannelError)):
                error_info = await self._handle_banned_error(error, session_name, error_info)

            elif isinstance(error, AuthKeyUnregisteredError):
                error_info = await self._handle_auth_error(error, session_name, error_info)

            else:
                error_info = await self._handle_unknown_error(error, session_name, error_info)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
            if message_id:
                await self._update_message_status(message_id, error_info)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if error_info.get("block_session"):
                await self._record_spam_block(session_name, error_info)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.warning(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {error_info['error_type']} –≤ —Å–µ—Å—Å–∏–∏ {session_name}: "
                f"{error_info['action']}"
            )

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")
            return {
                "error_type": "HandlerError",
                "error_message": str(e),
                "handled": False,
                "action": "critical_error"
            }

    async def _handle_flood_wait_error(
            self,
            error: FloodWaitError,
            session_name: str,
            error_info: Dict
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ FloodWaitError"""

        try:
            wait_seconds = error.seconds
            unblock_time = datetime.utcnow() + timedelta(seconds=wait_seconds)

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            self.flood_wait_sessions[session_name] = unblock_time

            error_info.update({
                "handled": True,
                "action": f"flood_wait_{wait_seconds}s",
                "retry_after": unblock_time,
                "block_session": True,
                "wait_seconds": wait_seconds
            })

            logger.warning(f"üö´ FloodWait –¥–ª—è {session_name}: {wait_seconds}—Å")

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ FloodWait: {e}")
            return error_info

    async def _handle_privacy_error(
            self,
            error: UserPrivacyRestrictedError,
            session_name: str,
            error_info: Dict
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        try:
            error_info.update({
                "handled": True,
                "action": "user_privacy_restricted",
                "block_session": False  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            })

            # –ü–æ–º–µ—á–∞–µ–º –ª–∏–¥–∞ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            await self._mark_lead_privacy_restricted(error_info["lead_id"])

            logger.info(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: –ª–∏–¥ {error_info['lead_id']}")

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ privacy error: {e}")
            return error_info

    async def _handle_peer_flood_error(
            self,
            error: PeerFloodError,
            session_name: str,
            error_info: Dict
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PeerFloodError (—Å–µ—Ä—å–µ–∑–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)"""

        try:
            # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
            block_duration = 24 * 3600  # 24 —á–∞—Å–∞
            unblock_time = datetime.utcnow() + timedelta(seconds=block_duration)

            self.blocked_sessions[session_name] = unblock_time

            error_info.update({
                "handled": True,
                "action": "peer_flood_block_24h",
                "retry_after": unblock_time,
                "block_session": True,
                "wait_seconds": block_duration
            })

            logger.error(f"üö® PeerFlood –¥–ª—è {session_name} - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 24—á")

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ spambot
            asyncio.create_task(
                self._schedule_spambot_recovery(session_name, delay_hours=2)
            )

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PeerFlood: {e}")
            return error_info

    async def _handle_banned_error(
            self,
            error: Exception,
            session_name: str,
            error_info: Dict
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–Ω–∞"""

        try:
            error_info.update({
                "handled": True,
                "action": "session_banned",
                "block_session": True,
                "wait_seconds": 7 * 24 * 3600  # 7 –¥–Ω–µ–π
            })

            logger.error(f"üî¥ –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–∞–Ω–µ–Ω–∞")

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ban error: {e}")
            return error_info

    async def _handle_auth_error(
            self,
            error: AuthKeyUnregisteredError,
            session_name: str,
            error_info: Dict
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

        try:
            error_info.update({
                "handled": True,
                "action": "auth_key_invalid",
                "block_session": True
            })

            logger.error(f"üîë –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {session_name}")

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ auth error: {e}")
            return error_info

    async def _handle_unknown_error(
            self,
            error: Exception,
            session_name: str,
            error_info: Dict
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""

        try:
            error_message = str(error).lower()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            if "flood" in error_message:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                wait_match = re.search(r'(\d+)', error_message)
                wait_seconds = int(wait_match.group(1)) if wait_match else 3600

                error_info.update({
                    "handled": True,
                    "action": f"unknown_flood_{wait_seconds}s",
                    "retry_after": datetime.utcnow() + timedelta(seconds=wait_seconds),
                    "block_session": True,
                    "wait_seconds": wait_seconds
                })

            elif "spam" in error_message:
                error_info.update({
                    "handled": True,
                    "action": "spam_detected",
                    "block_session": True,
                    "wait_seconds": 24 * 3600
                })

            else:
                error_info.update({
                    "handled": False,
                    "action": "unknown_error"
                })

            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {session_name}: {error}")

            return error_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ unknown error: {e}")
            return error_info

    async def _update_message_status(self, message_id: int, error_info: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""

        try:
            async with get_db() as db:
                status = OutreachMessageStatus.FAILED

                if error_info["error_type"] == "UserPrivacyRestrictedError":
                    status = OutreachMessageStatus.BLOCKED
                elif "flood" in error_info["action"]:
                    status = OutreachMessageStatus.FLOOD_WAIT

                await db.execute(
                    update(OutreachMessage)
                    .where(OutreachMessage.id == message_id)
                    .values(
                        status=status,
                        error_code=error_info["error_type"],
                        error_message=error_info["error_message"],
                        retry_count=OutreachMessage.retry_count + 1,
                        next_retry_at=error_info.get("retry_after")
                    )
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    async def _record_spam_block(self, session_name: str, error_info: Dict):
        """–ó–∞–ø–∏—Å—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –ë–î"""

        try:
            async with get_db() as db:
                block_record = SpamBlockRecord(
                    session_name=session_name,
                    block_type=error_info["error_type"],
                    error_message=error_info["error_message"],
                    wait_seconds=error_info.get("wait_seconds"),
                    unblock_at=error_info.get("retry_after"),
                    campaign_id=error_info.get("campaign_id")
                )

                db.add(block_record)
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è {session_name}: {e}")

    async def _mark_lead_privacy_restricted(self, lead_id: int):
        """–ü–æ–º–µ—Ç–∫–∞ –ª–∏–¥–∞ –∫–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–≤—à–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å"""

        try:
            async with get_db() as db:
                from storage.models.cold_outreach import OutreachLead

                await db.execute(
                    update(OutreachLead)
                    .where(OutreachLead.id == lead_id)
                    .values(
                        is_blocked=True,
                        block_reason="privacy_restricted"
                    )
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –ª–∏–¥–∞ {lead_id} –∫–∞–∫ privacy restricted: {e}")

    async def _schedule_spambot_recovery(self, session_name: str, delay_hours: int = 2):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ spambot"""

        try:
            await asyncio.sleep(delay_hours * 3600)

            logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {session_name} —á–µ—Ä–µ–∑ spambot...")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ /start –≤ @spambot
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            success = await self._attempt_spambot_recovery(session_name)

            if success:
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                if session_name in self.blocked_sessions:
                    del self.blocked_sessions[session_name]

                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ spambot")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {session_name} —á–µ—Ä–µ–∑ spambot")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ spambot –¥–ª—è {session_name}: {e}")

    async def _attempt_spambot_recovery(self, session_name: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ @spambot"""

        try:
            from core.integrations.telegram_client import telegram_session_manager

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /start –≤ @spambot –¥–≤–∞–∂–¥—ã
            for i in range(2):
                success = await telegram_session_manager.send_message(
                    session_name=session_name,
                    username="spambot",
                    message="/start"
                )

                if not success:
                    return False

                await asyncio.sleep(5)

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ spambot: {e}")
            return False

    async def is_session_blocked(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º flood wait
            if session_name in self.flood_wait_sessions:
                unblock_time = self.flood_wait_sessions[session_name]
                if datetime.utcnow() < unblock_time:
                    return True
                else:
                    # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —É–±–∏—Ä–∞–µ–º –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                    del self.flood_wait_sessions[session_name]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if session_name in self.blocked_sessions:
                unblock_time = self.blocked_sessions[session_name]
                if datetime.utcnow() < unblock_time:
                    return True
                else:
                    del self.blocked_sessions[session_name]

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {session_name}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    async def get_block_info(self, session_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏"""

        try:
            if session_name in self.flood_wait_sessions:
                unblock_time = self.flood_wait_sessions[session_name]
                if datetime.utcnow() < unblock_time:
                    return {
                        "type": "flood_wait",
                        "unblock_at": unblock_time,
                        "seconds_left": int((unblock_time - datetime.utcnow()).total_seconds())
                    }

            if session_name in self.blocked_sessions:
                unblock_time = self.blocked_sessions[session_name]
                if datetime.utcnow() < unblock_time:
                    return {
                        "type": "general_block",
                        "unblock_at": unblock_time,
                        "seconds_left": int((unblock_time - datetime.utcnow()).total_seconds())
                    }

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ {session_name}: {e}")
            return None

    async def unblock_session_manually(self, session_name: str) -> bool:
        """–†—É—á–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏"""

        try:
            removed = False

            if session_name in self.flood_wait_sessions:
                del self.flood_wait_sessions[session_name]
                removed = True

            if session_name in self.blocked_sessions:
                del self.blocked_sessions[session_name]
                removed = True

            if removed:
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é")

            return removed

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {session_name}: {e}")
            return False

    async def get_blocked_sessions_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""

        try:
            now = datetime.utcnow()

            flood_wait_active = {
                name: time for name, time in self.flood_wait_sessions.items()
                if time > now
            }

            blocked_active = {
                name: time for name, time in self.blocked_sessions.items()
                if time > now
            }

            return {
                "flood_wait_sessions": len(flood_wait_active),
                "blocked_sessions": len(blocked_active),
                "total_blocked": len(flood_wait_active) + len(blocked_active),
                "flood_wait_list": list(flood_wait_active.keys()),
                "blocked_list": list(blocked_active.keys())
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")
            return {
                "flood_wait_sessions": 0,
                "blocked_sessions": 0,
                "total_blocked": 0,
                "flood_wait_list": [],
                "blocked_list": []
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
error_handler = OutreachErrorHandler()