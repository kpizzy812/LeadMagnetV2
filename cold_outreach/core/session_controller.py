# cold_outreach/core/session_controller.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import asyncio
from datetime import datetime
from typing import Dict, Optional, Set, List, Any
from enum import Enum
from sqlalchemy import select, update

from storage.database import get_db
from storage.models.base import Session
from loguru import logger


class SessionMode(str, Enum):
    """–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã —Å–µ—Å—Å–∏–π"""
    RESPONSE = "response"  # –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ
    OUTREACH = "outreach"  # –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏


class SessionController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Å–µ—Å—Å–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.session_modes: Dict[str, SessionMode] = {}
        self.mode_change_locks: Dict[str, asyncio.Lock] = {}

        # –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        self.outreach_start_times: Dict[str, datetime] = {}
        self.outreach_end_times: Dict[str, datetime] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∂–∏–º—ã –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            async with get_db() as db:
                result = await db.execute(select(Session))
                sessions = result.scalars().all()

                for session in sessions:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–æ–≤
                    self.session_modes[session.session_name] = SessionMode.RESPONSE

            logger.info(f"‚úÖ SessionController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(self.session_modes)} —Å–µ—Å—Å–∏–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SessionController: {e}")
            raise

    async def switch_to_outreach_mode(self, session_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏
            if session_name not in self.mode_change_locks:
                self.mode_change_locks[session_name] = asyncio.Lock()

            async with self.mode_change_locks[session_name]:
                current_mode = self.session_modes.get(session_name, SessionMode.RESPONSE)

                if current_mode == SessionMode.OUTREACH:
                    logger.info(f"‚ÑπÔ∏è –°–µ—Å—Å–∏—è {session_name} —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
                    return True

                # –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
                self.outreach_start_times[session_name] = datetime.utcnow()

                # –û—Ç–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö
                await self._disconnect_from_message_handler(session_name)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
                self.session_modes[session_name] = SessionMode.OUTREACH

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                await self._update_session_metadata(session_name, {
                    "outreach_mode": True,
                    "outreach_started_at": self.outreach_start_times[session_name].isoformat()
                })

                logger.info(f"üì§ –°–µ—Å—Å–∏—è {session_name} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name} –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return False

    async def switch_to_response_mode(self, session_name: str, scan_missed: bool = True) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤

        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
            scan_missed: –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """

        try:
            if session_name not in self.mode_change_locks:
                self.mode_change_locks[session_name] = asyncio.Lock()

            async with self.mode_change_locks[session_name]:
                current_mode = self.session_modes.get(session_name, SessionMode.RESPONSE)

                if current_mode == SessionMode.RESPONSE:
                    logger.info(f"‚ÑπÔ∏è –°–µ—Å—Å–∏—è {session_name} —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–æ–≤")
                    return True

                # –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
                self.outreach_end_times[session_name] = datetime.utcnow()

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö
                await self._connect_to_message_handler(session_name)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
                self.session_modes[session_name] = SessionMode.RESPONSE

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                await self._update_session_metadata(session_name, {
                    "outreach_mode": False,
                    "outreach_ended_at": self.outreach_end_times[session_name].isoformat()
                })

                logger.info(f"üí¨ –°–µ—Å—Å–∏—è {session_name} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤")

                # –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if scan_missed and session_name in self.outreach_start_times:
                    await self._schedule_missed_messages_scan(session_name)

                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name} –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤: {e}")
            return False

    async def _schedule_missed_messages_scan(self, session_name: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        try:
            from cold_outreach.core.missed_messages_scanner import missed_messages_scanner

            outreach_start = self.outreach_start_times.get(session_name)
            outreach_end = self.outreach_end_times.get(session_name)

            if not outreach_start or not outreach_end:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {session_name}")
                return

            logger.info(f"üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 –º–∏–Ω—É—Ç—ã
            asyncio.create_task(
                missed_messages_scanner.schedule_scan_after_session_mode_switch(
                    session_name=session_name,
                    outreach_start_time=outreach_start,
                    delay_minutes=2
                )
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {session_name}: {e}")

    async def _disconnect_from_message_handler(self, session_name: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        try:
            from core.handlers.message_handler import message_handler

            # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            await message_handler.pause_session(session_name)

            logger.debug(f"üîå –°–µ—Å—Å–∏—è {session_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞ –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name} –æ—Ç message_handler: {e}")

    async def _connect_to_message_handler(self, session_name: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        try:
            from core.handlers.message_handler import message_handler

            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            await message_handler.resume_session(session_name)

            logger.debug(f"üîå –°–µ—Å—Å–∏—è {session_name} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤—Ö–æ–¥—è—â–∏—Ö")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name} –∫ message_handler: {e}")

    async def _update_session_metadata(self, session_name: str, metadata: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""

        try:
            async with get_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if session:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    current_metadata = session.proxy_config or {}
                    current_metadata.update(metadata)

                    await db.execute(
                        update(Session)
                        .where(Session.session_name == session_name)
                        .values(
                            proxy_config=current_metadata,
                            last_activity=datetime.utcnow()
                        )
                    )
                    await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def get_session_mode(self, session_name: str) -> SessionMode:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–µ—Å—Å–∏–∏"""
        return self.session_modes.get(session_name, SessionMode.RESPONSE)

    async def is_session_active(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                return session and session.status == "active"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return False

    async def get_sessions_by_mode(self, mode: SessionMode) -> Set[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã"""

        return {
            session_name for session_name, session_mode
            in self.session_modes.items()
            if session_mode == mode
        }

    async def get_outreach_sessions(self) -> Set[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        return await self.get_sessions_by_mode(SessionMode.OUTREACH)

    async def get_response_sessions(self) -> Set[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–æ–≤"""
        return await self.get_sessions_by_mode(SessionMode.RESPONSE)

    async def force_switch_all_to_response(self, scan_missed: bool = True):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤

        Args:
            scan_missed: –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        """

        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤")

        outreach_sessions = list(await self.get_outreach_sessions())

        if not outreach_sessions:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for session_name in outreach_sessions:
            tasks.append(
                self.switch_to_response_mode(session_name, scan_missed=scan_missed)
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        try:
            await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=30.0
            )
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π")

        logger.info("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤")

    async def get_session_mode_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º —Å–µ—Å—Å–∏–π"""

        stats = {mode.value: 0 for mode in SessionMode}

        for mode in self.session_modes.values():
            stats[mode.value] += 1

        return stats

    async def cleanup_inactive_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""

        try:
            active_sessions = set()

            async with get_db() as db:
                result = await db.execute(
                    select(Session.session_name).where(Session.status == "active")
                )
                active_sessions = {row[0] for row in result.fetchall()}

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–∞–º—è—Ç–∏
            inactive_sessions = set(self.session_modes.keys()) - active_sessions

            for session_name in inactive_sessions:
                del self.session_modes[session_name]
                if session_name in self.mode_change_locks:
                    del self.mode_change_locks[session_name]
                # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                self.outreach_start_times.pop(session_name, None)
                self.outreach_end_times.pop(session_name, None)

            if inactive_sessions:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_sessions)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

    async def get_session_outreach_metadata(self, session_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        try:
            metadata = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            if session_name in self.outreach_start_times:
                metadata["outreach_start_time"] = self.outreach_start_times[session_name].isoformat()

            if session_name in self.outreach_end_times:
                metadata["outreach_end_time"] = self.outreach_end_times[session_name].isoformat()

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if session and session.proxy_config:
                    db_metadata = {
                        key: value for key, value in session.proxy_config.items()
                        if key.startswith('outreach_')
                    }
                    metadata.update(db_metadata)

            return metadata

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {session_name}: {e}")
            return {}

    def get_all_session_modes(self) -> Dict[str, SessionMode]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Å–µ—Å—Å–∏–π"""
        return self.session_modes.copy()

    # –ù–û–í–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    async def bulk_scan_missed_messages_for_campaign(self, session_names: List[str]) -> Dict[str, Any]:
        """–ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""

        try:
            from cold_outreach.core.missed_messages_scanner import missed_messages_scanner

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            campaign_start = None
            campaign_end = None

            for session_name in session_names:
                if session_name in self.outreach_start_times:
                    start_time = self.outreach_start_times[session_name]
                    if campaign_start is None or start_time < campaign_start:
                        campaign_start = start_time

                if session_name in self.outreach_end_times:
                    end_time = self.outreach_end_times[session_name]
                    if campaign_end is None or end_time > campaign_end:
                        campaign_end = end_time

            if not campaign_start or not campaign_end:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return {"status": "error", "reason": "no_campaign_times"}

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            return await missed_messages_scanner.bulk_scan_after_outreach_campaign(
                session_names=session_names,
                campaign_start_time=campaign_start,
                campaign_end_time=campaign_end
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {"status": "error", "reason": str(e)}

    def get_outreach_times_for_session(self, session_name: str) -> Dict[str, Optional[datetime]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        return {
            "start_time": self.outreach_start_times.get(session_name),
            "end_time": self.outreach_end_times.get(session_name)
        }

    async def reset_session_outreach_times(self, session_name: str):
        """–°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        self.outreach_start_times.pop(session_name, None)
        self.outreach_end_times.pop(session_name, None)

        logger.info(f"üîÑ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
session_controller = SessionController()