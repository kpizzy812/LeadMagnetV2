# cold_outreach/core/missed_messages_scanner.py

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Any
from telethon import TelegramClient
from telethon.tl.types import User, PeerUser, Dialog
from telethon.tl.functions.messages import GetHistoryRequest

from storage.database import get_db
from storage.models.base import Conversation, Lead, Session
from core.engine.conversation_manager import conversation_manager
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger


class MissedMessagesScanner:
    """–°–∫–∞–Ω–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def __init__(self):
        self.scanning_sessions: Set[str] = set()
        self.last_scan_times: Dict[str, datetime] = {}

    async def scan_missed_messages_for_session(
            self,
            session_name: str,
            outreach_start_time: datetime,
            outreach_end_time: datetime
    ) -> Dict[str, Any]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
            outreach_start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
            outreach_end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """

        if session_name in self.scanning_sessions:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_name} —É–∂–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è")
            return {"status": "already_scanning"}

        self.scanning_sessions.add(session_name)

        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name}")

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å–µ—Å—Å–∏–∏
            client = await telegram_session_manager.get_client(session_name)
            if not client:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {session_name}")
                return {"status": "error", "reason": "client_not_available"}

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            dialogs = await client.get_dialogs()

            results = {
                "status": "completed",
                "session_name": session_name,
                "scan_period": {
                    "start": outreach_start_time.isoformat(),
                    "end": outreach_end_time.isoformat()
                },
                "found_messages": 0,
                "processed_chats": 0,
                "new_conversations": 0,
                "resumed_conversations": 0,
                "errors": []
            }

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
            for dialog in dialogs:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã –∏ –±–æ—Ç–æ–≤
                    if not isinstance(dialog.entity, User) or dialog.entity.bot:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º username
                    username = dialog.entity.username
                    if not username:
                        username = str(dialog.entity.id)

                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏
                    messages = await self._get_messages_in_period(
                        client, dialog, outreach_start_time, outreach_end_time
                    )

                    results["processed_chats"] += 1

                    if messages:
                        logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(messages)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç @{username}")
                        results["found_messages"] += len(messages)

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for message in messages:
                            await self._process_missed_message(
                                session_name, username, message, results
                            )

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å {getattr(dialog.entity, 'username', 'unknown')}: {str(e)}"
                    logger.error(f"‚ùå {error_msg}")
                    results["errors"].append(error_msg)

            logger.info(
                f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {session_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
                f"{results['found_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                f"{results['new_conversations']} –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"
            )

            return results

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_name}: {e}")
            return {
                "status": "error",
                "reason": str(e),
                "session_name": session_name
            }

        finally:
            self.scanning_sessions.discard(session_name)
            self.last_scan_times[session_name] = datetime.utcnow()

    async def _get_messages_in_period(
            self,
            client: TelegramClient,
            dialog: Dialog,
            start_time: datetime,
            end_time: datetime,
            limit: int = 100
    ) -> List:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            history = await client(GetHistoryRequest(
                peer=dialog.entity,
                offset_date=end_time,
                offset_id=0,
                add_offset=0,
                limit=limit,
                max_id=0,
                min_id=0,
                hash=0
            ))

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            relevant_messages = []

            for message in history.messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
                if not (start_time <= message.date <= end_time):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç –Ω–∞—Å)
                if message.from_id and message.from_id.user_id == dialog.entity.id:
                    relevant_messages.append(message)

            return relevant_messages

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {dialog.entity.username}: {e}")
            return []

    async def _process_missed_message(
            self,
            session_name: str,
            username: str,
            message,
            results: Dict[str, Any]
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
            conversation = await conversation_manager.get_conversation(
                lead_username=username,
                session_name=session_name,
                create_if_not_exists=True
            )

            if not conversation:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è {username}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            if conversation.messages_count == 0:
                results["new_conversations"] += 1
                logger.info(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å @{username}")
            else:
                results["resumed_conversations"] += 1
                logger.info(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ª–æ–≥ —Å @{username}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            message_text = message.message or ""

            if message_text.strip():
                response = await conversation_manager.process_user_message(
                    conversation_id=conversation.id,
                    message_text=message_text
                )

                if response:
                    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{username}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    success = await telegram_session_manager.send_message(
                        session_name=session_name,
                        username=username,
                        message=response
                    )

                    if success:
                        logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {session_name} ‚Üí @{username}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {session_name} ‚Üí @{username}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{username}: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            results["errors"].append(error_msg)

    async def bulk_scan_after_outreach_campaign(
            self,
            session_names: List[str],
            campaign_start_time: datetime,
            campaign_end_time: datetime
    ) -> Dict[str, Any]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–∞–º–ø–∞–Ω–∏–∏
        """

        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(session_names)} —Å–µ—Å—Å–∏–π")

        overall_results = {
            "total_sessions": len(session_names),
            "successful_scans": 0,
            "failed_scans": 0,
            "total_messages_found": 0,
            "total_new_conversations": 0,
            "session_results": {},
            "started_at": datetime.utcnow().isoformat()
        }

        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ—Å—Å–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

        async def scan_session_with_semaphore(session_name: str):
            async with semaphore:
                try:
                    result = await self.scan_missed_messages_for_session(
                        session_name, campaign_start_time, campaign_end_time
                    )

                    overall_results["session_results"][session_name] = result

                    if result["status"] == "completed":
                        overall_results["successful_scans"] += 1
                        overall_results["total_messages_found"] += result["found_messages"]
                        overall_results["total_new_conversations"] += result["new_conversations"]
                    else:
                        overall_results["failed_scans"] += 1

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_name}: {e}")
                    overall_results["failed_scans"] += 1
                    overall_results["session_results"][session_name] = {
                        "status": "error",
                        "reason": str(e)
                    }

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
        tasks = [scan_session_with_semaphore(session_name) for session_name in session_names]
        await asyncio.gather(*tasks, return_exceptions=True)

        overall_results["completed_at"] = datetime.utcnow().isoformat()

        logger.info(
            f"‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
            f"{overall_results['successful_scans']}/{overall_results['total_sessions']} —É—Å–ø–µ—à–Ω–æ, "
            f"{overall_results['total_messages_found']} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ"
        )

        return overall_results

    async def schedule_scan_after_session_mode_switch(
            self,
            session_name: str,
            outreach_start_time: datetime,
            delay_minutes: int = 5
    ):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–µ—Å—Å–∏–∏
        """

        logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {session_name} —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç")

        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(delay_minutes * 60)

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        outreach_end_time = datetime.utcnow()

        result = await self.scan_missed_messages_for_session(
            session_name, outreach_start_time, outreach_end_time
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if result.get("found_messages", 0) > 0:
            await self._notify_admins_about_missed_messages(session_name, result)

        return result

    async def _notify_admins_about_missed_messages(
            self,
            session_name: str,
            scan_result: Dict[str, Any]
    ):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""

        try:
            from bot.main import bot_manager

            found_messages = scan_result.get("found_messages", 0)
            new_conversations = scan_result.get("new_conversations", 0)
            resumed_conversations = scan_result.get("resumed_conversations", 0)

            text = f"""üì® <b>–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>

ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {session_name}
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {found_messages}
‚Ä¢ –ù–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {new_conversations}
‚Ä¢ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {resumed_conversations}

üîÑ <b>–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã</b>
–ò–ò –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""

            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üí¨ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥–∏",
                        callback_data="dialogs_list"
                    )
                ]]
            )

            await bot_manager.broadcast_to_admins(text, keyboard)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")

    def get_scanning_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""

        return {
            "currently_scanning": list(self.scanning_sessions),
            "scanning_count": len(self.scanning_sessions),
            "last_scan_times": {
                session: time.isoformat()
                for session, time in self.last_scan_times.items()
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
missed_messages_scanner = MissedMessagesScanner()