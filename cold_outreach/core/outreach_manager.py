# cold_outreach/core/outreach_manager.py

import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Any
from sqlalchemy import select, func

from storage.database import get_db
from storage.models.cold_outreach import OutreachCampaign, CampaignStatus
from storage.models.base import Session, SessionStatus
from cold_outreach.core.session_controller import SessionController
from cold_outreach.safety.rate_limiter import RateLimiter
from cold_outreach.safety.error_handler import OutreachErrorHandler
from cold_outreach.campaigns.campaign_manager import campaign_manager
from loguru import logger
from cold_outreach.core.message_sender import message_sender


class OutreachManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def __init__(self):
        self.session_controller = SessionController()
        self.rate_limiter = RateLimiter()
        self.error_handler = OutreachErrorHandler()
        self.is_running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            await self.session_controller.initialize()
            await self.rate_limiter.initialize()

            logger.info("‚úÖ OutreachManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OutreachManager: {e}")
            raise

    async def start_campaign(self, campaign_id: int) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""

        try:

            campaign = await campaign_manager.get_campaign(campaign_id)
            if not campaign:
                logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
            validation = await campaign_manager.validate_campaign(campaign)
            if not validation["valid"]:
                logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation['errors']}")
                return False

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
            session_names = await campaign_manager.get_campaign_sessions(campaign_id)

            for session_name in session_names:
                await self.session_controller.switch_to_outreach_mode(session_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
            await campaign_manager.update_campaign_status(campaign_id, CampaignStatus.ACTIVE.value)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
            asyncio.create_task(self._process_campaign(campaign_id))

            logger.info(f"üöÄ –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –∑–∞–ø—É—â–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            return False

    async def stop_campaign(self, campaign_id: int) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            from cold_outreach.campaigns.campaign_manager import campaign_manager

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏
            session_names = await campaign_manager.get_campaign_sessions(campaign_id)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –° —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
            for session_name in session_names:
                await self.session_controller.switch_to_response_mode(session_name, scan_missed=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await campaign_manager.update_campaign_status(campaign_id, CampaignStatus.PAUSED)

            logger.info(f"‚è∏Ô∏è –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            return False

    async def _process_campaign(self, campaign_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ñ–æ–Ω–µ"""
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
                campaign = await self.campaign_manager.get_campaign(campaign_id)

                if not campaign or campaign.status != CampaignStatus.ACTIVE:
                    logger.info(f"üõë –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    break

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MessageSender –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—á–∫–∏
                from cold_outreach.core.message_sender import message_sender

                batch_result = await message_sender.send_campaign_batch(
                    campaign_id=campaign_id,
                    batch_size=5
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if batch_result.get("status") == "no_more_leads":
                    logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ—Ç –ª–∏–¥–æ–≤")
                    await self.campaign_manager.finalize_campaign(campaign_id)
                    break

                if "error" in batch_result:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {batch_result['error']}")
                    break

                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                batch_info = batch_result.get("batch_results", {})
                successful = batch_info.get("successful_sends", 0)
                failed = batch_info.get("failed_sends", 0)

                logger.info(f"üìä –ü–∞—á–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –Ω–µ—É–¥–∞—á–Ω–æ")

                # –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
                if batch_info.get("rate_limited", 0) == batch_info.get("total_leads", 0):
                    logger.warning(f"‚è≥ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}, –ø–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç")
                    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
                    continue

                # –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
                await asyncio.sleep(60)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –∫–∞–∫ failed
            try:
                await self.campaign_manager.update_campaign_status(campaign_id, CampaignStatus.FAILED)
            except:
                pass

    # async def _process_lead_in_campaign(self, campaign_id: int, lead_data: Dict):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞ –≤ –∫–∞–º–ø–∞–Ω–∏–∏"""
    #
    #     try:
    #         # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é
    #         session_names = await self.campaign_manager.get_campaign_sessions(campaign_id)
    #
    #         available_session = None
    #         for session_name in session_names:
    #             if await self.rate_limiter.can_send_message(session_name):
    #                 if not await self.error_handler.is_session_blocked(session_name):
    #                     available_session = session_name
    #                     break
    #
    #         if not available_session:
    #             logger.info(f"‚è≥ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ª–∏–¥–∞ {lead_data['username']}")
    #             return
    #
    #         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    #         message_text = await self.campaign_manager.generate_message_for_lead(campaign_id, lead_data)
    #
    #         if not message_text:
    #             logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏–¥–∞ {lead_data['username']}")
    #             return
    #
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    #         from core.integrations.telegram_client import telegram_session_manager
    #
    #         success = await telegram_session_manager.send_message(
    #             session_name=available_session,
    #             username=lead_data["username"],
    #             message=message_text
    #         )
    #
    #         if success:
    #             # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    #             await self.campaign_manager.record_message_sent(
    #                 campaign_id, lead_data["id"], available_session, message_text
    #             )
    #
    #             # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
    #             await self.rate_limiter.record_message_sent(available_session)
    #
    #             logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {available_session} ‚Üí {lead_data['username']}")
    #
    #         else:
    #             # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É
    #             await self.campaign_manager.record_message_failed(
    #                 campaign_id, lead_data["id"], available_session
    #             )
    #
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ {lead_data.get('username', 'unknown')}: {e}")

    async def get_active_campaigns(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(OutreachCampaign)
                    .where(OutreachCampaign.status == CampaignStatus.ACTIVE)
                    .order_by(OutreachCampaign.created_at.desc())
                )
                campaigns = result.scalars().all()

                return [
                    await self.campaign_manager.get_campaign_progress(campaign.id)
                    for campaign in campaigns
                ]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {e}")
            return []

    async def get_session_outreach_stats(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç rate limiter
            rate_stats = await self.rate_limiter.get_sessions_stats()

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º—ã —Å–µ—Å—Å–∏–π
            session_modes = self.session_controller.get_all_session_modes()

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_stats = {}

            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.status == SessionStatus.ACTIVE)
                )
                sessions = result.scalars().all()

                for session in sessions:
                    session_name = session.session_name

                    combined_stats[session_name] = {
                        "mode": session_modes.get(session_name, "response").value,
                        "can_send": rate_stats.get(session_name, {}).get("can_send", False),
                        "daily_sent": rate_stats.get(session_name, {}).get("daily_sent", 0),
                        "daily_limit": rate_stats.get(session_name, {}).get("daily_limit", 0),
                        "is_blocked": await self.error_handler.is_session_blocked(session_name),
                        "is_premium": rate_stats.get(session_name, {}).get("is_premium", False)
                    }

            return combined_stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return {}

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤
            await self.session_controller.force_switch_all_to_response()

            logger.info("‚úÖ OutreachManager –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è OutreachManager: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
outreach_manager = OutreachManager()