# cold_outreach/templates/ai_uniquifier.py

import hashlib
from typing import Dict, List, Optional, Any
from core.integrations.openai_client import openai_client
from loguru import logger


class AIUniquifier:
    """–ò–ò —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""

    def __init__(self):
        self.uniquification_cache: Dict[str, str] = {}
        self.max_cache_size = 1000

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Uniquifier"""
        logger.info("‚úÖ AIUniquifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def uniquify_message(
            self,
            message_text: str,
            level: str = "medium",
            lead_data: Dict[str, Any] = None
    ) -> str:
        """–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = self._get_cache_key(message_text, level)
            if cache_key in self.uniquification_cache:
                logger.debug("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏")
                return self.uniquification_cache[cache_key]

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            unique_message = await self._generate_unique_variant(
                message_text, level, lead_data
            )

            if unique_message and unique_message != message_text:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._add_to_cache(cache_key, unique_message)
                logger.debug(f"‚ú® –°–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (—É—Ä–æ–≤–µ–Ω—å: {level})")
                return unique_message
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return message_text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return message_text

    async def _generate_unique_variant(
            self,
            message_text: str,
            level: str,
            lead_data: Dict[str, Any] = None
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
            system_prompt = self._get_system_prompt(level)
            user_prompt = self._build_user_prompt(message_text, level, lead_data)

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await openai_client.generate_response(
                messages=messages,
                temperature=0.7,  # –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                max_tokens=800
            )

            if response:
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
                cleaned_response = self._clean_response(response)
                return cleaned_response

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
            return None

    def _get_system_prompt(self, level: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""

        base_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö–æ–ª–æ–¥–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ Telegram. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –µ–≥–æ —Å–º—ã—Å–ª –∏ —Ü–µ–ª—å, –Ω–æ –∏–∑–º–µ–Ω–∏–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Ä–µ–∞–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ù–ï –º–µ–Ω—è–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö {variable}
- –ù–ï –¥–µ–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º
- –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π"""

        level_instructions = {
            "light": """
–£–†–û–í–ï–ù–¨ –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–Å–ì–ö–ò–ô
- –ò–∑–º–µ–Ω–∏ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
- –ó–∞–º–µ–Ω–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
- –î–æ–±–∞–≤—å/—É–±–µ—Ä–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è""",

            "medium": """
–£–†–û–í–ï–ù–¨ –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–†–ï–î–ù–ò–ô  
- –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª
- –ò–∑–º–µ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–π –∂–µ –∏–¥–µ–∏
- –ú–æ–∂–µ—à—å —Å–ª–µ–≥–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–Ω (–Ω–æ –æ—Å—Ç–∞–≤—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º)""",

            "heavy": """
–£–†–û–í–ï–ù–¨ –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–ò–õ–¨–ù–´–ô
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ò–∑–º–µ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø–æ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–±–µ–∂–¥–µ–Ω–∏—é
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å –∏ —Ü–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        }

        return base_prompt + "\n\n" + level_instructions.get(level, level_instructions["medium"])

    def _build_user_prompt(
            self,
            message_text: str,
            level: str,
            lead_data: Dict[str, Any] = None
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""

        prompt = f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message_text}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ª–∏–¥–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if lead_data:
            context_parts = []

            if lead_data.get("username"):
                context_parts.append(f"–ø–æ–ª—É—á–∞—Ç–µ–ª—å: @{lead_data['username']}")

            if lead_data.get("first_name"):
                context_parts.append(f"–∏–º—è: {lead_data['first_name']}")

            if context_parts:
                prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {', '.join(context_parts)}"

        return prompt

    def _clean_response(self, response: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""

        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
            cleaned = response.strip()

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∏
            if cleaned.startswith('"') and cleaned.endswith('"'):
                cleaned = cleaned[1:-1]

            if cleaned.startswith("'") and cleaned.endswith("'"):
                cleaned = cleaned[1:-1]

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ò–ò
            lines = cleaned.split('\n')
            content_lines = []

            for line in lines:
                line = line.strip()

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
                if any(phrase in line.lower() for phrase in [
                    "–≤–æ—Ç –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
                    "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                ]):
                    continue

                if line:
                    content_lines.append(line)

            return '\n'.join(content_lines)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return response

    def _get_cache_key(self, message_text: str, level: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞"""

        try:
            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –æ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω—è
            content = f"{message_text}|{level}"
            return hashlib.md5(content.encode()).hexdigest()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞: {e}")
            return f"{len(message_text)}_{level}"

    def _add_to_cache(self, cache_key: str, unique_message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫—ç—à —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.uniquification_cache) >= self.max_cache_size:
                # –£–¥–∞–ª—è–µ–º 20% —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                items_to_remove = self.max_cache_size // 5
                keys_to_remove = list(self.uniquification_cache.keys())[:items_to_remove]

                for key in keys_to_remove:
                    del self.uniquification_cache[key]

            self.uniquification_cache[cache_key] = unique_message

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à: {e}")

    async def generate_multiple_variants(
            self,
            message_text: str,
            count: int = 3,
            level: str = "medium"
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            variants = []

            for i in range(count):
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                variant_prompt = f"–í–∞—Ä–∏–∞–Ω—Ç #{i + 1}. " if i > 0 else ""

                # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –∫—ç—à –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                temp_message = f"{variant_prompt}{message_text}"

                variant = await self.uniquify_message(temp_message, level)

                # –£–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                if variant.startswith(variant_prompt):
                    variant = variant[len(variant_prompt):]

                if variant and variant not in variants:
                    variants.append(variant)

            return variants

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")
            return [message_text]

    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""

        try:
            return {
                "cache_size": len(self.uniquification_cache),
                "max_cache_size": self.max_cache_size,
                "cache_usage_percent": (len(self.uniquification_cache) / self.max_cache_size) * 100
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            return {"cache_size": 0, "max_cache_size": 0, "cache_usage_percent": 0}

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""

        try:
            self.uniquification_cache.clear()
            logger.info("üßπ –ö—ç—à —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

    async def test_uniquification(self, message_text: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""

        try:
            test_results = {
                "original": message_text,
                "variants": {},
                "success": True,
                "errors": []
            }

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            for level in ["light", "medium", "heavy"]:
                try:
                    variant = await self.uniquify_message(message_text, level)
                    test_results["variants"][level] = variant

                except Exception as e:
                    test_results["errors"].append(f"–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è {level}: {str(e)}")
                    test_results["success"] = False

            return test_results

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                "original": message_text,
                "variants": {},
                "success": False,
                "errors": [str(e)]
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
ai_uniquifier = AIUniquifier()