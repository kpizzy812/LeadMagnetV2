# cold_outreach/templates/variable_parser.py

import re
from datetime import datetime
from typing import Dict, List, Any, Optional
from loguru import logger


class VariableParser:
    """–ü–∞—Ä—Å–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {variable_name}
        self.variable_pattern = re.compile(r'\{([a-zA-Z_][a-zA-Z0-9_]*)\}')

        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
        self.built_in_variables = {
            "username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–±–µ–∑ @)",
            "first_name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "last_name": "–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "full_name": "–ü–æ–ª–Ω–æ–µ –∏–º—è (–∏–º—è + —Ñ–∞–º–∏–ª–∏—è)",
            "date": "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
            "time": "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            "day_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏",
            "month_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞",
            "random_greeting": "–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "random_emoji": "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π emoji"
        }

        # –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.random_greetings = [
            "–ü—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫",
            "–•–∞–π", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"
        ]

        self.random_emojis = [
            "üëã", "üòä", "üöÄ", "üíé", "‚≠ê", "üî•", "üí™", "üéØ", "‚ú®", "üìà"
        ]

        self.day_names = {
            0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–≤—Ç–æ—Ä–Ω–∏–∫", 2: "—Å—Ä–µ–¥–∞", 3: "—á–µ—Ç–≤–µ—Ä–≥",
            4: "–ø—è—Ç–Ω–∏—Ü–∞", 5: "—Å—É–±–±–æ—Ç–∞", 6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        self.month_names = {
            1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
            5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
            9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("‚úÖ VariableParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def extract_variables(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞"""

        try:
            matches = self.variable_pattern.findall(text)
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            variables = sorted(list(set(matches)))

            logger.debug(f"üìù –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {variables}")
            return variables

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return []

    async def substitute_variables(self, text: str, lead_data: Dict[str, Any]) -> str:
        """–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç"""

        try:
            result_text = text

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
            variables = self.extract_variables(text)

            for var in variables:
                placeholder = f"{{{var}}}"
                value = await self._get_variable_value(var, lead_data)

                if value is not None:
                    result_text = result_text.replace(placeholder, str(value))
                    logger.debug(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–∞ '{value}'")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {var}")
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    default_value = self._get_default_value(var)
                    if default_value:
                        result_text = result_text.replace(placeholder, default_value)

            return result_text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    async def _get_variable_value(self, variable_name: str, lead_data: Dict[str, Any]) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
            if variable_name in lead_data and lead_data[variable_name]:
                return str(lead_data[variable_name])

            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if variable_name == "date":
                return datetime.now().strftime("%d.%m.%Y")

            elif variable_name == "time":
                return datetime.now().strftime("%H:%M")

            elif variable_name == "day_name":
                day_num = datetime.now().weekday()
                return self.day_names.get(day_num, "")

            elif variable_name == "month_name":
                month_num = datetime.now().month
                return self.month_names.get(month_num, "")

            elif variable_name == "random_greeting":
                import random
                return random.choice(self.random_greetings)

            elif variable_name == "random_emoji":
                import random
                return random.choice(self.random_emojis)

            elif variable_name == "full_name":
                # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
                first_name = lead_data.get("first_name", "")
                last_name = lead_data.get("last_name", "")

                if first_name and last_name:
                    return f"{first_name} {last_name}"
                elif first_name:
                    return first_name
                elif last_name:
                    return last_name
                else:
                    return lead_data.get("username", "–¥—Ä—É–≥")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            elif variable_name == "greeting_with_name":
                greeting = await self._get_variable_value("random_greeting", lead_data)
                name = lead_data.get("first_name") or lead_data.get("username", "–¥—Ä—É–≥")
                return f"{greeting}, {name}"

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {variable_name}: {e}")
            return None

    def _get_default_value(self, variable_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""

        defaults = {
            "username": "–¥—Ä—É–≥",
            "first_name": "–¥—Ä—É–≥",
            "last_name": "",
            "full_name": "–¥—Ä—É–≥",
            "random_greeting": "–ü—Ä–∏–≤–µ—Ç",
            "random_emoji": "üëã"
        }

        return defaults.get(variable_name)

    def validate_variables(self, text: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ"""

        try:
            variables = self.extract_variables(text)

            validation_result = {
                "valid": True,
                "errors": [],
                "warnings": [],
                "variables": variables,
                "unknown_variables": [],
                "built_in_variables": []
            }

            for var in variables:
                if var in self.built_in_variables:
                    validation_result["built_in_variables"].append(var)
                elif var not in ["username", "first_name", "last_name", "full_name", "user_id"]:
                    validation_result["unknown_variables"].append(var)
                    validation_result["warnings"].append(
                        f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{var}' - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞"
                    )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            if "username" not in variables and "first_name" not in variables:
                validation_result["warnings"].append(
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Å {username} –∏–ª–∏ {first_name}"
                )

            return validation_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return {
                "valid": False,
                "errors": [f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"],
                "warnings": [],
                "variables": [],
                "unknown_variables": [],
                "built_in_variables": []
            }

    def get_available_variables(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""

        return self.built_in_variables.copy()

    def preview_substitution(self, text: str, sample_data: Dict[str, Any] = None) -> str:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

        try:
            if sample_data is None:
                sample_data = {
                    "username": "ivan_petrov",
                    "first_name": "–ò–≤–∞–Ω",
                    "last_name": "–ü–µ—Ç—Ä–æ–≤",
                    "user_id": "123456789"
                }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            import asyncio
            return asyncio.run(self.substitute_variables(text, sample_data))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return text

    def suggest_variables(self, text: str) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""

        try:
            suggestions = []
            text_lower = text.lower()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if any(word in text_lower for word in ["–∏–º—è", "–∑–æ–≤—É—Ç", "–Ω–∞–∑—ã–≤–∞—Ç—å"]):
                suggestions.append("first_name")

            if any(word in text_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"]):
                suggestions.append("random_greeting")

            if any(word in text_lower for word in ["—Å–µ–≥–æ–¥–Ω—è", "–¥–µ–Ω—å", "–¥–∞—Ç–∞"]):
                suggestions.append("date")

            if any(word in text_lower for word in ["–≤—Ä–µ–º—è", "—Å–µ–π—á–∞—Å"]):
                suggestions.append("time")

            if "–¥—Ä—É–≥" in text_lower or "—Ç–æ–≤–∞—Ä–∏—â" in text_lower:
                suggestions.append("username")

            return list(set(suggestions))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return []

    def analyze_template_complexity(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞"""

        try:
            variables = self.extract_variables(text)

            analysis = {
                "total_variables": len(variables),
                "unique_variables": len(set(variables)),
                "personalization_level": "none",
                "complexity_score": 0,
                "recommendations": []
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            if any(var in variables for var in ["username", "first_name", "full_name"]):
                analysis["personalization_level"] = "basic"
                analysis["complexity_score"] += 1

            if any(var in variables for var in ["last_name", "random_greeting"]):
                analysis["personalization_level"] = "advanced"
                analysis["complexity_score"] += 1

            if any(var in variables for var in ["date", "time", "day_name"]):
                analysis["personalization_level"] = "dynamic"
                analysis["complexity_score"] += 1

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if analysis["total_variables"] == 0:
                analysis["recommendations"].append(
                    "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"
                )

            if analysis["total_variables"] > 5:
                analysis["recommendations"].append(
                    "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç —É—Å–ª–æ–∂–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )

            return analysis

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            return {
                "total_variables": 0,
                "unique_variables": 0,
                "personalization_level": "none",
                "complexity_score": 0,
                "recommendations": []
            }

variable_parser = VariableParser()