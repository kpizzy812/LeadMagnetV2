# cold_outreach/templates/template_manager.py

import re
from datetime import datetime
from typing import Dict, List, Optional, Any
from sqlalchemy import select, update, func
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.cold_outreach import OutreachTemplate, OutreachLead
from cold_outreach.templates.variable_parser import VariableParser
from cold_outreach.templates.ai_uniquifier import AIUniquifier
from loguru import logger


class TemplateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def __init__(self):
        self.variable_parser = VariableParser()
        self.ai_uniquifier = AIUniquifier()
        self.templates_cache: Dict[int, OutreachTemplate] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            await self.variable_parser.initialize()
            await self.ai_uniquifier.initialize()
            await self._load_templates_cache()

            logger.info("‚úÖ TemplateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TemplateManager: {e}")
            raise

    async def _load_templates_cache(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∫—ç—à"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(OutreachTemplate).where(OutreachTemplate.is_active == True)
                )
                templates = result.scalars().all()

                for template in templates:
                    self.templates_cache[template.id] = template

                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.templates_cache)} —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∫—ç—à")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")

    async def create_template(
            self,
            name: str,
            text: str,
            description: str = None,
            persona_type: str = None,
            category: str = None,
            enable_ai_uniquification: bool = False,
            uniquification_level: str = "medium",
            created_by: str = None
    ) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            variables = self.variable_parser.extract_variables(text)

            async with get_db() as db:
                template = OutreachTemplate(
                    name=name,
                    description=description,
                    text=text,
                    variables=variables,
                    persona_type=persona_type,
                    category=category,
                    enable_ai_uniquification=enable_ai_uniquification,
                    uniquification_level=uniquification_level,
                    created_by=created_by
                )

                db.add(template)
                await db.flush()
                await db.refresh(template)

                template_id = template.id

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                self.templates_cache[template_id] = template

                await db.commit()

                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω '{name}' —Å ID {template_id}")
                return template_id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ '{name}': {e}")
            return None

    async def get_template(self, template_id: int) -> Optional[OutreachTemplate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID"""

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if template_id in self.templates_cache:
                return self.templates_cache[template_id]

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
            async with get_db() as db:
                template = await db.get(OutreachTemplate, template_id)

                if template and template.is_active:
                    self.templates_cache[template_id] = template
                    return template

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return None

    async def generate_message_for_lead(
            self,
            template_id: int,
            lead_data: Dict[str, Any]
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""

        try:
            template = await self.get_template(template_id)
            if not template:
                logger.error(f"‚ùå –®–∞–±–ª–æ–Ω {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            message_text = await self.variable_parser.substitute_variables(
                template.text, lead_data
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ò–ò —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            if template.enable_ai_uniquification:
                message_text = await self.ai_uniquifier.uniquify_message(
                    message_text,
                    template.uniquification_level,
                    lead_data
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await self._update_template_usage(template_id)

            return message_text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É {template_id}: {e}")
            return None

    async def _update_template_usage(self, template_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""

        try:
            async with get_db() as db:
                await db.execute(
                    update(OutreachTemplate)
                    .where(OutreachTemplate.id == template_id)
                    .values(usage_count=OutreachTemplate.usage_count + 1)
                )
                await db.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                if template_id in self.templates_cache:
                    self.templates_cache[template_id].usage_count += 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")

    async def get_templates_by_category(self, category: str) -> List[OutreachTemplate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(OutreachTemplate)
                    .where(
                        OutreachTemplate.category == category,
                        OutreachTemplate.is_active == True
                    )
                    .order_by(OutreachTemplate.usage_count.desc())
                )
                return result.scalars().all()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {e}")
            return []

    async def get_templates_by_persona(self, persona_type: str) -> List[OutreachTemplate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —Ç–∏–ø—É –ø–µ—Ä—Å–æ–Ω—ã"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(OutreachTemplate)
                    .where(
                        OutreachTemplate.persona_type == persona_type,
                        OutreachTemplate.is_active == True
                    )
                    .order_by(OutreachTemplate.conversion_rate.desc())
                )
                return result.scalars().all()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–µ—Ä—Å–æ–Ω—ã '{persona_type}': {e}")
            return []

    async def update_template(
            self,
            template_id: int,
            **updates
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""

        try:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if 'text' in updates:
                updates['variables'] = self.variable_parser.extract_variables(updates['text'])

            async with get_db() as db:
                await db.execute(
                    update(OutreachTemplate)
                    .where(OutreachTemplate.id == template_id)
                    .values(**updates)
                )
                await db.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                if template_id in self.templates_cache:
                    for key, value in updates.items():
                        setattr(self.templates_cache[template_id], key, value)

                logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω {template_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return False

    async def delete_template(self, template_id: int) -> bool:
        """–ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)"""

        try:
            await self.update_template(template_id, is_active=False)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
            if template_id in self.templates_cache:
                del self.templates_cache[template_id]

            logger.info(f"üóëÔ∏è –®–∞–±–ª–æ–Ω {template_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return False

    async def get_template_stats(self, template_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞"""

        try:
            async with get_db() as db:
                template = await db.get(OutreachTemplate, template_id)
                if not template:
                    return {}

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                from storage.models.cold_outreach import OutreachMessage, OutreachMessageStatus

                total_sent_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(OutreachMessage.template_id == template_id)
                )
                total_sent = total_sent_result.scalar() or 0

                successful_sent_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(
                        OutreachMessage.template_id == template_id,
                        OutreachMessage.status == OutreachMessageStatus.SENT
                    )
                )
                successful_sent = successful_sent_result.scalar() or 0

                responses_result = await db.execute(
                    select(func.count(OutreachMessage.id))
                    .where(
                        OutreachMessage.template_id == template_id,
                        OutreachMessage.got_response == True
                    )
                )
                responses = responses_result.scalar() or 0

                return {
                    "template_id": template_id,
                    "name": template.name,
                    "usage_count": template.usage_count,
                    "total_sent": total_sent,
                    "successful_sent": successful_sent,
                    "delivery_rate": (successful_sent / max(total_sent, 1)) * 100,
                    "response_count": responses,
                    "response_rate": (responses / max(successful_sent, 1)) * 100,
                    "conversion_rate": template.conversion_rate,
                    "avg_response_time": template.avg_response_time,
                    "created_at": template.created_at,
                    "last_used": template.updated_at
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return {}

    async def get_best_template_for_persona(self, persona_type: str) -> Optional[OutreachTemplate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã (–ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏)"""

        try:
            templates = await self.get_templates_by_persona(persona_type)

            if not templates:
                # –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã, –±–µ—Ä–µ–º –æ–±—â–∏–µ
                async with get_db() as db:
                    result = await db.execute(
                        select(OutreachTemplate)
                        .where(
                            OutreachTemplate.persona_type.is_(None),
                            OutreachTemplate.is_active == True
                        )
                        .order_by(OutreachTemplate.conversion_rate.desc())
                        .limit(1)
                    )
                    return result.scalar_one_or_none()

            return templates[0] if templates else None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è {persona_type}: {e}")
            return None

    async def validate_template(self, text: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            validation_result = {
                "valid": True,
                "errors": [],
                "warnings": [],
                "variables": [],
                "length": len(text),
                "estimated_length_after_substitution": 0
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
            if len(text) < 10:
                validation_result["errors"].append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç (–º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)")
                validation_result["valid"] = False

            if len(text) > 4000:
                validation_result["errors"].append("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–æ–ª–µ–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
                validation_result["valid"] = False

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            variables = self.variable_parser.extract_variables(text)
            validation_result["variables"] = variables

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            suspicious_words = ["—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–∫—É–ø–∏—Ç—å", "–ø—Ä–æ–¥–∞–∂–∞"]
            text_lower = text.lower()

            found_suspicious = [word for word in suspicious_words if word in text_lower]
            if found_suspicious:
                validation_result["warnings"].append(
                    f"–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_suspicious)}"
                )

            # –û—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            estimated_length = len(text)
            for var in variables:
                if var == "username":
                    estimated_length += 15  # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ username
                elif var in ["first_name", "last_name"]:
                    estimated_length += 10
                elif var == "full_name":
                    estimated_length += 20
                else:
                    estimated_length += 5

            validation_result["estimated_length_after_substitution"] = estimated_length

            if estimated_length > 4096:
                validation_result["warnings"].append(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram –ø–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
                )

            return validation_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            return {
                "valid": False,
                "errors": [f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"],
                "warnings": [],
                "variables": [],
                "length": 0,
                "estimated_length_after_substitution": 0
            }

    async def duplicate_template(self, template_id: int, new_name: str) -> Optional[int]:
        """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""

        try:
            original = await self.get_template(template_id)
            if not original:
                return None

            return await self.create_template(
                name=new_name,
                text=original.text,
                description=f"–ö–æ–ø–∏—è —à–∞–±–ª–æ–Ω–∞ '{original.name}'",
                persona_type=original.persona_type,
                category=original.category,
                enable_ai_uniquification=original.enable_ai_uniquification,
                uniquification_level=original.uniquification_level
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return None

    async def get_templates_list(
            self,
            limit: int = 50,
            offset: int = 0,
            category: str = None,
            persona_type: str = None,
            active_only: bool = True
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""

        try:
            async with get_db() as db:
                query = select(OutreachTemplate)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if active_only:
                    query = query.where(OutreachTemplate.is_active == True)

                if category:
                    query = query.where(OutreachTemplate.category == category)

                if persona_type:
                    query = query.where(OutreachTemplate.persona_type == persona_type)

                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ª–∏–º–∏—Ç—ã
                query = query.order_by(OutreachTemplate.created_at.desc())
                query = query.offset(offset).limit(limit)

                result = await db.execute(query)
                templates = result.scalars().all()

                return [
                    {
                        "id": t.id,
                        "name": t.name,
                        "description": t.description,
                        "category": t.category,
                        "persona_type": t.persona_type,
                        "usage_count": t.usage_count,
                        "conversion_rate": t.conversion_rate,
                        "created_at": t.created_at,
                        "is_active": t.is_active,
                        "variables_count": len(t.variables) if t.variables else 0
                    }
                    for t in templates
                ]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return []

    async def refresh_cache(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —à–∞–±–ª–æ–Ω–æ–≤"""

        try:
            self.templates_cache.clear()
            await self._load_templates_cache()
            logger.info("üîÑ –ö—ç—à —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")

    async def get_template_variables_usage(self) -> Dict[str, int]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""

        try:
            variables_count = {}

            for template in self.templates_cache.values():
                if template.variables:
                    for var in template.variables:
                        variables_count[var] = variables_count.get(var, 0) + 1

            return dict(sorted(variables_count.items(), key=lambda x: x[1], reverse=True))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return {}

    async def suggest_improvements(self, template_id: int) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞"""

        try:
            template = await self.get_template(template_id)
            if not template:
                return []

            suggestions = []
            text = template.text.lower()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            if len(template.text) < 50:
                suggestions.append("–£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")

            if len(template.text) > 500:
                suggestions.append("–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏")

            if not template.variables:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {username} –∏–ª–∏ {first_name}")

            if template.conversion_rate < 0.05:  # –ú–µ–Ω–µ–µ 5%
                suggestions.append("–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∏–ª–∏ —Å—Ç–∏–ª—å")

            if "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" in text and "—Ä–∏—Å–∫" not in text:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

            if not any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"]):
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ —Ç–æ–Ω–∞")

            return suggestions

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return []

template_manager = TemplateManager()