# cold_outreach/templates/channel_post_manager.py

import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime
from telethon import TelegramClient
from telethon.tl.types import Message as TelegramMessage, Channel
from sqlalchemy import select, update

from storage.database import get_db
from storage.models.cold_outreach import OutreachTemplate
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger


class ChannelPostManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    def __init__(self):
        self.channel_cache: Dict[str, Dict] = {}
        self.post_cache: Dict[str, List[Dict]] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
        logger.info("‚úÖ ChannelPostManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def create_post_template(
            self,
            name: str,
            description: str,
            channel_username: str,
            post_id: Optional[int] = None,
            use_latest_post: bool = True,
            category: str = "channel_post",
            created_by: str = None
    ) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞
            post_data = await self._get_channel_post(channel_username, post_id, use_latest_post)

            if not post_data:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username}")
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            template_text = f"[FORWARD_POST:{channel_username}:{post_data['message_id']}]"

            async with get_db() as db:
                template = OutreachTemplate(
                    name=name,
                    description=description,
                    text=template_text,
                    variables=[],  # –£ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    category=category,
                    enable_ai_uniquification=False,  # –ü–æ—Å—Ç—ã –Ω–µ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
                    created_by=created_by,
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ—Å—Ç–æ–≤
                    extra_data={
                        "is_channel_post": True,
                        "channel_username": channel_username,
                        "original_post_id": post_data['message_id'],
                        "post_text": post_data.get('text'),
                        "has_media": post_data.get('has_media', False),
                        "media_type": post_data.get('media_type'),
                        "has_buttons": post_data.get('has_buttons', False),
                        "use_latest_post": use_latest_post
                    }
                )

                db.add(template)
                await db.flush()
                await db.refresh(template)

                template_id = template.id
                await db.commit()

                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ '{name}' —Å ID {template_id}")
                return template_id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞: {e}")
            return None

    async def _get_channel_post(
            self,
            channel_username: str,
            post_id: Optional[int] = None,
            use_latest: bool = True
    ) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞
            session_names = await telegram_session_manager.get_active_sessions()
            if not session_names:
                logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞")
                return None

            session_name = session_names[0]
            client = await telegram_session_manager.get_client(session_name)

            if not client:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç {session_name}")
                return None

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
            try:
                channel = await client.get_entity(channel_username)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                try:
                    await client.get_permissions(channel)
                except:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                    await client(JoinChannelRequest(channel))
                    logger.info(f"üì± –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{channel_username}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É @{channel_username}: {e}")
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if use_latest or post_id is None:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
                messages = await client.get_messages(channel, limit=1)
                if not messages:
                    return None
                message = messages[0]
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
                message = await client.get_messages(channel, ids=post_id)
                if not message or isinstance(message, list):
                    return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = {
                "message_id": message.id,
                "text": message.text or "",
                "date": message.date,
                "has_media": bool(message.media),
                "media_type": None,
                "has_buttons": bool(message.reply_markup),
                "views": getattr(message, 'views', 0),
                "channel_username": channel_username
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
            if message.media:
                if hasattr(message.media, 'photo'):
                    post_data["media_type"] = "photo"
                elif hasattr(message.media, 'document'):
                    post_data["media_type"] = "document"
                elif hasattr(message.media, 'video'):
                    post_data["media_type"] = "video"
                else:
                    post_data["media_type"] = "other"

            return post_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            return None

    async def send_channel_post(
            self,
            session_name: str,
            username: str,
            template: OutreachTemplate
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞
            if not self._is_channel_post_template(template):
                logger.error(f"‚ùå –®–∞–±–ª–æ–Ω {template.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —à–∞–±–ª–æ–Ω–æ–º –ø–æ—Å—Ç–∞")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
            extra_data = template.extra_data or {}
            channel_username = extra_data.get("channel_username")
            use_latest_post = extra_data.get("use_latest_post", False)
            original_post_id = extra_data.get("original_post_id")

            if not channel_username:
                logger.error(f"‚ùå –í —à–∞–±–ª–æ–Ω–µ {template.id} –Ω–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å–µ—Å—Å–∏–∏
            client = await telegram_session_manager.get_client(session_name)
            if not client:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç {session_name}")
                return False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–æ—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å
            if use_latest_post:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
                channel = await client.get_entity(channel_username)
                messages = await client.get_messages(channel, limit=1)
                if not messages:
                    logger.error(f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}")
                    return False
                message_to_forward = messages[0]
            else:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
                channel = await client.get_entity(channel_username)
                message_to_forward = await client.get_messages(channel, ids=original_post_id)
                if not message_to_forward:
                    logger.error(f"‚ùå –ü–æ—Å—Ç {original_post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ @{channel_username}")
                    return False

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç
            await client.forward_messages(
                entity=username,
                messages=message_to_forward,
                from_peer=channel
            )

            logger.info(f"üì§ –ü–æ—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω: {session_name} ‚Üí @{username} –∏–∑ @{channel_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            return False

    def _is_channel_post_template(self, template: OutreachTemplate) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–æ–º –∏–∑ –∫–∞–Ω–∞–ª–∞"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–∫—Å—Ç–∞
        if template.text.startswith("[FORWARD_POST:"):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        extra_data = template.extra_data or {}
        return extra_data.get("is_channel_post", False)

    async def get_channel_posts_preview(
            self,
            channel_username: str,
            limit: int = 10
    ) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            session_names = await telegram_session_manager.get_active_sessions()
            if not session_names:
                return []

            client = await telegram_session_manager.get_client(session_names[0])
            if not client:
                return []

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await client.get_entity(channel_username)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
            messages = await client.get_messages(channel, limit=limit)

            posts_preview = []
            for msg in messages:
                preview = {
                    "message_id": msg.id,
                    "text": (msg.text or "")[:200] + "..." if len(msg.text or "") > 200 else (msg.text or ""),
                    "date": msg.date.strftime("%d.%m.%Y %H:%M"),
                    "has_media": bool(msg.media),
                    "media_type": self._get_media_type(msg),
                    "has_buttons": bool(msg.reply_markup),
                    "views": getattr(msg, 'views', 0)
                }
                posts_preview.append(preview)

            return posts_preview

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤: {e}")
            return []

    def _get_media_type(self, message) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""

        if not message.media:
            return None

        if hasattr(message.media, 'photo'):
            return "üì∑ –§–æ—Ç–æ"
        elif hasattr(message.media, 'document'):
            if message.media.document.mime_type.startswith('video'):
                return "üé• –í–∏–¥–µ–æ"
            elif message.media.document.mime_type.startswith('audio'):
                return "üéµ –ê—É–¥–∏–æ"
            else:
                return "üìé –§–∞–π–ª"
        else:
            return "üìé –ú–µ–¥–∏–∞"

    async def refresh_channel_cache(self, channel_username: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–Ω–∞–ª–∞"""

        try:
            posts = await self.get_channel_posts_preview(channel_username, 50)
            self.post_cache[channel_username] = posts

            logger.info(f"üîÑ –ö—ç—à –∫–∞–Ω–∞–ª–∞ @{channel_username} –æ–±–Ω–æ–≤–ª–µ–Ω: {len(posts)} –ø–æ—Å—Ç–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞–Ω–∞–ª–∞: {e}")

    async def auto_join_channel(self, session_name: str, channel_username: str) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""

        try:
            client = await telegram_session_manager.get_client(session_name)
            if not client:
                return False

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª
            from telethon.tl.functions.channels import JoinChannelRequest

            channel = await client.get_entity(channel_username)
            await client(JoinChannelRequest(channel))

            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –≤—Å—Ç—É–ø–∏–ª–∞ –≤ @{channel_username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            return False

    async def validate_channel_access(self, channel_username: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"""

        try:
            session_names = await telegram_session_manager.get_active_sessions()
            if not session_names:
                return {"valid": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"}

            client = await telegram_session_manager.get_client(session_names[0])
            if not client:
                return {"valid": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
            try:
                channel = await client.get_entity(channel_username)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                permissions = await client.get_permissions(channel)

                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
                messages = await client.get_messages(channel, limit=1)

                return {
                    "valid": True,
                    "channel_title": getattr(channel, 'title', 'Unknown'),
                    "subscribers_count": getattr(channel, 'participants_count', 0),
                    "can_read": bool(messages),
                    "recent_posts": len(messages)
                }

            except Exception as e:
                return {"valid": False, "error": f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}"}

        except Exception as e:
            return {"valid": False, "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å—Ç–æ–≤
channel_post_manager = ChannelPostManager()