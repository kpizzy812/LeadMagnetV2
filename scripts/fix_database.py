#!/usr/bin/env python3
# scripts/fix_database.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from storage.database import db_manager
from loguru import logger
import sqlalchemy as sa
from sqlalchemy import text


async def fix_database_schema():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        await db_manager.initialize()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –Ω–∞–ø—Ä—è–º—É—é
        async with db_manager.engine.begin() as conn:
            print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ conversations...")

            # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            columns_to_add = [
                "ALTER TABLE conversations ADD COLUMN IF NOT EXISTS is_whitelisted BOOLEAN DEFAULT FALSE;",
                "ALTER TABLE conversations ADD COLUMN IF NOT EXISTS is_blacklisted BOOLEAN DEFAULT FALSE;",
                "ALTER TABLE conversations ADD COLUMN IF NOT EXISTS auto_created BOOLEAN DEFAULT TRUE;",
                "ALTER TABLE conversations ADD COLUMN IF NOT EXISTS requires_approval BOOLEAN DEFAULT FALSE;",
                "ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_disabled BOOLEAN DEFAULT FALSE;",
                "ALTER TABLE conversations ADD COLUMN IF NOT EXISTS auto_responses_paused BOOLEAN DEFAULT FALSE;"
            ]

            for sql in columns_to_add:
                try:
                    await conn.execute(text(sql))
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞")
                except Exception as e:
                    if "already exists" in str(e):
                        print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

            print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        await db_manager.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
        return False


async def recreate_tables():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–í–ù–ò–ú–ê–ù–ò–ï: —É–¥–∞–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ!)"""

    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!")
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")

    if confirm.lower() not in ['yes', 'y']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return False

    try:
        await db_manager.initialize()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        from storage.models.base import Base

        async with db_manager.engine.begin() as conn:
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            await conn.run_sync(Base.metadata.drop_all)

            print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            await conn.run_sync(Base.metadata.create_all)

        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã")
        await db_manager.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False


async def main():
    print("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
    print("2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã (—É–¥–∞–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ!)")
    print("3. –û—Ç–º–µ–Ω–∞")

    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ")

    if choice == "1":
        success = await fix_database_schema()
        if success:
            print("\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º—É: python main.py")
    elif choice == "2":
        await recreate_tables()
        print("\nüéØ –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Å—Å–∏–∏ –∑–∞–Ω–æ–≤–æ")
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())