#!/usr/bin/env python3
# scripts/session_manager.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram —Å–µ—Å—Å–∏—è–º–∏
"""

import asyncio
import sys
import json
from pathlib import Path
from typing import Dict, Optional, List
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError
import getpass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.settings.base import settings
from storage.database import db_manager, get_db
from storage.models.base import Session, SessionStatus, PersonaType
from sqlalchemy import select
from loguru import logger


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏"""

    def __init__(self):
        self.sessions_dir = settings.sessions_dir
        self.sessions_dir.mkdir(parents=True, exist_ok=True)

    async def create_session(
            self,
            session_name: str,
            phone: str,
            persona_type: str = "basic_man",
            proxy: Optional[Dict] = None
    ) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""

        try:
            session_file = self.sessions_dir / f"{session_name}.session"

            if session_file.exists():
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            proxy_tuple = None
            if proxy:
                import socks
                proxy_tuple = (
                    socks.SOCKS5,
                    proxy["host"],
                    proxy["port"],
                    True,
                    proxy.get("username"),
                    proxy.get("password")
                )

            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy_tuple
            )

            logger.info(f"üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è {phone}...")
            await client.start(phone=phone)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            async with get_db() as db:
                new_session = Session(
                    session_name=session_name,
                    persona_type=persona_type,
                    status=SessionStatus.ACTIVE,
                    telegram_id=str(me.id),
                    username=me.username,
                    first_name=me.first_name,
                    last_name=me.last_name,
                    ai_enabled=True
                )

                db.add(new_session)
                await db.commit()

            await client.disconnect()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if proxy:
                await self._save_proxy_config(session_name, proxy)

            logger.success(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{me.username} ({me.first_name} {me.last_name})")
            logger.info(f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞: {persona_type}")

            return True

        except SessionPasswordNeededError:
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            try:
                await client.start(phone=phone, password=password)
                logger.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ 2FA: {e}")
                return False

        except FloodWaitError as e:
            logger.error(f"‚ùå –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å: –∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False

    async def _save_proxy_config(self, session_name: str, proxy: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""

        proxy_file = settings.data_dir / "proxies.json"

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏
            if proxy_file.exists():
                with open(proxy_file, 'r', encoding='utf-8') as f:
                    proxies = json.load(f)
            else:
                proxies = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            proxies[f"{session_name}.session"] = {
                "static": proxy
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(proxy_file, 'w', encoding='utf-8') as f:
                json.dump(proxies, f, indent=2, ensure_ascii=False)

            logger.info(f"üì° –ü—Ä–æ–∫—Å–∏ –¥–ª—è {session_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")

    async def list_sessions(self) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

        try:
            sessions = []

            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
            session_files = list(self.sessions_dir.rglob("*.session"))

            async with get_db() as db:
                for session_file in session_files:
                    session_name = session_file.stem

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    result = await db.execute(
                        select(Session).where(Session.session_name == session_name)
                    )
                    db_session = result.scalar_one_or_none()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    is_authorized = await self._check_session_auth(session_file)

                    session_info = {
                        "name": session_name,
                        "file_path": str(session_file),
                        "authorized": is_authorized,
                        "in_database": db_session is not None,
                        "status": db_session.status if db_session else "unknown",
                        "persona": db_session.persona_type if db_session else None,
                        "username": db_session.username if db_session else None,
                        "ai_enabled": db_session.ai_enabled if db_session else False
                    }

                    sessions.append(session_info)

            return sessions

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
            return []

    async def _check_session_auth(self, session_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""

        try:
            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash
            )

            await client.connect()
            is_authorized = await client.is_user_authorized()
            await client.disconnect()

            return is_authorized

        except Exception:
            return False

    async def delete_session(self, session_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""

        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            session_file = self.sessions_dir / f"{session_name}.session"
            if session_file.exists():
                session_file.unlink()
                logger.info(f"üóëÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_name} —É–¥–∞–ª–µ–Ω")

            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                db_session = result.scalar_one_or_none()

                if db_session:
                    await db.delete(db_session)
                    await db.commit()
                    logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False

    async def update_persona(self, session_name: str, persona_type: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã —Å–µ—Å—Å–∏–∏"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if not session:
                    logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    return False

                session.persona_type = persona_type
                await db.commit()

                logger.success(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ —Å–µ—Å—Å–∏–∏ {session_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {persona_type}")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã: {e}")
            return False

    async def set_ref_link(self, session_name: str, ref_link: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if not session:
                    logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    return False

                session.project_ref_link = ref_link
                await db.commit()

                logger.success(f"‚úÖ –†–µ—Ñ —Å—Å—ã–ª–∫–∞ –¥–ª—è {session_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏: {e}")
            return False


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db_manager.initialize()

    manager = SessionManager()

    if len(sys.argv) < 2:
        print_help()
        return

    command = sys.argv[1]

    try:
        if command == "create":
            if len(sys.argv) < 4:
                print(
                    "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python session_manager.py create <–∏–º—è_—Å–µ—Å—Å–∏–∏> <—Ç–µ–ª–µ—Ñ–æ–Ω> [–ø–µ—Ä—Å–æ–Ω–∞] [–ø—Ä–æ–∫—Å–∏_json]")
                return

            session_name = sys.argv[2]
            phone = sys.argv[3]
            persona = sys.argv[4] if len(sys.argv) > 4 else "basic_man"

            proxy = None
            if len(sys.argv) > 5:
                try:
                    proxy = json.loads(sys.argv[5])
                except json.JSONDecodeError:
                    logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –ø—Ä–æ–∫—Å–∏")
                    return

            await manager.create_session(session_name, phone, persona, proxy)

        elif command == "list":
            sessions = await manager.list_sessions()

            if not sessions:
                print("üìù –°–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            print("\nüìã –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:")
            print("-" * 80)

            for session in sessions:
                status_emoji = "‚úÖ" if session["authorized"] else "‚ùå"
                db_emoji = "üíæ" if session["in_database"] else "‚ùì"
                ai_emoji = "ü§ñ" if session.get("ai_enabled") else "üì¥"

                print(f"{status_emoji} {db_emoji} {ai_emoji} {session['name']}")
                print(f"    –ü–µ—Ä—Å–æ–Ω–∞: {session.get('persona', '–Ω–µ –∑–∞–¥–∞–Ω–∞')}")
                print(f"    Username: @{session.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                print(f"    –°—Ç–∞—Ç—É—Å: {session.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                print(f"    –ü—É—Ç—å: {session['file_path']}")
                print()

        elif command == "delete":
            if len(sys.argv) < 3:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python session_manager.py delete <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
                return

            session_name = sys.argv[2]

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}? (yes/no): ")
            if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
                await manager.delete_session(session_name)
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

        elif command == "persona":
            if len(sys.argv) < 4:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python session_manager.py persona <–∏–º—è_—Å–µ—Å—Å–∏–∏> <—Ç–∏–ø_–ø–µ—Ä—Å–æ–Ω—ã>")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã: basic_man, basic_woman, hyip_man, hyip_woman, investor_man")
                return

            session_name = sys.argv[2]
            persona_type = sys.argv[3]

            valid_personas = ["basic_man", "basic_woman", "hyip_man", "hyip_woman", "investor_man"]
            if persona_type not in valid_personas:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_personas)}")
                return

            await manager.update_persona(session_name, persona_type)

        elif command == "reflink":
            if len(sys.argv) < 4:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python session_manager.py reflink <–∏–º—è_—Å–µ—Å—Å–∏–∏> <—Å—Å—ã–ª–∫–∞>")
                return

            session_name = sys.argv[2]
            ref_link = sys.argv[3]

            await manager.set_ref_link(session_name, ref_link)

        elif command == "check":
            sessions = await manager.list_sessions()

            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π:")
            print("-" * 50)

            for session in sessions:
                status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞" if session["authorized"] else "‚ùå –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞"
                print(f"{session['name']}: {status}")

        else:
            print_help()

    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await db_manager.close()


def print_help():
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """
üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä Telegram —Å–µ—Å—Å–∏–π

–ö–æ–º–∞–Ω–¥—ã:
  create <–∏–º—è> <—Ç–µ–ª–µ—Ñ–æ–Ω> [–ø–µ—Ä—Å–æ–Ω–∞] [–ø—Ä–æ–∫—Å–∏]  - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
  list                                        - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π  
  delete <–∏–º—è>                               - –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
  persona <–∏–º—è> <—Ç–∏–ø>                        - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É
  reflink <–∏–º—è> <—Å—Å—ã–ª–∫–∞>                     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ —Å—Å—ã–ª–∫—É
  check                                      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–π

–ü—Ä–∏–º–µ—Ä—ã:
  python session_manager.py create alex_session +1234567890 basic_man
  python session_manager.py create maria_session +1234567891 basic_woman '{"host":"proxy.com","port":1080,"username":"user","password":"pass"}'
  python session_manager.py list
  python session_manager.py persona alex_session hyip_man
  python session_manager.py reflink alex_session "https://t.me/bot?start=ref123"
  python session_manager.py delete alex_session

–ü–µ—Ä—Å–æ–Ω—ã:
  basic_man     - –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–µ–Ω—å
  basic_woman   - –ü—Ä–æ—Å—Ç–∞—è –¥–µ–≤—É—à–∫–∞  
  hyip_man      - HYIP —ç–∫—Å–ø–µ—Ä—Ç
  hyip_woman    - HYIP –∂–µ–Ω—â–∏–Ω–∞
  investor_man  - –û–ø—ã—Ç–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä

–§–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ JSON:
  {"host":"proxy.example.com","port":1080,"username":"user","password":"pass"}
"""
    print(help_text)


if __name__ == "__main__":
    asyncio.run(main())