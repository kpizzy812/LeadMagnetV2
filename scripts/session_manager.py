#!/usr/bin/env python3
# scripts/session_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram —Å–µ—Å—Å–∏—è–º–∏
"""

import asyncio
import sys
import json
from pathlib import Path
from typing import Dict, Optional, List
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError
import getpass
import socks

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.settings.base import settings
from storage.database import db_manager, get_db
from storage.models.base import Session, SessionStatus, PersonaType
from sqlalchemy import select
from loguru import logger


class SafeSessionManager:
    """–ë–ï–ó–û–ü–ê–°–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏"""

    def __init__(self):
        self.sessions_dir = settings.sessions_dir
        self.sessions_dir.mkdir(parents=True, exist_ok=True)

    async def create_session(
            self,
            session_name: str,
            phone: str,
            persona_type: str = "basic_man",
            proxy: Optional[Dict] = None
    ) -> bool:
        """–ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""

        try:
            session_file = self.sessions_dir / f"{session_name}.session"

            if session_file.exists():
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ JSON –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
            if not proxy:
                proxy = await self._load_proxy_config_for_creation(session_name)

            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏!
            if not proxy:
                logger.error(f"üö´ –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–∫—Å–∏!")
                logger.error(f"üö´ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–ï–ó –ü–†–û–ö–°–ò –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!")
                logger.error(f"üö´ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ proxies.json")
                return False

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
            proxy_tuple = (
                socks.SOCKS5,
                proxy["host"],
                proxy["port"],
                True,
                proxy.get("username"),
                proxy.get("password")
            )

            logger.info(f"üì° –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {session_name} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy['host']}:{proxy['port']}")

            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy_tuple
            )

            logger.info(f"üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è {phone}...")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ start() - –æ–Ω —É–∂–µ –¥–µ–ª–∞–µ—Ç –≤—Å—ë —á—Ç–æ –Ω—É–∂–Ω–æ
            await client.start(phone=phone)

            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º get_me() –∏ –¥—Ä—É–≥–∏–µ API –º–µ—Ç–æ–¥—ã!
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
            if await client.is_user_authorized():
                logger.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {session_name}")

                # –°—Ä–∞–∑—É –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è, –Ω–µ –¥–µ–ª–∞—è –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                await client.disconnect()

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                # –ù–ï –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
                await self._register_session_minimal(session_name, persona_type)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if proxy:
                    await self._save_proxy_config(session_name, proxy)

                logger.success(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ!")
                return True
            else:
                logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {session_name}")
                await client.disconnect()
                return False

        except SessionPasswordNeededError:
            logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {phone}")
            password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            try:
                await client.start(phone=phone, password=password)

                if await client.is_user_authorized():
                    logger.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {session_name}")
                    await client.disconnect()

                    await self._register_session_minimal(session_name, persona_type)

                    if proxy:
                        await self._save_proxy_config(session_name, proxy)

                    return True
                else:
                    await client.disconnect()
                    return False

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ 2FA: {e}")
                await client.disconnect()
                return False

        except FloodWaitError as e:
            logger.error(f"‚ùå –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å: –∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            try:
                await client.disconnect()
            except:
                pass
            return False

    async def _register_session_minimal(self, session_name: str, persona_type: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –≤ –ë–î —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            async with get_db() as db:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API, —Å–æ–∑–¥–∞—ë–º —Å –º–∏–Ω–∏–º—É–º–æ–º
                new_session = Session(
                    session_name=session_name,
                    persona_type=persona_type,
                    status=SessionStatus.ACTIVE,
                    telegram_id=None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
                    username=None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
                    first_name=None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
                    last_name=None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
                    ai_enabled=True
                )

                db.add(new_session)
                await db.commit()

                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î: {e}")

    async def _save_proxy_config(self, session_name: str, proxy: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""

        proxy_file = settings.data_dir / "proxies.json"

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏
            if proxy_file.exists():
                with open(proxy_file, 'r', encoding='utf-8') as f:
                    proxies = json.load(f)
            else:
                proxies = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            proxies[f"{session_name}.session"] = {
                "static": proxy
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(proxy_file, 'w', encoding='utf-8') as f:
                json.dump(proxies, f, indent=2, ensure_ascii=False)

            logger.info(f"üì° –ü—Ä–æ–∫—Å–∏ –¥–ª—è {session_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")

    async def update_session_info(self, session_name: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ (–û–¢–î–ï–õ–¨–ù–û –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è)"""

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxy = await self._load_proxy_for_session(session_name)

            session_file = self.sessions_dir / f"{session_name}.session"
            if not session_file.exists():
                logger.error(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            await client.connect()

            if not await client.is_user_authorized():
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                await client.disconnect()
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            await client.disconnect()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if session:
                    session.telegram_id = str(me.id)
                    session.username = me.username
                    session.first_name = me.first_name
                    session.last_name = me.last_name

                    await db.commit()
                    logger.success(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ {session_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
                else:
                    logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return False

    async def _load_proxy_config_for_creation(self, session_name: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        try:
            proxy_file = settings.data_dir / "proxies.json"
            if not proxy_file.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª proxies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            with open(proxy_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)

            session_key = f"{session_name}.session"
            if session_key not in proxies:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –¥–ª—è {session_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return None

            session_config = proxies[session_key]
            proxy_config = session_config.get("static") or session_config.get("dynamic")

            if not proxy_config or "host" not in proxy_config:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è {session_name}")
                return None

            logger.info(
                f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ –¥–ª—è {session_name}: {proxy_config['host']}:{proxy_config.get('port', 'unknown')}")
            return proxy_config

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {session_name}: {e}")
            return None
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            proxy_file = settings.data_dir / "proxies.json"
            if not proxy_file.exists():
                return None

            with open(proxy_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)

            session_key = f"{session_name}.session"
            if session_key not in proxies:
                return None

            proxy_config = proxies[session_key].get("static") or proxies[session_key].get("dynamic")
            if not proxy_config:
                return None

            return (
                socks.SOCKS5,
                proxy_config["host"],
                proxy_config["port"],
                True,
                proxy_config.get("username"),
                proxy_config.get("password")
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return None

    async def list_sessions(self) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

        try:
            sessions = []
            await db_manager.initialize()

            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
            session_files = list(self.sessions_dir.rglob("*.session"))

            async with get_db() as db:
                for session_file in session_files:
                    session_name = session_file.stem

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    result = await db.execute(
                        select(Session).where(Session.session_name == session_name)
                    )
                    db_session = result.scalar_one_or_none()

                    # –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
                    session_info = {
                        "name": session_name,
                        "file_path": str(session_file),
                        "authorized": "unknown",  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        "in_database": db_session is not None,
                        "status": db_session.status if db_session else "unknown",
                        "persona": db_session.persona_type if db_session else None,
                        "username": db_session.username if db_session else None,
                        "ai_enabled": db_session.ai_enabled if db_session else False
                    }

                    sessions.append(session_info)

            return sessions

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
            return []

    async def check_session_auth(self, session_name: str) -> bool:
        """–û–¢–î–ï–õ–¨–ù–ê–Ø –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ)"""

        try:
            session_file = self.sessions_dir / f"{session_name}.session"
            if not session_file.exists():
                return False

            proxy = await self._load_proxy_for_session(session_name)

            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            await client.connect()
            is_authorized = await client.is_user_authorized()
            await client.disconnect()

            # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(1)

            return is_authorized

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {session_name}: {e}")
            return False

    async def delete_session(self, session_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""

        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            session_file = self.sessions_dir / f"{session_name}.session"
            if session_file.exists():
                session_file.unlink()
                logger.info(f"üóëÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_name} —É–¥–∞–ª–µ–Ω")

            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if session:
                    await db.delete(session)
                    await db.commit()
                    logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if len(sys.argv) < 2:
        print("üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram —Å–µ—Å—Å–∏—è–º–∏")
        print()
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  create <name> <phone> [persona] [proxy_json]  - —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
        print("  list                                          - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
        print("  check <name>                                  - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        print("  update <name>                                 - –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("  delete <name>                                 - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scripts/session_manager.py create test +79111234567 basic_man")
        print("  python scripts/session_manager.py check test")
        return

    command = sys.argv[1]
    manager = SafeSessionManager()

    try:
        await db_manager.initialize()

        if command == "create":
            if len(sys.argv) < 4:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã: session_name phone [persona] [proxy_json]")
                return

            session_name = sys.argv[2]
            phone = sys.argv[3]
            persona_type = sys.argv[4] if len(sys.argv) > 4 else "basic_man"

            proxy = None
            if len(sys.argv) > 5:
                try:
                    proxy = json.loads(sys.argv[5])
                except:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –ø—Ä–æ–∫—Å–∏")
                    return

            success = await manager.create_session(session_name, phone, persona_type, proxy)
            if success:
                print(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é {session_name}")

        elif command == "list":
            sessions = await manager.list_sessions()

            if not sessions:
                print("‚ùå –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π:")
            print()

            for session in sessions:
                status_icon = "‚úÖ" if session["in_database"] else "‚ùå"
                auth_icon = "üîë" if session["authorized"] == True else "‚ùì" if session[
                                                                                 "authorized"] == "unknown" else "üö´"
                ai_icon = "ü§ñ" if session["ai_enabled"] else "üì¥"

                print(
                    f"{status_icon} {auth_icon} {ai_icon} {session['name']:<20} | {session['persona'] or 'no_persona':<12} | @{session['username'] or 'unknown'}")

        elif command == "check":
            if len(sys.argv) < 3:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: session_name")
                return

            session_name = sys.argv[2]
            is_authorized = await manager.check_session_auth(session_name)

            if is_authorized:
                print(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            else:
                print(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")

        elif command == "update":
            if len(sys.argv) < 3:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: session_name")
                return

            session_name = sys.argv[2]
            success = await manager.update_session_info(session_name)

            if success:
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ {session_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ {session_name}")

        elif command == "delete":
            if len(sys.argv) < 3:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: session_name")
                return

            session_name = sys.argv[2]

            confirm = input(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}? (yes/no): ")
            if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
                success = await manager.delete_session(session_name)

                if success:
                    print(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}")
            else:
                print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")