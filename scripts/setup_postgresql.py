#!/usr/bin/env python3
# scripts/setup_postgresql.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –û–°
"""

import sys
import subprocess
import platform
from pathlib import Path


def run_command(cmd, check=True, capture_output=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            check=check,
            capture_output=capture_output,
            text=True
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr


def check_postgresql_installed():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É psql
    success, stdout, stderr = run_command("psql --version")
    if success:
        print(f"   ‚úÖ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stdout.strip()}")
        return True
    else:
        print("   ‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False


def install_postgresql_macos():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ macOS"""
    print("üçé –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ macOS...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Homebrew
    success, _, _ = run_command("brew --version")
    if not success:
        print("   ‚ùå Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(
            "   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"")
        return False

    print("   üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL —á–µ—Ä–µ–∑ Homebrew...")
    success, stdout, stderr = run_command("brew install postgresql@15")

    if not success:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {stderr}")
        return False

    print("   ‚úÖ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("   üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...")
    run_command("brew services start postgresql@15")

    return True


def install_postgresql_ubuntu():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ Ubuntu/Debian"""
    print("üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –Ω–∞ Ubuntu/Debian...")

    print("   üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤...")
    success, _, _ = run_command("sudo apt update")
    if not success:
        print("   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤")
        return False

    print("   üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL...")
    success, _, _ = run_command("sudo apt install -y postgresql postgresql-contrib")
    if not success:
        print("   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL")
        return False

    print("   üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...")
    run_command("sudo systemctl start postgresql")
    run_command("sudo systemctl enable postgresql")

    return True


def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    system = platform.system().lower()

    if system == "darwin":  # macOS
        # –ù–∞ macOS —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import getpass
        current_user = getpass.getuser()

        print(f"   üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user}...")
        run_command(f"createuser -s {current_user}", check=False)

        print("   üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        success, _, _ = run_command("createdb lead_management")
        if success:
            print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö lead_management —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("   ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        print("   üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres...")
        run_command("createuser -s postgres", check=False)

    else:  # Linux
        print("   üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres...")

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success, _, _ = run_command("sudo -u postgres createdb lead_management")
        if success:
            print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö lead_management —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("   ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    return True


def test_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ
    cmd = "psql -d lead_management -c 'SELECT version();'"
    success, stdout, stderr = run_command(cmd)

    if success:
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {stderr}")

        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        print("   üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

        system = platform.system().lower()
        if system == "darwin":  # macOS
            cmd = "psql postgres -c 'CREATE DATABASE lead_management;'"
            run_command(cmd, check=False)

        return False


def update_env_file():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    print("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")

    base_dir = Path(__file__).parent.parent
    env_file = base_dir / ".env"

    if not env_file.exists():
        print("   ‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    with open(env_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –¥–ª—è macOS
    system = platform.system().lower()
    if system == "darwin":  # macOS
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        content = content.replace(
            "DATABASE__PASSWORD=your_postgres_password",
            "DATABASE__PASSWORD="
        )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(content)

    print("   ‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è Lead Management System")
    print("=" * 60)

    system = platform.system().lower()
    print(f"üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        if not check_postgresql_installed():
            if system == "darwin":  # macOS
                if not install_postgresql_macos():
                    return 1
            elif system == "linux":  # Linux
                if not install_postgresql_ubuntu():
                    return 1
            else:
                print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {system}")
                print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL –≤—Ä—É—á–Ω—É—é")
                return 1

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not setup_database():
            return 1

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not test_connection():
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –æ—à–∏–±–∫–∏")

        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        update_env_file()

        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: python scripts/quick_start.py")
        print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ PostgreSQL")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python main.py")

        return 0

    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())