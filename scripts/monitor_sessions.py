#!/usr/bin/env python3
# scripts/monitor_sessions.py

"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from storage.database import db_manager
from core.handlers.message_handler import message_handler
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger


async def monitor_sessions():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π"""

    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π Lead Management System")
    print("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await db_manager.initialize()
        await telegram_session_manager.initialize()
        await message_handler.initialize()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        session_stats = await message_handler.get_session_stats()
        realtime_stats = message_handler.get_realtime_stats()
        telegram_health = await telegram_session_manager.health_check()

        print(f"üîÑ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {datetime.now().strftime('%H:%M:%S')}</b>")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {realtime_stats.get('active_sessions', 0)}")
        print(f"   ‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {realtime_stats.get('paused_sessions', 0)}")
        print(f"   ‚Ä¢ –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π: {realtime_stats.get('queue_size', 0)}")
        print(f"   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: {realtime_stats.get('total_response_delays', 0)}")
        print()

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏—è–º
        if session_stats:
            print("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏—è–º:")
            print("-" * 60)

            for session_name, stats in session_stats.items():
                status = stats.get("status", "unknown")
                status_emoji = {
                    "active": "üü¢",
                    "paused": "‚è∏Ô∏è",
                    "inactive": "üî¥",
                    "disconnected": "‚ö†Ô∏è"
                }.get(status, "‚ùì")

                print(f"{status_emoji} {session_name}")
                print(f"   üì± –ü–µ—Ä—Å–æ–Ω–∞: {stats.get('persona_type', '–Ω–µ –∑–∞–¥–∞–Ω–∞')}")
                print(f"   ü§ñ –ò–ò: {'–≤–∫–ª—é—á–µ–Ω' if stats.get('ai_enabled') else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {status}")
                print(f"   üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats.get('active_dialogs', 0)}")
                print(f"   üì® –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á: {stats.get('messages_24h', 0)}")
                print(f"   üìà –í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {stats.get('total_conversions', 0)}")
                print(f"   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω: {'–¥–∞' if stats.get('is_connected') else '–Ω–µ—Ç'}")

                last_activity = stats.get('last_activity')
                if last_activity:
                    print(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}")
                print()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check Telegram
        print("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
        print("-" * 40)

        if telegram_health:
            for session_name, is_healthy in telegram_health.items():
                status = "‚úÖ OK" if is_healthy else "‚ùå –ü—Ä–æ–±–ª–µ–º–∞"
                print(f"   {session_name}: {status}")
        else:
            print("   üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

        print()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("-" * 20)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        problems = []

        if realtime_stats.get('active_sessions', 0) == 0:
            problems.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")

        if realtime_stats.get('queue_size', 0) > 10:
            problems.append(f"–ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π ({realtime_stats['queue_size']}) - —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        problem_sessions = []
        for session_name, stats in session_stats.items():
            if stats.get('status') == 'disconnected':
                problem_sessions.append(f"{session_name} (–æ—Ç–∫–ª—é—á–µ–Ω–∞)")
            elif not stats.get('is_connected'):
                problem_sessions.append(f"{session_name} (–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)")

        if problem_sessions:
            problems.append(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {', '.join(problem_sessions)}")

        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        inactive_count = sum(1 for stats in session_stats.values()
                             if stats.get('messages_24h', 0) == 0 and stats.get('status') == 'active')
        if inactive_count > 0:
            problems.append(f"{inactive_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á")

        if problems:
            for problem in problems:
                print(f"   ‚ö†Ô∏è {problem}")
        else:
            print("   ‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        print()

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if problems:
            print("üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            print("-" * 30)
            print("   python scripts/fix_sessions.py - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            print("   python scripts/session_manager.py check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            print("   python main.py - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
            print()

        await db_manager.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


async def monitor_realtime():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    print("=" * 60)

    try:
        await db_manager.initialize()
        await message_handler.initialize()

        while True:
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–¥–ª—è Unix/Linux/Mac)
            print("\033[2J\033[H", end="")

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            realtime_stats = message_handler.get_realtime_stats()
            session_stats = await message_handler.get_session_stats()

            print(
                f"üïê {datetime.now().strftime('%H:%M:%S')} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {realtime_stats.get('active_sessions', 0)} | –û—á–µ—Ä–µ–¥—å: {realtime_stats.get('queue_size', 0)}")
            print("-" * 60)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            sorted_sessions = sorted(
                session_stats.items(),
                key=lambda x: x[1].get('messages_24h', 0),
                reverse=True
            )

            for session_name, stats in sorted_sessions[:5]:
                status = stats.get('status', 'unknown')
                status_emoji = {
                    "active": "üü¢",
                    "paused": "‚è∏Ô∏è",
                    "inactive": "üî¥"
                }.get(status, "‚ùì")

                print(
                    f"{status_emoji} {session_name[:15]:<15} | –î–∏–∞–ª–æ–≥–æ–≤: {stats.get('active_dialogs', 0):>2} | –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages_24h', 0):>3}")

            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)

    except KeyboardInterrupt:
        print("\n\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    finally:
        await db_manager.close()


async def export_stats():
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON"""

    try:
        await db_manager.initialize()
        await message_handler.initialize()

        session_stats = await message_handler.get_session_stats()
        realtime_stats = message_handler.get_realtime_stats()

        export_data = {
            "timestamp": datetime.now().isoformat(),
            "realtime_stats": realtime_stats,
            "session_stats": session_stats
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        export_file = f"session_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        with open(export_file, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {export_file}")

        await db_manager.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if len(sys.argv) < 2:
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π Lead Management System")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/monitor_sessions.py status    - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π")
        print("  python scripts/monitor_sessions.py realtime  - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("  python scripts/monitor_sessions.py export    - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON")
        return

    command = sys.argv[1]

    if command == "status":
        await monitor_sessions()
    elif command == "realtime":
        await monitor_realtime()
    elif command == "export":
        await export_stats()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")