#!/usr/bin/env python3
# scripts/quick_start.py

"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.settings.base import settings
from storage.database import db_manager
from core.integrations.openai_client import openai_client
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger
import json


class QuickStartChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É"""

    def __init__(self):
        self.checks_passed = 0
        self.total_checks = 8

    async def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""

        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Lead Management System –∫ –∑–∞–ø—É—Å–∫—É...\n")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        await self.check_env_file()
        await self.check_database()
        await self.check_openai()
        await self.check_telegram_settings()
        await self.check_directories()
        await self.check_sessions()
        await self.check_proxies()
        await self.check_permissions()

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {self.checks_passed}/{self.total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

        if self.checks_passed == self.total_checks:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
            print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py")
            return True
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
            print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return False

    async def check_env_file(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""

        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")

        env_file = settings.base_dir / ".env"
        if not env_file.exists():
            print("   ‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cp .env.template .env")
            print("   üí° –ó–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = {
            "TELEGRAM__API_ID": settings.telegram.api_id,
            "TELEGRAM__API_HASH": settings.telegram.api_hash,
            "TELEGRAM__BOT_TOKEN": settings.telegram.bot_token,
            "OPENAI__API_KEY": settings.openai.api_key,
            "DATABASE__PASSWORD": settings.database.password
        }

        missing_vars = []
        for var_name, value in required_vars.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
            if (not value or
                    str(value).startswith("your_") or
                    str(value) in ["0", "", "sk-your-openai-api-key"]):
                missing_vars.append(var_name)

        if missing_vars:
            print(f"   ‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            print("   üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
            return

        print("   ‚úÖ –§–∞–π–ª .env –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        self.checks_passed += 1

    async def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

        print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            await db_manager.initialize()
            is_healthy = await db_manager.health_check()

            if is_healthy:
                print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                self.checks_passed += 1
            else:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
                print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

            await db_manager.close()

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            print("   üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")

    async def check_openai(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API"""

        print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API...")

        try:
            test_result = await openai_client.test_connection()

            if test_result["success"]:
                print(f"   ‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–æ–¥–µ–ª—å: {test_result['model']})")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_result['processing_time']}—Å")
                self.checks_passed += 1
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ OpenAI API: {test_result['error']}")
                print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {e}")

    async def check_telegram_settings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram"""

        print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ admin_ids –Ω–µ –ø—É—Å—Ç–æ–π
            if not settings.telegram.admin_ids:
                print("   ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM__ADMIN_IDS")
                print("   üí° –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            bot_token = settings.telegram.bot_token
            if not bot_token or ":" not in bot_token:
                print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TELEGRAM__BOT_TOKEN")
                print("   üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
                return

            print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print(f"   üë• –ê–¥–º–∏–Ω–æ–≤: {len(settings.telegram.admin_ids)}")
            self.checks_passed += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram: {e}")

    async def check_directories(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""

        print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

        required_dirs = [
            settings.data_dir,
            settings.logs_dir,
            settings.sessions_dir,
            settings.dialogs_dir
        ]

        missing_dirs = []
        for directory in required_dirs:
            if not directory.exists():
                directory.mkdir(parents=True, exist_ok=True)
                missing_dirs.append(str(directory))

        if missing_dirs:
            print(f"   ‚öôÔ∏è –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")

        print("   ‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã")
        self.checks_passed += 1

    async def check_sessions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π"""

        print("6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Å–µ—Å—Å–∏–π...")

        session_files = list(settings.sessions_dir.rglob("*.session"))

        if not session_files:
            print("   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤")
            print("   üí° –î–æ–±–∞–≤—å—Ç–µ .session —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/sessions/")
            print("   üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python scripts/session_manager.py create")
            return

        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ {len(session_files)} session —Ñ–∞–π–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–µ—Å—Å–∏–∏
        await telegram_session_manager.initialize()

        authorized_count = 0
        for session_file in session_files[:3]:
            session_name = session_file.stem
            is_auth = await telegram_session_manager._check_session_auth(session_file)

            if is_auth:
                authorized_count += 1
                print(f"   ‚úÖ {session_name} - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            else:
                print(f"   ‚ùå {session_name} - –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")

        if authorized_count > 0:
            print(f"   ‚úÖ {authorized_count} —Å–µ—Å—Å–∏–π –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
            self.checks_passed += 1
        else:
            print("   ‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            print("   üí° –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

    async def check_proxies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""

        print("7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...")

        proxy_file = settings.data_dir / "proxies.json"

        if not proxy_file.exists():
            print("   ‚ö†Ô∏è –§–∞–π–ª proxies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ø–æ –ø—Ä–∏–º–µ—Ä—É data/proxies.json.example")
            print("   üí° –ò–ª–∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)")
            self.checks_passed += 1  # –ü—Ä–æ–∫—Å–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
            return

        try:
            with open(proxy_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)

            if not proxies:
                print("   ‚ö†Ô∏è –§–∞–π–ª proxies.json –ø—É—Å—Ç–æ–π")
            else:
                print(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                for i, (session_name, config) in enumerate(list(proxies.items())[:3]):
                    proxy_info = config.get("static", {})
                    host = proxy_info.get("host", "unknown")
                    port = proxy_info.get("port", "unknown")
                    print(f"   üì° {session_name}: {host}:{port}")

            self.checks_passed += 1

        except json.JSONDecodeError:
            print("   ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ proxies.json")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è proxies.json: {e}")

    async def check_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""

        print("8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –ª–æ–≥–æ–≤
            test_log_file = settings.logs_dir / "test.tmp"
            test_log_file.write_text("test")
            test_log_file.unlink()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö
            test_data_file = settings.data_dir / "test.tmp"
            test_data_file.write_text("test")
            test_data_file.unlink()

            print("   ‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
            self.checks_passed += 1

        except Exception as e:
            print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
            print("   üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–∞–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    checker = QuickStartChecker()

    try:
        success = await checker.run_all_checks()

        if success:
            print("\nüéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("   ‚Ä¢ python scripts/session_manager.py list - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
            print("   ‚Ä¢ python scripts/session_manager.py create <name> <phone> - —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
            print("   ‚Ä¢ python main.py - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")

            return 0
        else:
            return 1

    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return 1


if __name__ == "__main__":
    print("üéØ Lead Management System - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
    print("=" * 60)

    exit_code = asyncio.run(main())
    sys.exit(exit_code)