#!/usr/bin/env python3
# scripts/test_openai.py

"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()


async def test_openai():
    """–¢–µ—Å—Ç OpenAI API"""

    api_key = os.getenv("OPENAI__API_KEY")

    if not api_key or api_key == "sk-your-openai-api-key":
        print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return False

    print(f"üîë API –∫–ª—é—á: {api_key[:20]}...")

    try:
        from openai import AsyncOpenAI

        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")
        client = AsyncOpenAI(api_key=api_key)

        print("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "Hello, say 'test successful'"}],
            max_tokens=10
        )

        if response.choices:
            result = response.choices[0].message.content
            print(f"‚úÖ –û—Ç–≤–µ—Ç: {result}")
            print("‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç OpenAI API")
    print("=" * 30)

    success = asyncio.run(test_openai())
    exit(0 if success else 1)