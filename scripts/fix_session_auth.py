#!/usr/bin/env python3
# scripts/fix_session_auth.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Telegram —Å–µ—Å—Å–∏—è–º–∏
"""

import asyncio
import sys
import shutil
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from loguru import logger
from config.settings.base import settings
from storage.database import db_manager, get_db
from storage.models.base import Session, SessionStatus
from sqlalchemy import select, update


class SessionFixer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏"""

    def __init__(self):
        self.backup_dir = Path("data/session_backups")
        self.backup_dir.mkdir(parents=True, exist_ok=True)

    async def run_full_diagnostic(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""

        print("üîß –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π")
        print("=" * 60)

        total_issues = 0

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
        file_issues = await self.check_session_files()
        total_issues += file_issues

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_issues = await self.check_database_consistency()
        total_issues += db_issues

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_issues = await self.check_authorization()
        total_issues += auth_issues

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        duplicate_issues = await self.check_duplicates()
        total_issues += duplicate_issues

        # 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
        cleanup_issues = await self.cleanup_old_sessions()
        total_issues += cleanup_issues

        print("\n" + "=" * 60)
        if total_issues == 0:
            print("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print(f"üîß –ù–∞–π–¥–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python main.py")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/system.log")

        return total_issues

    async def check_session_files(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π"""

        print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π...")

        session_files = list(settings.sessions_dir.rglob("*.session"))

        if not session_files:
            print("   ‚ö†Ô∏è –§–∞–π–ª—ã —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 1

        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(session_files)}")

        issues = 0

        for session_file in session_files:
            session_name = session_file.stem

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if session_file.stat().st_size < 100:
                print(f"   ‚ùå {session_name} - —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª")
                await self._backup_and_remove_session(session_file)
                issues += 1
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            try:
                with open(session_file, 'rb') as f:
                    data = f.read(100)
                    if not data:
                        print(f"   ‚ùå {session_name} - —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                        await self._backup_and_remove_session(session_file)
                        issues += 1
            except Exception as e:
                print(f"   ‚ùå {session_name} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                await self._backup_and_remove_session(session_file)
                issues += 1

        if issues == 0:
            print("   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ")

        return issues

    async def check_database_consistency(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

        print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            await db_manager.initialize()

            async with get_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
                result = await db.execute(select(Session))
                db_sessions = result.scalars().all()

                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
                session_files = list(settings.sessions_dir.rglob("*.session"))
                file_sessions = {f.stem for f in session_files}

                issues = 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ –≤ –ë–î –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                for db_session in db_sessions:
                    if db_session.session_name not in file_sessions:
                        print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î: {db_session.session_name} (–Ω–µ—Ç —Ñ–∞–π–ª–∞)")
                        await db.delete(db_session)
                        issues += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
                db_session_names = {s.session_name for s in db_sessions}
                for file_session in file_sessions:
                    if file_session not in db_session_names:
                        print(f"   ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î: {file_session}")
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                        new_session = Session(
                            session_name=file_session,
                            status=SessionStatus.INACTIVE,
                            ai_enabled=True
                        )
                        db.add(new_session)
                        issues += 1

                await db.commit()

                if issues == 0:
                    print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞")

                return issues

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return 1

    async def check_authorization(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π"""

        print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π...")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            from core.integrations.telegram_client import TelegramSessionManager

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            session_manager = TelegramSessionManager()
            await session_manager.initialize()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            health_status = await session_manager.health_check()

            issues = 0
            authorized_count = 0

            for session_name, is_healthy in health_status.items():
                if is_healthy:
                    print(f"   ‚úÖ {session_name} - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                    authorized_count += 1
                else:
                    print(f"   ‚ùå {session_name} - –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                    await self._handle_unauthorized_session(session_name)
                    issues += 1

            print(f"   üìä –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {authorized_count}/{len(health_status)}")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä (–¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ disconnect_all –µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(session_manager, 'disconnect_all'):
                await session_manager.disconnect_all()

            return issues

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return 1

    async def check_duplicates(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ—Å—Å–∏–π"""

        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ—Å—Å–∏–π...")

        session_files = list(settings.sessions_dir.rglob("*.session"))
        session_names = [f.stem for f in session_files]

        # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∞–º
        seen_names = set()
        duplicates = []

        for name in session_names:
            if name in seen_names:
                duplicates.append(name)
            else:
                seen_names.add(name)

        if duplicates:
            print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
            for duplicate in duplicates:
                print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {duplicate}")
                # –ù–∞–π–¥–µ–º –∏ —É–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π)
                duplicate_files = [f for f in session_files if f.stem == duplicate]
                for i, dup_file in enumerate(duplicate_files[1:], 1):
                    await self._backup_and_remove_session(dup_file)
            return len(duplicates)
        else:
            print("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0

    async def cleanup_old_sessions(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Å—Å–∏–π"""

        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π...")

        try:
            async with get_db() as db:
                # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
                from sqlalchemy import and_
                from datetime import datetime, timedelta

                old_threshold = datetime.now() - timedelta(days=30)

                result = await db.execute(
                    select(Session).where(
                        and_(
                            Session.status == SessionStatus.INACTIVE,
                            Session.last_activity < old_threshold
                        )
                    )
                )
                old_sessions = result.scalars().all()

                if old_sessions:
                    print(f"   üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {len(old_sessions)}")
                    for session in old_sessions:
                        print(f"   üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º: {session.session_name}")
                        await self._archive_session(session.session_name)
                        await db.delete(session)

                    await db.commit()
                    return len(old_sessions)
                else:
                    print("   ‚úÖ –°—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return 0

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return 0

    async def _backup_and_remove_session(self, session_file: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""

        session_name = session_file.stem
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = self.backup_dir / f"{session_name}_{timestamp}.session.bak"

        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            shutil.copy2(session_file, backup_file)
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            session_file.unlink()
            logger.info(f"üì¶ –°–µ—Å—Å–∏—è {session_name} –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ {backup_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def _handle_unauthorized_session(self, session_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

        try:
            async with get_db() as db:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                await db.execute(
                    update(Session)
                    .where(Session.session_name == session_name)
                    .values(status=SessionStatus.BLOCKED)
                )
                await db.commit()

                logger.info(f"üö´ –°–µ—Å—Å–∏—è {session_name} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def _archive_session(self, session_name: str):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""

        session_files = list(settings.sessions_dir.rglob(f"{session_name}.session"))

        for session_file in session_files:
            await self._backup_and_remove_session(session_file)

    async def fix_specific_session(self, session_name: str):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

        print(f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: {session_name}")

        # –ù–∞–π–¥–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        session_files = list(settings.sessions_dir.rglob(f"{session_name}.session"))

        if not session_files:
            print(f"   ‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        session_file = session_files[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        print(f"   üìÅ –§–∞–π–ª: {session_file}")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {session_file.stat().st_size} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        try:
            from core.integrations.telegram_client import TelegramSessionManager
            session_manager = TelegramSessionManager()
            await session_manager.initialize()

            health_status = await session_manager.health_check()
            is_healthy = health_status.get(session_name, False)

            if is_healthy:
                print(f"   ‚úÖ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            else:
                print(f"   ‚ùå –°–µ—Å—Å–∏—è –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                print(f"   üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:")
                print(f"      1. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {session_file}")
                print(f"      2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º")
                print(
                    f"      3. –ö–æ–º–∞–Ω–¥–∞: python scripts/session_manager.py create {session_name} +–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞ basic_man")

            if hasattr(session_manager, 'disconnect_all'):
                await session_manager.disconnect_all()

            return is_healthy

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if len(sys.argv) < 2:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏ Telegram")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/fix_session_auth.py full                    - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("  python scripts/fix_session_auth.py session <session_name>  - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏")
        print("  python scripts/fix_session_auth.py files                   - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")
        print("  python scripts/fix_session_auth.py auth                    - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("  python scripts/fix_session_auth.py cleanup                 - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π")
        return

    command = sys.argv[1]
    fixer = SessionFixer()

    try:
        if command == "full":
            await fixer.run_full_diagnostic()
        elif command == "session" and len(sys.argv) > 2:
            session_name = sys.argv[2]
            await fixer.fix_specific_session(session_name)
        elif command == "files":
            await fixer.check_session_files()
        elif command == "auth":
            await fixer.check_authorization()
        elif command == "cleanup":
            await fixer.cleanup_old_sessions()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")