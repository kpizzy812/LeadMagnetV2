#!/usr/bin/env python3
# scripts/fix_sessions.py

"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from storage.database import db_manager
from core.handlers.message_handler import message_handler
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger
from storage.database import get_db


async def fix_disconnected_sessions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""

    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")

    try:
        await message_handler.initialize()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        session_stats = await message_handler.get_session_stats()

        disconnected_sessions = []
        for session_name, stats in session_stats.items():
            if not stats.get('is_connected') or stats.get('status') == 'disconnected':
                disconnected_sessions.append(session_name)

        if not disconnected_sessions:
            print("   ‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            return 0

        print(f"   üîß –ù–∞–π–¥–µ–Ω–æ {len(disconnected_sessions)} –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

        fixed_count = 0
        for session_name in disconnected_sessions:
            try:
                # –£–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º
                await message_handler.remove_session(session_name)
                await asyncio.sleep(1)
                await message_handler.add_session(session_name)

                print(f"   ‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_name}")
                fixed_count += 1

            except Exception as e:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å {session_name}: {e}")

        print(f"   üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}/{len(disconnected_sessions)}")
        return fixed_count

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
        return 0


async def fix_unauthorized_sessions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""

    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π...")

    try:
        await telegram_session_manager.initialize()

        health_check = await telegram_session_manager.health_check()

        unauthorized_sessions = []
        for session_name, is_healthy in health_check.items():
            if not is_healthy:
                unauthorized_sessions.append(session_name)

        if not unauthorized_sessions:
            print("   ‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            return 0

        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(unauthorized_sessions)} –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:")

        for session_name in unauthorized_sessions:
            print(f"   ‚ùå {session_name} - —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        print("\n   üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   1. –£–¥–∞–ª–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ .session —Ñ–∞–π–ª—ã")
        print("   2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö: python scripts/session_manager.py create <name> <phone>")

        return len(unauthorized_sessions)

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return 0


async def fix_inactive_sessions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""

    print("üò¥ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")

    try:
        await message_handler.initialize()

        session_stats = await message_handler.get_session_stats()

        inactive_sessions = []
        for session_name, stats in session_stats.items():
            # –°–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ, –Ω–æ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á
            if (stats.get('status') == 'active' and
                    stats.get('messages_24h', 0) == 0 and
                    stats.get('active_dialogs', 0) == 0):
                inactive_sessions.append(session_name)

        if not inactive_sessions:
            print("   ‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return 0

        print(f"   üîß –ù–∞–π–¥–µ–Ω–æ {len(inactive_sessions)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

        for session_name in inactive_sessions:
            print(f"   ‚ö†Ô∏è {session_name} - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 24—á")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
        print("\n   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏")
        print("   ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω—ã")

        return len(inactive_sessions)

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
        return 0


async def fix_queue_overflow():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏"""

    print("üì¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    try:
        await message_handler.initialize()

        realtime_stats = message_handler.get_realtime_stats()
        queue_size = realtime_stats.get('queue_size', 0)

        if queue_size == 0:
            print("   ‚úÖ –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
            return 0

        if queue_size < 10:
            print(f"   ‚úÖ –û—á–µ—Ä–µ–¥—å –≤ –Ω–æ—Ä–º–µ: {queue_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return 0

        print(f"   ‚ö†Ô∏è –ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å: {queue_size} —Å–æ–æ–±—â–µ–Ω–∏–π")

        if queue_size > 50:
            print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏!")
            print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python main.py")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OpenAI API –ª–∏–º–∏—Ç—ã")
            print("   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        else:
            print("   üí° –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å...")

        return queue_size

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
        return 0


async def cleanup_response_delays():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –æ—Ç–≤–µ—Ç–æ–≤"""

    print("‚è∞ –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –æ—Ç–≤–µ—Ç–æ–≤...")

    try:
        await message_handler.initialize()

        realtime_stats = message_handler.get_realtime_stats()
        delays_count = realtime_stats.get('total_response_delays', 0)

        if delays_count == 0:
            print("   ‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫")
            return 0

        print(f"   üîß –ù–∞–π–¥–µ–Ω–æ {delays_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫")

        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        from datetime import timedelta

        current_time = datetime.utcnow()
        old_delays = []

        for key, delay_time in message_handler.response_delays.items():
            if current_time - delay_time > timedelta(hours=1):
                old_delays.append(key)

        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
        for key in old_delays:
            del message_handler.response_delays[key]

        if old_delays:
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(old_delays)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫")
        else:
            print("   ‚úÖ –í—Å–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

        return len(old_delays)

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫: {e}")
        return 0


async def fix_database_inconsistencies():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        await db_manager.initialize()

        async with get_db() as db:
            from storage.models.base import Session, Conversation, Message
            from sqlalchemy import select, func, update

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω
            result = await db.execute(
                select(func.count(Session.id))
                .where(Session.persona_type.is_(None))
            )
            no_persona_count = result.scalar() or 0

            if no_persona_count > 0:
                print(f"   ‚ö†Ô∏è {no_persona_count} —Å–µ—Å—Å–∏–π –±–µ–∑ –ø–µ—Ä—Å–æ–Ω")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º basic_man
                await db.execute(
                    update(Session)
                    .where(Session.persona_type.is_(None))
                    .values(persona_type="basic_man")
                )
                await db.commit()

                print(f"   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞ basic_man –¥–ª—è {no_persona_count} —Å–µ—Å—Å–∏–π")
            else:
                print("   ‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∏–º–µ—é—Ç –ø–µ—Ä—Å–æ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
            result = await db.execute(
                select(func.count(Conversation.id))
                .where(
                    Conversation.is_whitelisted == True,
                    Conversation.requires_approval == True
                )
            )
            inconsistent_dialogs = result.scalar() or 0

            if inconsistent_dialogs > 0:
                print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {inconsistent_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏")

                await db.execute(
                    update(Conversation)
                    .where(
                        Conversation.is_whitelisted == True,
                        Conversation.requires_approval == True
                    )
                    .values(requires_approval=False)
                )
                await db.commit()

                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {inconsistent_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤")
            else:
                print("   ‚úÖ –§–ª–∞–≥–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

        await db_manager.close()
        return no_persona_count + inconsistent_dialogs

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return 0


async def run_full_diagnostic():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""

    print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)

    total_issues = 0

    # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    total_issues += await fix_database_inconsistencies()

    # 2. –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    total_issues += await fix_disconnected_sessions()

    # 3. –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    total_issues += await fix_unauthorized_sessions()

    # 4. –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    total_issues += await fix_inactive_sessions()

    # 5. –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
    queue_issues = await fix_queue_overflow()
    if queue_issues > 10:
        total_issues += 1

    # 6. –ó–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    total_issues += await cleanup_response_delays()

    print("\n" + "=" * 60)
    if total_issues == 0:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        print(f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

        if queue_issues > 50:
            print("   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ—á–µ—Ä–µ–¥–∏")
        if total_issues > 5:
            print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã")

        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É: python scripts/monitor_sessions.py realtime")
        print("   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —á–∞—Å")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if len(sys.argv) < 2:
        print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏")
        print()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python scripts/fix_sessions.py full          - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("  python scripts/fix_sessions.py disconnected  - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ")
        print("  python scripts/fix_sessions.py unauthorized  - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        print("  python scripts/fix_sessions.py inactive      - –Ω–∞–π—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ")
        print("  python scripts/fix_sessions.py queue         - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
        print("  python scripts/fix_sessions.py delays        - –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏")
        print("  python scripts/fix_sessions.py database      - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î")
        return

    command = sys.argv[1]

    try:
        if command == "full":
            await run_full_diagnostic()
        elif command == "disconnected":
            await fix_disconnected_sessions()
        elif command == "unauthorized":
            await fix_unauthorized_sessions()
        elif command == "inactive":
            await fix_inactive_sessions()
        elif command == "queue":
            await fix_queue_overflow()
        elif command == "delays":
            await cleanup_response_delays()
        elif command == "database":
            await fix_database_inconsistencies()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")