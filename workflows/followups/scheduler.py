# workflows/followups/scheduler.py

import asyncio
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload

from storage.database import get_db
from storage.models.base import (
    FollowupSchedule, Conversation, Lead, Session, ConversationStatus
)
from personas.persona_factory import create_persona_for_session, PersonaRole
from core.integrations.telegram_client import telegram_session_manager
from loguru import logger


class FollowupScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.running = False
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤")

        while self.running:
            try:
                await self._process_scheduled_followups()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")
                await asyncio.sleep(10)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–ª–æ—É–∞–ø–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def schedule_followup(
            self,
            conversation_id: int,
            followup_type: str,
            delay_hours: int = 24,
            custom_message: Optional[str] = None
    ) -> bool:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            async with get_db() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                conv_result = await db.execute(
                    select(Conversation)
                    .options(selectinload(Conversation.lead))
                    .options(selectinload(Conversation.session))
                    .where(Conversation.id == conversation_id)
                )
                conversation = conv_result.scalar_one_or_none()

                if not conversation:
                    logger.error(f"‚ùå –î–∏–∞–ª–æ–≥ {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∂–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–ª–æ—É–∞–ø–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                existing_result = await db.execute(
                    select(FollowupSchedule)
                    .where(
                        FollowupSchedule.conversation_id == conversation_id,
                        FollowupSchedule.followup_type == followup_type,
                        FollowupSchedule.executed == False
                    )
                )
                existing = existing_result.scalar_one_or_none()

                if existing:
                    logger.warning(f"‚ö†Ô∏è –§–æ–ª–æ—É–∞–ø {followup_type} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conversation_id}")
                    return False

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ–ª–æ—É–∞–ø
                scheduled_at = datetime.utcnow() + timedelta(hours=delay_hours)

                followup = FollowupSchedule(
                    conversation_id=conversation_id,
                    followup_type=followup_type,
                    scheduled_at=scheduled_at,
                    message_template=custom_message
                )

                db.add(followup)
                await db.commit()

                logger.info(
                    f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ñ–æ–ª–æ—É–∞–ø {followup_type} –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conversation_id} "
                    f"–Ω–∞ {scheduled_at.strftime('%d.%m.%Y %H:%M')}"
                )

                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–ª–æ—É–∞–ø–∞: {e}")
            return False

    async def _process_scheduled_followups(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤"""

        try:
            async with get_db() as db:
                # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ñ–æ–ª–æ—É–∞–ø—ã
                now = datetime.utcnow()

                result = await db.execute(
                    select(FollowupSchedule)
                    .options(selectinload(FollowupSchedule.conversation))
                    .options(selectinload(FollowupSchedule.conversation, Conversation.lead))
                    .options(selectinload(FollowupSchedule.conversation, Conversation.session))
                    .where(
                        FollowupSchedule.executed == False,
                        FollowupSchedule.scheduled_at <= now
                    )
                    .order_by(FollowupSchedule.scheduled_at)
                    .limit(10)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –∑–∞ —Ä–∞–∑
                )

                followups = result.scalars().all()

                if not followups:
                    return

                logger.info(f"üì¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(followups)} —Ñ–æ–ª–æ—É–∞–ø–æ–≤")

                for followup in followups:
                    await self._execute_followup(followup)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")

    async def _execute_followup(self, followup: FollowupSchedule):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ–ª–æ—É–∞–ø–∞"""

        try:
            conversation = followup.conversation

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ª–æ–≥ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if conversation.status != ConversationStatus.ACTIVE:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–ª–æ—É–∞–ø –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ {conversation.id}")
                await self._mark_followup_executed(followup.id, "–î–∏–∞–ª–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await self._generate_followup_message(followup, conversation)

            if not message_text:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–æ–ª–æ—É–∞–ø–∞ {followup.id}")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await telegram_session_manager.send_message(
                session_name=conversation.session.session_name,
                username=conversation.lead.username,
                message=message_text
            )

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                await self._save_followup_message(conversation, message_text, followup.followup_type)

                # –ü–æ–º–µ—á–∞–µ–º —Ñ–æ–ª–æ—É–∞–ø –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
                await self._mark_followup_executed(followup.id, message_text)

                logger.success(
                    f"‚úÖ –§–æ–ª–æ—É–∞–ø {followup.followup_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: "
                    f"{conversation.session.session_name} ‚Üí {conversation.lead.username}"
                )

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ–ª–æ—É–∞–ø –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await self._schedule_next_followup(conversation, followup.followup_type)

            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ–ª–æ—É–∞–ø {followup.id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–ª–æ—É–∞–ø–∞ {followup.id}: {e}")

    async def _generate_followup_message(
            self,
            followup: FollowupSchedule,
            conversation: Conversation
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""

        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if followup.message_template:
                return followup.message_template

            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            session = conversation.session
            if not session.persona_type:
                logger.error(f"‚ùå –£ —Å–µ—Å—Å–∏–∏ {session.session_name} –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω—ã")
                return None

            persona = create_persona_for_session(
                session_name=session.session_name,
                persona_type=PersonaRole(session.persona_type),
                ref_link=session.project_ref_link or "",
                project_id="default"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = {
                "conversation_id": conversation.id,
                "lead_username": conversation.lead.username,
                "current_stage": conversation.current_stage,
                "ref_link_sent": conversation.ref_link_sent,
                "messages_count": conversation.messages_count,
                "last_message_time": conversation.last_user_message_at
            }

            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –æ—Ç –ø–µ—Ä—Å–æ–Ω—ã
            message_text = persona.get_followup_message_template(followup.followup_type, context)

            return message_text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    async def _save_followup_message(
            self,
            conversation: Conversation,
            message_text: str,
            followup_type: str
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""

        try:
            from storage.models.base import Message, MessageRole

            async with get_db() as db:
                message = Message(
                    conversation_id=conversation.id,
                    lead_id=conversation.lead_id,
                    session_id=conversation.session_id,
                    role=MessageRole.ASSISTANT,
                    content=message_text,
                    funnel_stage=conversation.current_stage,
                    is_followup=True,
                    processed=True
                )

                db.add(message)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞
                conversation.messages_count += 1
                conversation.assistant_messages_count += 1
                conversation.last_assistant_message_at = datetime.utcnow()

                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _mark_followup_executed(self, followup_id: int, generated_message: str):
        """–û—Ç–º–µ—Ç–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ"""

        try:
            async with get_db() as db:
                await db.execute(
                    update(FollowupSchedule)
                    .where(FollowupSchedule.id == followup_id)
                    .values(
                        executed=True,
                        executed_at=datetime.utcnow(),
                        generated_message=generated_message
                    )
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ñ–æ–ª–æ—É–∞–ø–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ: {e}")

    async def _schedule_next_followup(self, conversation: Conversation, current_type: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ–ª–æ—É–∞–ø–∞"""

        # –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ–ª–æ—É–∞–ø–æ–≤
        followup_sequence = {
            "reminder": ("value", 48),  # –ß–µ—Ä–µ–∑ 2 –¥–Ω—è -> —Ü–µ–Ω–Ω–æ—Å—Ç—å
            "value": ("proof", 72),  # –ß–µ—Ä–µ–∑ 3 –¥–Ω—è -> –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
            "proof": ("final", 96),  # –ß–µ—Ä–µ–∑ 4 –¥–Ω—è -> —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
            "final": None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π
        }

        next_followup = followup_sequence.get(current_type)

        if next_followup and not conversation.ref_link_sent:
            next_type, delay_hours = next_followup

            await self.schedule_followup(
                conversation_id=conversation.id,
                followup_type=next_type,
                delay_hours=delay_hours
            )

    async def schedule_followup_for_inactive_conversation(self, conversation_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–ª–æ—É–∞–ø–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""

        try:
            async with get_db() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conv_result = await db.execute(
                    select(Conversation)
                    .where(Conversation.id == conversation_id)
                )
                conversation = conv_result.scalar_one_or_none()

                if not conversation:
                    return

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–ª –±–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤ - –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                if conversation.last_user_message_at:
                    time_since_last = datetime.utcnow() - conversation.last_user_message_at

                    if time_since_last > timedelta(hours=4):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—â–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–ª–æ—É–∞–ø–∞
                        existing_result = await db.execute(
                            select(FollowupSchedule)
                            .where(
                                FollowupSchedule.conversation_id == conversation_id,
                                FollowupSchedule.executed == False
                            )
                        )
                        existing = existing_result.scalar_one_or_none()

                        if not existing:
                            await self.schedule_followup(
                                conversation_id=conversation_id,
                                followup_type="reminder",
                                delay_hours=4  # –ß–µ—Ä–µ–∑ 4 —á–∞—Å–∞
                            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–ª–æ—É–∞–ø–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {e}")

    async def get_pending_followups(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤"""

        try:
            async with get_db() as db:
                result = await db.execute(
                    select(FollowupSchedule)
                    .options(selectinload(FollowupSchedule.conversation))
                    .options(selectinload(FollowupSchedule.conversation, Conversation.lead))
                    .options(selectinload(FollowupSchedule.conversation, Conversation.session))
                    .where(FollowupSchedule.executed == False)
                    .order_by(FollowupSchedule.scheduled_at)
                )

                followups = result.scalars().all()

                result_list = []
                for followup in followups:
                    result_list.append({
                        "id": followup.id,
                        "type": followup.followup_type,
                        "scheduled_at": followup.scheduled_at,
                        "conversation_id": followup.conversation_id,
                        "lead_username": followup.conversation.lead.username,
                        "session_name": followup.conversation.session.session_name,
                        "time_left": (followup.scheduled_at - datetime.utcnow()).total_seconds()
                    })

                return result_list

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")
            return []

    async def cancel_followup(self, followup_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∞ —Ñ–æ–ª–æ—É–∞–ø–∞"""

        try:
            async with get_db() as db:
                await db.execute(
                    update(FollowupSchedule)
                    .where(FollowupSchedule.id == followup_id)
                    .values(
                        executed=True,
                        executed_at=datetime.utcnow(),
                        generated_message="–û—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                    )
                )
                await db.commit()

                logger.info(f"üóëÔ∏è –§–æ–ª–æ—É–∞–ø {followup_id} –æ—Ç–º–µ–Ω–µ–Ω")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–æ–ª–æ—É–∞–ø–∞: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
followup_scheduler = FollowupScheduler()