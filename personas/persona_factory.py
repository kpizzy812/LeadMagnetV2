# personas/persona_factory.py

from typing import Dict, Optional
from .base.base_persona import BasePersona, PersonaRole, ProjectKnowledge
from .base.basic_man import BasicManPersona
from .base.basic_woman import BasicWomanPersona
from .base.hyip_man import HyipManPersona
from loguru import logger


class PersonaFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω"""

    _persona_classes = {
        PersonaRole.BASIC_MAN: BasicManPersona,
        PersonaRole.BASIC_WOMAN: BasicWomanPersona,
        PersonaRole.HYIP_MAN: HyipManPersona,
        # PersonaRole.HYIP_WOMAN: HyipWomanPersona,  # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
        # PersonaRole.INVESTOR_MAN: InvestorManPersona,  # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    }

    @classmethod
    def create_persona(
            cls,
            persona_type: PersonaRole,
            ref_link: str,
            project_knowledge: ProjectKnowledge
    ) -> BasePersona:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã –ø–æ —Ç–∏–ø—É"""

        if persona_type not in cls._persona_classes:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω—ã: {persona_type}")
            raise ValueError(f"Unsupported persona type: {persona_type}")

        persona_class = cls._persona_classes[persona_type]

        try:
            persona = persona_class(ref_link=ref_link, project_knowledge=project_knowledge)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞: {persona_type} ({persona.traits.name})")
            return persona

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã {persona_type}: {e}")
            raise

    @classmethod
    def get_available_personas(cls) -> Dict[PersonaRole, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω"""
        result = {}
        for persona_type, persona_class in cls._persona_classes.items():
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
            temp_knowledge = ProjectKnowledge(
                project_name="Test",
                description="Test",
                advantages=[],
                risks=[],
                target_audience="Test",
                support_contact="Test",
                chat_link=None,
                typical_returns="Test",
                minimum_investment="Test"
            )
            temp_persona = persona_class("test_link", temp_knowledge)
            result[persona_type] = temp_persona.traits.name

        return result

    @classmethod
    def register_persona_class(cls, persona_type: PersonaRole, persona_class: type):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω—ã (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)"""
        if not issubclass(persona_class, BasePersona):
            raise ValueError("Persona class must inherit from BasePersona")

        cls._persona_classes[persona_type] = persona_class
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞: {persona_type}")


class ProjectKnowledgeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–Ω–∞–Ω–∏–π –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö"""

    def __init__(self):
        self._projects: Dict[str, ProjectKnowledge] = {}

    def add_project(self, project_id: str, knowledge: ProjectKnowledge):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        self._projects[project_id] = knowledge
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project_id} ({knowledge.project_name})")

    def get_project(self, project_id: str) -> Optional[ProjectKnowledge]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        return self._projects.get(project_id)

    def get_all_projects(self) -> Dict[str, ProjectKnowledge]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        return self._projects.copy()

    def remove_project(self, project_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        if project_id in self._projects:
            del self._projects[project_id]
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
persona_factory = PersonaFactory()
project_knowledge_manager = ProjectKnowledgeManager()


# –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def create_persona_for_session(
        session_name: str,
        persona_type: PersonaRole,
        ref_link: str,
        project_id: str
) -> BasePersona:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    project_knowledge = project_knowledge_manager.get_project(project_id)
    if not project_knowledge:
        raise ValueError(f"Project {project_id} not found")

    persona = persona_factory.create_persona(persona_type, ref_link, project_knowledge)

    logger.info(f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞ {persona.traits.name} ({persona_type}) —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")

    return persona


def setup_default_project():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    default_project = ProjectKnowledge(
        project_name="CryptoBot",
        description="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò",
        advantages=[
            "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ 24/7",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –ò–ò",
            "–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "–ë—ã—Å—Ç—Ä—ã–µ –≤—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤",
            "–ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        ],
        risks=[
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏"
        ],
        target_audience="–õ—é–¥–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–∞—Å—Å–∏–≤–Ω–æ–º –¥–æ—Ö–æ–¥–µ",
        support_contact="@cryptobot_support",
        chat_link="https://t.me/cryptobot_chat",
        typical_returns="5-15% –≤ –º–µ—Å—è—Ü",
        minimum_investment="–æ—Ç $10"
    )

    project_knowledge_manager.add_project("default", default_project)
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")