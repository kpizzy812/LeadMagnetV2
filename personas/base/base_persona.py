# personas/base/base_persona.py

from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum


class CommunicationStyle(str, Enum):
    """–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è"""
    CASUAL = "casual"
    FRIENDLY = "friendly"
    PROFESSIONAL = "professional"
    ENTHUSIASTIC = "enthusiastic"
    CAUTIOUS = "cautious"


class PersonaRole(str, Enum):
    """–†–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω"""
    BASIC_MAN = "basic_man"
    BASIC_WOMAN = "basic_woman"
    HYIP_MAN = "hyip_man"
    HYIP_WOMAN = "hyip_woman"
    INVESTOR_MAN = "investor_man"


@dataclass
class PersonaTraits:
    """–ß–µ—Ä—Ç—ã –ø–µ—Ä—Å–æ–Ω—ã"""
    name: str
    age_range: str
    occupation: str
    experience_level: str
    risk_tolerance: str
    communication_style: CommunicationStyle
    typical_phrases: List[str]
    emoji_usage: str  # low, medium, high
    grammar_style: str  # perfect, casual, mistakes
    response_patterns: Dict[str, List[str]]


@dataclass
class ProjectKnowledge:
    """–ó–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    project_name: str
    description: str
    advantages: List[str]
    risks: List[str]
    target_audience: str
    support_contact: str
    chat_link: Optional[str]
    typical_returns: str
    minimum_investment: str


class BasePersona(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω"""

    def __init__(self, ref_link: str, project_knowledge: ProjectKnowledge):
        self.ref_link = ref_link
        self.project_knowledge = project_knowledge
        self.traits = self._define_traits()

    @property
    @abstractmethod
    def persona_type(self) -> PersonaRole:
        """–¢–∏–ø –ø–µ—Ä—Å–æ–Ω—ã"""
        pass

    @abstractmethod
    def _define_traits(self) -> PersonaTraits:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä—Ç –ø–µ—Ä—Å–æ–Ω—ã"""
        pass

    @abstractmethod
    def get_system_prompt(self, context: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        pass

    def get_funnel_stage_instruction(self, stage: str, context: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏"""
        instructions = {
            "initial_contact": self._get_initial_contact_instruction(context),
            "trust_building": self._get_trust_building_instruction(context),
            "project_inquiry": self._get_project_inquiry_instruction(context),
            "interest_qualification": self._get_interest_qualification_instruction(context),
            "presentation": self._get_presentation_instruction(context),
            "objection_handling": self._get_objection_handling_instruction(context),
            "conversion": self._get_conversion_instruction(context),
            "post_conversion": self._get_post_conversion_instruction(context),
        }
        return instructions.get(stage, "–ü—Ä–æ–¥–æ–ª–∂–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.")

    @abstractmethod
    def _get_initial_contact_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        pass

    @abstractmethod
    def _get_trust_building_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è"""
        pass

    @abstractmethod
    def _get_project_inquiry_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö"""
        pass

    @abstractmethod
    def _get_interest_qualification_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
        pass

    @abstractmethod
    def _get_presentation_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        pass

    @abstractmethod
    def _get_objection_handling_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π"""
        pass

    @abstractmethod
    def _get_conversion_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        pass

    @abstractmethod
    def _get_post_conversion_instruction(self, context: Dict[str, Any]) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        pass

    def get_followup_message_template(self, followup_type: str, context: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ñ–æ–ª–æ—É–∞–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
        templates = {
            "reminder": self._get_reminder_template(context),
            "value": self._get_value_template(context),
            "proof": self._get_proof_template(context),
            "final": self._get_final_template(context),
        }
        return templates.get(followup_type, "–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è? üòä")

    @abstractmethod
    def _get_reminder_template(self, context: Dict[str, Any]) -> str:
        """–®–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        pass

    @abstractmethod
    def _get_value_template(self, context: Dict[str, Any]) -> str:
        """–®–∞–±–ª–æ–Ω —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        pass

    @abstractmethod
    def _get_proof_template(self, context: Dict[str, Any]) -> str:
        """–®–∞–±–ª–æ–Ω —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        pass

    @abstractmethod
    def _get_final_template(self, context: Dict[str, Any]) -> str:
        """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω"""
        pass

    def analyze_user_message(self, message: str, conversation_history: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        analysis = {
            "sentiment": self._detect_sentiment(message),
            "interest_level": self._detect_interest_level(message),
            "objections": self._detect_objections(message),
            "questions": self._detect_questions(message),
            "project_mentions": self._detect_project_mentions(message),
        }
        return analysis

    def _detect_sentiment(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–∫—Ä—É—Ç–æ", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–¥–∞", "–æ–∫"]
        negative_words = ["–ø–ª–æ—Ö–æ", "–Ω–µ –≤–µ—Ä—é", "—Å–∫–∞–º", "–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É", "–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"]

        message_lower = message.lower()
        positive_count = sum(1 for word in positive_words if word in message_lower)
        negative_count = sum(1 for word in negative_words if word in message_lower)

        if positive_count > negative_count:
            return "positive"
        elif negative_count > positive_count:
            return "negative"
        else:
            return "neutral"

    def _detect_interest_level(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
        high_interest = ["—Ä–∞—Å—Å–∫–∞–∂–∏", "–∫–∞–∫", "—Å–∫–æ–ª—å–∫–æ", "—Ö–æ—á—É", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–¥–∞–≤–∞–π", "–º–æ–∂–Ω–æ"]
        low_interest = ["–Ω–µ –∑–Ω–∞—é", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–ø–æ—Å–º–æ—Ç—Ä–∏–º", "–ø–æ–¥—É–º–∞—é"]

        message_lower = message.lower()

        if any(word in message_lower for word in high_interest):
            return "high"
        elif any(word in message_lower for word in low_interest):
            return "low"
        else:
            return "medium"

    def _detect_objections(self, message: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π"""
        objections = []
        message_lower = message.lower()

        if any(word in message_lower for word in ["—Å–∫–∞–º", "–æ–±–º–∞–Ω", "—Ä–∞–∑–≤–æ–¥"]):
            objections.append("trust_issue")
        if any(word in message_lower for word in ["–Ω–µ—Ç –¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–º–Ω–æ–≥–æ"]):
            objections.append("financial")
        if any(word in message_lower for word in ["–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—Å–ª–æ–∂–Ω–æ", "–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å"]):
            objections.append("complexity")
        if any(word in message_lower for word in ["–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏", "–Ω–µ–∫–æ–≥–¥–∞", "–∑–∞–Ω—è—Ç"]):
            objections.append("time")

        return objections

    def _detect_questions(self, message: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        questions = []
        message_lower = message.lower()

        if any(word in message_lower for word in ["–∫–∞–∫", "–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º"]):
            questions.append("how")
        if any(word in message_lower for word in ["—Å–∫–æ–ª—å–∫–æ", "–∫–∞–∫–∞—è —Å—É–º–º–∞"]):
            questions.append("amount")
        if any(word in message_lower for word in ["–∫–æ–≥–¥–∞", "—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ"]):
            questions.append("timing")
        if any(word in message_lower for word in ["—á—Ç–æ —ç—Ç–æ", "—á—Ç–æ –∑–∞"]):
            questions.append("what")
        if any(word in message_lower for word in ["–±–µ–∑–æ–ø–∞—Å–Ω–æ", "–Ω–∞–¥–µ–∂–Ω–æ", "—Ä–∏—Å–∫–∏"]):
            questions.append("safety")

        return questions

    def _detect_project_mentions(self, message: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        project_keywords = ["–ø—Ä–æ–µ–∫—Ç", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–±–æ—Ç", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥"]
        mentions = []
        message_lower = message.lower()

        for keyword in project_keywords:
            if keyword in message_lower:
                mentions.append(keyword)

        return mentions