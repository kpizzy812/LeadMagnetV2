from typing import Dict, List, Optional, Set
from datetime import datetime, timedelta
from sqlalchemy import select, update
from storage.database import get_db
from storage.models.base import Conversation, Lead, Session
from loguru import logger


class ConversationFilter:
    """–°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.auto_approve_keywords = [
            "–ø—Ä–æ–µ–∫—Ç", "–∏–Ω–≤–µ—Å—Ç", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å",
            "–¥–µ–Ω—å–≥–∏", "–∫—Ä–∏–ø—Ç–∞", "–±–∏—Ç–∫–æ–∏–Ω", "mining", "stake"
        ]

        self.blacklist_keywords = [
            "—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞", "–ø—Ä–æ–¥–∞–∂–∞", "–∫—É–ø–∏—Ç—å", "—Å–∫–∏–¥–∫–∞",
            "–ø—Ä–æ–º–æ–∫–æ–¥", "–∞–∫—Ü–∏—è", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞"
        ]

        # –ë–µ–ª—ã–µ —Å–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
        self.whitelisted_usernames: Set[str] = set()
        self.blacklisted_usernames: Set[str] = set()

    async def should_respond_to_conversation(
            self,
            conversation: Conversation,
            message_text: str
    ) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ

        Returns:
            (should_respond: bool, reason: str)
        """

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if conversation.is_blacklisted:
            return False, "–î–∏–∞–ª–æ–≥ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"

        if conversation.lead.username in self.blacklisted_usernames:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"

        # 2. –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º
        if conversation.is_whitelisted:
            return True, "–î–∏–∞–ª–æ–≥ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"

        if conversation.lead.username in self.whitelisted_usernames:
            return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"

        # 3. –î–∏–∞–ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é - –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º
        if not conversation.auto_created:
            return True, "–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é"

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        if conversation.requires_approval:
            return False, "–î–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        message_lower = message_text.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        spam_count = sum(1 for keyword in self.blacklist_keywords
                         if keyword in message_lower)
        if spam_count >= 2:
            await self._auto_blacklist_conversation(conversation.id, "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º")
            return False, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–∞–º"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        relevant_count = sum(1 for keyword in self.auto_approve_keywords
                             if keyword in message_lower)
        if relevant_count >= 1:
            await self._auto_whitelist_conversation(conversation.id, "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            return True, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
        if conversation.messages_count >= 3:  # –ï—Å–ª–∏ —É–∂–µ –æ–±—â–∞–ª–∏—Å—å
            return True, "–î–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã–π"

        # 7. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        await self._set_requires_approval(conversation.id, True)
        return False, "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"

    async def _auto_blacklist_conversation(self, conversation_id: int, reason: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            async with get_db() as db:
                await db.execute(
                    update(Conversation)
                    .where(Conversation.id == conversation_id)
                    .values(is_blacklisted=True)
                )
                await db.commit()

            logger.warning(f"üö´ –î–∏–∞–ª–æ–≥ {conversation_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {reason}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}")

    async def _auto_whitelist_conversation(self, conversation_id: int, reason: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            async with get_db() as db:
                await db.execute(
                    update(Conversation)
                    .where(Conversation.id == conversation_id)
                    .values(
                        is_whitelisted=True,
                        requires_approval=False
                    )
                )
                await db.commit()

            logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥ {conversation_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {reason}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {e}")

    async def _set_requires_approval(self, conversation_id: int, requires: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        try:
            async with get_db() as db:
                await db.execute(
                    update(Conversation)
                    .where(Conversation.id == conversation_id)
                    .values(requires_approval=requires)
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
conversation_filter = ConversationFilter()