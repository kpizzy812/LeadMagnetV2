# core/scanning/retrospective_scanner.py

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Any, Tuple
from dataclasses import dataclass
from sqlalchemy import select, and_, or_, update
from telethon import TelegramClient
from telethon.tl.types import User, PeerUser, Message
from telethon.errors import FloodWaitError, AuthKeyInvalidError, PeerFloodError

from config.settings.base import settings
from storage.database import get_db
from storage.models.base import Session, SessionStatus, Conversation, Message as DBMessage
from core.integrations.telegram.client_factory import TelegramClientFactory
from core.integrations.telegram.proxy_manager import ProxyManager
from core.engine.conversation_manager import conversation_manager
from loguru import logger


@dataclass
class ScanResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    session_name: str
    new_messages_count: int
    scanned_dialogs: int
    errors: List[str]
    scan_duration: float
    success: bool


@dataclass
class NewMessageData:
    """–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    session_name: str
    username: str
    telegram_id: int
    message_text: str
    message_id: int
    timestamp: datetime
    is_from_cold_outreach: bool = False


class RetrospectiveScanner:
    """
    –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ - –∑–∞–º–µ–Ω—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç, —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    def __init__(self):
        self.client_factory = TelegramClientFactory()
        self.proxy_manager = ProxyManager()
        self.scan_interval = settings.system.retrospective_scan_interval  # –ò–∑ .env
        self.is_running = False
        self.current_scan_task: Optional[asyncio.Task] = None
        self.scan_stats = {
            "total_scans": 0,
            "successful_scans": 0,
            "failed_scans": 0,
            "total_new_messages": 0,
            "average_scan_time": 0.0,
            "last_scan_time": None,
            "next_scan_time": None
        }

    async def start_scanning(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return

        self.is_running = True
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.scan_interval}—Å)")

        self.current_scan_task = asyncio.create_task(self._scanning_loop())

    async def stop_scanning(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_running = False
        if self.current_scan_task:
            self.current_scan_task.cancel()
            try:
                await self.current_scan_task
            except asyncio.CancelledError:
                pass
        logger.info("üõë –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def _scanning_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ —Ö–æ–ª–æ–¥–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                if await self._is_cold_outreach_active():
                    logger.info("üì§ Cold outreach –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self.scan_stats["next_scan_time"] = datetime.utcnow() + timedelta(seconds=self.scan_interval)

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                await self._perform_full_scan()

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await asyncio.sleep(self.scan_interval)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                self.scan_stats["failed_scans"] += 1
                await asyncio.sleep(min(60, self.scan_interval))  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _is_cold_outreach_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from cold_outreach.campaigns.campaign_manager import campaign_manager
            return await campaign_manager.has_active_campaigns()
        except ImportError:
            # –ï—Å–ª–∏ cold_outreach –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–ª–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return False

    async def _perform_full_scan(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        scan_start = time.time()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ò–ò
            active_sessions = await self._get_active_sessions()

            if not active_sessions:
                logger.info("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(active_sessions)} —Å–µ—Å—Å–∏–π")

            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
            semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏

            scan_tasks = [
                self._scan_session_with_semaphore(semaphore, session)
                for session in active_sessions
            ]

            scan_results = await asyncio.gather(*scan_tasks, return_exceptions=True)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._process_scan_results(scan_results, scan_start)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.scan_stats["failed_scans"] += 1

    async def _scan_session_with_semaphore(self, semaphore: asyncio.Semaphore, session: Session) -> ScanResult:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º"""
        async with semaphore:
            return await self._scan_single_session(session)

    async def _scan_single_session(self, session: Session) -> ScanResult:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        session_name = session.session_name
        scan_start = time.time()
        new_messages = []
        errors = []
        scanned_dialogs = 0

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π –∫–ª–∏–µ–Ω—Ç
            client = await self._create_temporary_client(session_name)
            if not client:
                return ScanResult(
                    session_name=session_name,
                    new_messages_count=0,
                    scanned_dialogs=0,
                    errors=["–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç"],
                    scan_duration=time.time() - scan_start,
                    success=False
                )

            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ª—é–¥—å–º–∏
                dialogs = await self._get_user_dialogs(client)
                scanned_dialogs = len(dialogs)

                logger.debug(f"üìä {session_name}: –Ω–∞–π–¥–µ–Ω–æ {scanned_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤")

                # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for dialog in dialogs:
                    try:
                        new_msgs = await self._scan_dialog_for_new_messages(
                            client, session_name, dialog
                        )
                        new_messages.extend(new_msgs)
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {dialog.name}: {e}"
                        errors.append(error_msg)
                        logger.debug(f"‚ö†Ô∏è {session_name}: {error_msg}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if new_messages:
                    await self._process_new_messages(new_messages)

            finally:
                # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await client.disconnect()

            scan_duration = time.time() - scan_start
            logger.info(
                f"‚úÖ {session_name}: {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, {scanned_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤, {scan_duration:.1f}—Å")

            return ScanResult(
                session_name=session_name,
                new_messages_count=len(new_messages),
                scanned_dialogs=scanned_dialogs,
                errors=errors,
                scan_duration=scan_duration,
                success=True
            )

        except (AuthKeyInvalidError, PeerFloodError) as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}"
            errors.append(error_msg)
            logger.error(f"‚ùå {session_name}: {error_msg}")

            # –û—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
            await self._mark_session_inactive(session_name)

        except FloodWaitError as e:
            error_msg = f"Flood wait: {e.seconds}—Å"
            errors.append(error_msg)
            logger.warning(f"‚è∞ {session_name}: {error_msg}")

        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            errors.append(error_msg)
            logger.error(f"‚ùå {session_name}: {error_msg}")

        return ScanResult(
            session_name=session_name,
            new_messages_count=0,
            scanned_dialogs=scanned_dialogs,
            errors=errors,
            scan_duration=time.time() - scan_start,
            success=False
        )

    async def _create_temporary_client(self, session_name: str) -> Optional[TelegramClient]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            proxy_config = await self.proxy_manager.get_proxy_for_session(session_name)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = await self.client_factory.create_client(
                session_name=session_name,
                proxy=proxy_config
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                logger.error(f"‚ùå {session_name}: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await client.disconnect()
                return None

            return client

        except Exception as e:
            logger.error(f"‚ùå {session_name}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return None

    async def _get_user_dialogs(self, client: TelegramClient) -> List[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            dialogs = []
            async for dialog in client.iter_dialogs():
                # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–Ω–µ –±–æ—Ç—ã, –Ω–µ –≥—Ä—É–ø–ø—ã)
                if dialog.is_user and not dialog.entity.bot:
                    dialogs.append(dialog)
            return dialogs
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []

    async def _scan_dialog_for_new_messages(self, client: TelegramClient, session_name: str, dialog) -> List[
        NewMessageData]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user = dialog.entity
            username = user.username or str(user.id)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–î
            last_processed_msg_id = await self._get_last_processed_message_id(session_name, username)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ)
            new_messages = []
            async for message in client.iter_messages(dialog, limit=50):
                # –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –æ—Ç –Ω–∞—Å)
                if message.out:
                    continue

                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if message.id <= last_processed_msg_id:
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                if not message.text or len(message.text.strip()) < 1:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –¥–∏–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω cold outreach
                is_cold_outreach = await self._is_dialog_from_cold_outreach(session_name, username)

                new_messages.append(NewMessageData(
                    session_name=session_name,
                    username=username,
                    telegram_id=user.id,
                    message_text=message.text,
                    message_id=message.id,
                    timestamp=message.date,
                    is_from_cold_outreach=is_cold_outreach
                ))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)
            new_messages.reverse()
            return new_messages

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {dialog.name}: {e}")
            return []

    async def _process_new_messages(self, new_messages: List[NewMessageData]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            for msg_data in new_messages:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
                await self._update_last_processed_message_id(
                    msg_data.session_name,
                    msg_data.username,
                    msg_data.message_id
                )

                # –†–µ—à–∞–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
                should_respond = await self._should_respond_to_message(msg_data)

                if should_respond:
                    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ conversation_manager –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                    await self._handle_message_response(msg_data)
                else:
                    logger.info(f"‚è∏Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg_data.username} —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞")
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    await self._notify_admin_about_unapproved_message(msg_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _should_respond_to_message(self, msg_data: NewMessageData) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω cold outreach - –æ—Ç–≤–µ—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if msg_data.is_from_cold_outreach:
            return True

        # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ª–µ–≤—ã–π –Ω–∞–ø–∏—Å–∞–ª –ø–µ—Ä–≤—ã–º - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∏–∞–ª–æ–≥ –≤ —Å–∏—Å—Ç–µ–º–µ
        conversation = await conversation_manager.get_conversation(
            lead_username=msg_data.username,
            session_name=msg_data.session_name,
            create_if_not_exists=False
        )

        if conversation and conversation.admin_approved:
            return True

        return False

    async def _handle_message_response(self, msg_data: NewMessageData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ conversation_manager"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
            conversation = await conversation_manager.get_conversation(
                lead_username=msg_data.username,
                session_name=msg_data.session_name,
                create_if_not_exists=True
            )

            if conversation:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ conversation_manager
                await conversation_manager.process_incoming_message(
                    conversation=conversation,
                    message_text=msg_data.message_text,
                    timestamp=msg_data.timestamp
                )

                logger.info(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_data.username} ‚Üí {msg_data.session_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg_data.username}: {e}")

    async def _get_active_sessions(self) -> List[Session]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(
                        and_(
                            Session.status == SessionStatus.ACTIVE,
                            Session.ai_enabled == True
                        )
                    )
                )
                return result.scalars().all()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return []

    async def _get_last_processed_message_id(self, session_name: str, username: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            async with get_db() as db:
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥–∏–∞–ª–æ–≥
                conv_result = await db.execute(
                    select(Conversation.id).where(
                        and_(
                            Conversation.lead_username == username,
                            Conversation.session_name == session_name
                        )
                    )
                )
                conversation = conv_result.scalar_one_or_none()

                if not conversation:
                    return 0

                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg_result = await db.execute(
                    select(DBMessage.telegram_message_id).where(
                        and_(
                            DBMessage.conversation_id == conversation,
                            DBMessage.is_from_lead == True
                        )
                    ).order_by(DBMessage.telegram_message_id.desc()).limit(1)
                )

                last_msg_id = msg_result.scalar_one_or_none()
                return last_msg_id or 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {username}: {e}")
            return 0

    async def _update_last_processed_message_id(self, session_name: str, username: str, message_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        # —á–µ—Ä–µ–∑ conversation_manager, —Ç–∞–∫ —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        pass

    async def _is_dialog_from_cold_outreach(self, session_name: str, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª –ª–∏ –¥–∏–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ cold outreach"""
        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Conversation.initiated_by_cold_outreach).where(
                        and_(
                            Conversation.lead_username == username,
                            Conversation.session_name == session_name
                        )
                    )
                )
                initiated_by_cold = result.scalar_one_or_none()
                return initiated_by_cold or False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cold outreach –¥–ª—è {username}: {e}")
            return False

    async def _mark_session_inactive(self, session_name: str):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π"""
        try:
            async with get_db() as db:
                await db.execute(
                    update(Session).where(
                        Session.session_name == session_name
                    ).values(
                        status=SessionStatus.INACTIVE,
                        last_error=f"–°–µ—Å—Å–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {datetime.utcnow()}"
                    )
                )
                await db.commit()
                logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_name} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_name} –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π: {e}")

    async def _notify_admin_about_unapproved_message(self, msg_data: NewMessageData):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç—Ä–µ–±—É—é—â–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from bot.main import bot_manager

            message = f"""üîî <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>

üë§ <b>–û—Ç:</b> @{msg_data.username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {msg_data.session_name}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {msg_data.message_text[:200]}...
üïê <b>–í—Ä–µ–º—è:</b> {msg_data.timestamp.strftime('%H:%M:%S')}

‚ùì –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            await bot_manager.broadcast_to_admins(message)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")

    async def _process_scan_results(self, scan_results: List, scan_start: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_new_messages = 0
        successful_sessions = 0
        failed_sessions = 0

        for result in scan_results:
            if isinstance(result, Exception):
                failed_sessions += 1
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {result}")
                continue

            if result.success:
                successful_sessions += 1
                total_new_messages += result.new_messages_count
            else:
                failed_sessions += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        scan_duration = time.time() - scan_start
        self.scan_stats.update({
            "total_scans": self.scan_stats["total_scans"] + 1,
            "successful_scans": self.scan_stats["successful_scans"] + successful_sessions,
            "failed_scans": self.scan_stats["failed_scans"] + failed_sessions,
            "total_new_messages": self.scan_stats["total_new_messages"] + total_new_messages,
            "average_scan_time": (self.scan_stats["average_scan_time"] + scan_duration) / 2,
            "last_scan_time": datetime.utcnow()
        })

        logger.info(
            f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
            f"{successful_sessions}/{successful_sessions + failed_sessions} —Å–µ—Å—Å–∏–π, "
            f"{total_new_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, "
            f"{scan_duration:.1f}—Å"
        )

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        stats = self.scan_stats.copy()
        stats.update({
            "is_running": self.is_running,
            "scan_interval": self.scan_interval,
        })

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        for key in ["last_scan_time", "next_scan_time"]:
            if stats.get(key):
                stats[key] = stats[key].isoformat()

        return stats

    async def force_scan_now(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–π—á–∞—Å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not self.is_running:
            return {"error": "–°–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"}

        logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
        await self._perform_full_scan()
        return {"success": True, "timestamp": datetime.utcnow().isoformat()}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
retrospective_scanner = RetrospectiveScanner()