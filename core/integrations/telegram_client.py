# core/integrations/telegram_client.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import asyncio
import json
from pathlib import Path
from typing import Optional, Dict, List, Any
from datetime import datetime, timedelta
import socks

from telethon import TelegramClient, events
from telethon.errors import (
    AuthKeyUnregisteredError,
    SessionPasswordNeededError,
    FloodWaitError,
    AuthKeyInvalidError,
    AuthKeyDuplicatedError
)
from loguru import logger

from config.settings.base import settings


class ProxyManager:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

    def __init__(self):
        self.proxies: Dict[str, Dict] = {}
        self.proxy_validation_cache: Dict[str, bool] = {}
        self._load_proxies()

    def _load_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        proxy_file = settings.data_dir / "proxies.json"
        if proxy_file.exists():
            try:
                with open(proxy_file, 'r', encoding='utf-8') as f:
                    self.proxies = json.load(f)
                logger.info(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self._validate_proxy_config()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª proxies.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

    def _validate_proxy_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–º–µ—é—Ç –ø—Ä–æ–∫—Å–∏
        session_files = list(settings.sessions_dir.rglob("*.session"))

        missing_proxies = []
        invalid_configs = []
        valid_configs = []

        for session_file in session_files:
            session_name = session_file.stem
            session_key = f"{session_name}.session"

            if session_key not in self.proxies:
                missing_proxies.append(session_name)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            session_config = self.proxies[session_key]

            has_static = "static" in session_config
            has_dynamic = "dynamic" in session_config

            if not (has_static or has_dynamic):
                invalid_configs.append(f"{session_name} (–Ω–µ—Ç static/dynamic)")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º required –ø–æ–ª—è –≤ static –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_valid = False
            if has_static:
                static_config = session_config["static"]
                if "host" in static_config and "port" in static_config:
                    config_valid = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º dynamic –µ—Å–ª–∏ static –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            if not config_valid and has_dynamic:
                dynamic_config = session_config["dynamic"]
                if "host" in dynamic_config and "port" in dynamic_config:
                    config_valid = True

            if config_valid:
                valid_configs.append(session_name)
            else:
                invalid_configs.append(f"{session_name} (–Ω–µ—Ç host/port)")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if valid_configs:
            logger.success(
                f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ ({len(valid_configs)}): {', '.join(valid_configs[:5])}{'...' if len(valid_configs) > 5 else ''}")

        if missing_proxies:
            logger.error(
                f"üö´ –°–µ—Å—Å–∏–∏ –ë–ï–ó –ø—Ä–æ–∫—Å–∏ ({len(missing_proxies)}): {', '.join(missing_proxies[:5])}{'...' if len(missing_proxies) > 5 else ''}")

        if invalid_configs:
            logger.error(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(invalid_configs)}): {', '.join(invalid_configs[:3])}{'...' if len(invalid_configs) > 3 else ''}")

    def get_proxy_for_session(self, session_name: str) -> Optional[tuple]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º .session –∫ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        session_key = f"{session_name}.session"
        session_config = self.proxies.get(session_key, {})

        if not session_config:
            logger.error(f"üö´ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–∫—Å–∏ –¥–ª—è {session_name} –ù–ï –ù–ê–ô–î–ï–ù!")
            logger.error(f"üö´ –û–∂–∏–¥–∞–µ–º—ã–π –∫–ª—é—á –≤ proxies.json: '{session_key}'")
            logger.error(f"üö´ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(self.proxies.keys())[:3]}...")
            return None

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: static, –ø–æ—Ç–æ–º dynamic
        proxy_config = session_config.get("static") or session_config.get("dynamic")

        if not proxy_config:
            logger.error(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è {session_name} –ø—É—Å—Ç–∞!")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["host", "port"]
        for field in required_fields:
            if field not in proxy_config:
                logger.error(f"‚ùå –í –ø—Ä–æ–∫—Å–∏ –¥–ª—è {session_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'!")
                return None

        logger.debug(f"üì° –ü—Ä–æ–∫—Å–∏ –¥–ª—è {session_name}: {proxy_config['host']}:{proxy_config['port']}")

        return (
            socks.SOCKS5,
            proxy_config["host"],
            proxy_config["port"],
            True,  # requires_auth
            proxy_config.get("username"),
            proxy_config.get("password")
        )

    def validate_session_proxy(self, session_name: str) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        session_key = f"{session_name}.session"

        result = {
            "session_name": session_name,
            "session_key": session_key,
            "has_config": False,
            "has_static": False,
            "has_dynamic": False,
            "static_valid": False,
            "dynamic_valid": False,
            "proxy_info": None,
            "errors": []
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if session_key not in self.proxies:
            result["errors"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{session_key}' –≤ proxies.json")
            return result

        result["has_config"] = True
        session_config = self.proxies[session_key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º static –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if "static" in session_config:
            result["has_static"] = True
            static_config = session_config["static"]

            required_fields = ["host", "port"]
            missing_fields = [f for f in required_fields if f not in static_config]

            if not missing_fields:
                result["static_valid"] = True
                result["proxy_info"] = f"{static_config['host']}:{static_config['port']} (static)"
            else:
                result["errors"].append(f"Static: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dynamic –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if "dynamic" in session_config:
            result["has_dynamic"] = True
            dynamic_config = session_config["dynamic"]

            required_fields = ["host", "port"]
            missing_fields = [f for f in required_fields if f not in dynamic_config]

            if not missing_fields:
                result["dynamic_valid"] = True
                if not result["proxy_info"]:  # –ï—Å–ª–∏ static –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
                    result["proxy_info"] = f"{dynamic_config['host']}:{dynamic_config['port']} (dynamic)"
            else:
                result["errors"].append(f"Dynamic: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")

        return result

    def enforce_proxy_requirement(self, session_name: str) -> bool:
        """–°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        proxy = self.get_proxy_for_session(session_name)

        if not proxy:
            logger.error(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –°–µ—Å—Å–∏—è {session_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏!")
            logger.error(f"üö´ –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Telegram!")
            return False

        return True

    def get_all_session_proxy_status(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

        session_files = list(settings.sessions_dir.rglob("*.session"))
        results = {}

        for session_file in session_files:
            session_name = session_file.stem
            results[session_name] = self.validate_session_proxy(session_name)

        return results


class TelegramSessionManager:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä Telegram —Å–µ—Å—Å–∏–π —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""

    def __init__(self):
        self.clients: Dict[str, TelegramClient] = {}
        self.proxy_manager = ProxyManager()
        self.session_locks: Dict[str, asyncio.Lock] = {}
        self.session_states: Dict[str, Dict[str, Any]] = {}
        self.last_activity: Dict[str, datetime] = {}
        self.shutdown_event = asyncio.Event()
        self.cleanup_task: Optional[asyncio.Task] = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Telegram Session Manager...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        settings.sessions_dir.mkdir(parents=True, exist_ok=True)

        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–º–µ—é—Ç –ø—Ä–æ–∫—Å–∏
        await self._validate_all_session_proxies()

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        await self._scan_available_sessions()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.cleanup_task = asyncio.create_task(self._cleanup_loop())

        logger.success("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Telegram Session Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Telegram Session Manager...")

        # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self.shutdown_event.set()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        disconnect_tasks = []
        for session_name in list(self.clients.keys()):
            task = asyncio.create_task(self._safe_disconnect(session_name))
            disconnect_tasks.append(task)

        if disconnect_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*disconnect_tasks, return_exceptions=True),
                    timeout=10.0
                )
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π")

        self.clients.clear()
        self.session_locks.clear()
        self.session_states.clear()

        logger.success("‚úÖ –í—Å–µ Telegram —Å–µ—Å—Å–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    async def _validate_all_session_proxies(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""

        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π...")

        proxy_status = self.proxy_manager.get_all_session_proxy_status()

        safe_sessions = []
        unsafe_sessions = []

        for session_name, status in proxy_status.items():
            if status["static_valid"] or status["dynamic_valid"]:
                safe_sessions.append(session_name)
                proxy_info = status.get("proxy_info", "unknown")
                logger.info(f"‚úÖ {session_name}: {proxy_info}")
            else:
                unsafe_sessions.append(session_name)
                errors = ", ".join(status["errors"]) if status["errors"] else "–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                logger.error(f"üö´ {session_name}: {errors}")

        if unsafe_sessions:
            logger.error(f"üö´ –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω–æ {len(unsafe_sessions)} —Å–µ—Å—Å–∏–π –ë–ï–ó –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            logger.error(f"üö´ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {', '.join(unsafe_sessions)}")
            logger.error(f"üö´ –≠—Ç–∏ —Å–µ—Å—Å–∏–∏ –ù–ï –ë–£–î–£–¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")

        logger.info(f"üìä –ò—Ç–æ–≥–æ: {len(safe_sessions)} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö, {len(unsafe_sessions)} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

    async def _scan_available_sessions(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        session_files = list(settings.sessions_dir.rglob("*.session"))

        if not session_files:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")
            return

        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(session_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for session_file in session_files:
            session_name = session_file.stem

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
            proxy_valid = self.proxy_manager.enforce_proxy_requirement(session_name)

            if proxy_valid:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
                is_valid = await self._validate_session_file(session_file)

                if is_valid:
                    logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞: {session_name}")
                    self.session_states[session_name] = {
                        'file_path': session_file,
                        'status': 'ready',
                        'last_check': datetime.now(),
                        'has_proxy': True
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º —Å–µ—Å—Å–∏–∏: {session_name}")
            else:
                logger.error(f"üö´ –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–∫—Å–∏")

    async def _validate_session_file(self, session_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        session_name = session_file.stem

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxy = self.proxy_manager.get_proxy_for_session(session_name)
            if not proxy:
                return False

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            temp_client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await temp_client.connect()
            is_authorized = await temp_client.is_user_authorized()

            # –ö–†–ò–¢–ò–ß–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await temp_client.disconnect()

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(0.5)

            return is_authorized

        except (AuthKeyInvalidError, AuthKeyUnregisteredError, AuthKeyDuplicatedError):
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return False

    async def get_client(self, session_name: str) -> Optional[TelegramClient]:
        """–ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if not self.proxy_manager.enforce_proxy_requirement(session_name):
            return None

        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if session_name not in self.session_locks:
            self.session_locks[session_name] = asyncio.Lock()

        async with self.session_locks[session_name]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            if session_name in self.clients:
                client = self.clients[session_name]
                if client.is_connected():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    self.last_activity[session_name] = datetime.now()
                    return client
                else:
                    # –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    await self._safe_disconnect(session_name)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            return await self._create_client_safely(session_name)

    async def _create_client_safely(self, session_name: str) -> Optional[TelegramClient]:
        """–ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞
        if session_name not in self.session_states:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            return None

        session_info = self.session_states[session_name]
        session_file = session_info['file_path']

        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –µ—Å—Ç—å
            proxy = self.proxy_manager.get_proxy_for_session(session_name)
            if not proxy:
                logger.error(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê –°–û–ó–î–ê–ù–ò–Ø: {session_name} –±–µ–∑ –ø—Ä–æ–∫—Å–∏!")
                return None

            logger.info(f"üì° –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {session_name} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy[1]}:{proxy[2]}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.start()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                await client.disconnect()
                return None

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._setup_event_handlers(client, session_name)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
            self.clients[session_name] = client
            self.last_activity[session_name] = datetime.now()

            logger.success(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_name}")
            return client

        except AuthKeyUnregisteredError:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        except AuthKeyDuplicatedError:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
            return None
        except FloodWaitError as e:
            logger.warning(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds}—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {session_name}: {e}")
            return None

    async def _setup_event_handlers(self, client: TelegramClient, session_name: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""

        @client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                self.last_activity[session_name] = datetime.now()

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from core.handlers.message_handler import message_handler

                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await message_handler.handle_incoming_message(
                    session_name,
                    event
                )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {session_name}: {e}")

    async def _safe_disconnect(self, session_name: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            if session_name in self.clients:
                client = self.clients[session_name]
                if client.is_connected():
                    await client.disconnect()
                del self.clients[session_name]
                logger.info(f"üîå –°–µ—Å—Å–∏—è {session_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self._cleanup_inactive_sessions()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e}")

    async def _cleanup_inactive_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            current_time = datetime.now()
            inactive_sessions = []

            for session_name, last_activity in self.last_activity.items():
                if current_time - last_activity > timedelta(hours=1):
                    inactive_sessions.append(session_name)

            for session_name in inactive_sessions:
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {session_name}")
                await self._safe_disconnect(session_name)
                if session_name in self.last_activity:
                    del self.last_activity[session_name]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

    async def send_message(
            self,
            session_name: str,
            username: str,
            message: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é"""

        client = await self.get_client(session_name)
        if not client:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {session_name}")
            return False

        try:
            await client.send_message(username, message)
            self.last_activity[session_name] = datetime.now()
            logger.success(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {session_name} ‚Üí {username}")
            return True

        except FloodWaitError as e:
            logger.warning(f"‚è∞ Flood wait {e.seconds}—Å –¥–ª—è {session_name}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {session_name} ‚Üí {username}: {e}")
            return False

    async def get_session_info(self, session_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""

        client = await self.get_client(session_name)
        if not client:
            return None

        try:
            me = await client.get_me()

            return {
                "session_name": session_name,
                "telegram_id": me.id,
                "username": me.username,
                "first_name": me.first_name,
                "last_name": me.last_name,
                "phone": me.phone,
                "is_premium": getattr(me, 'premium', False),
                "is_verified": getattr(me, 'verified', False),
                "is_connected": client.is_connected(),
                "last_activity": self.last_activity.get(session_name)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return None

    async def get_active_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        active_sessions = []

        for session_name, client in self.clients.items():
            if client.is_connected():
                active_sessions.append(session_name)

        return active_sessions

    async def health_check(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        health_status = {}

        for session_name in self.session_states.keys():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                session_info = self.session_states[session_name]
                session_file = session_info['file_path']

                is_healthy = await self._validate_session_file(session_file)
                health_status[session_name] = is_healthy

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {session_name}: {e}")
                health_status[session_name] = False

        return health_status

    def get_session_states(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        states = {}

        for session_name, state in self.session_states.items():
            states[session_name] = {
                **state,
                'is_connected': session_name in self.clients and self.clients[session_name].is_connected(),
                'last_activity': self.last_activity.get(session_name)
            }

        return states

    async def cleanup_inactive_sessions(self):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        await self._cleanup_inactive_sessions()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    async def _check_session_auth(self, session_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self._validate_session_file(session_file)

    def _find_session_file(self, session_name: str) -> Optional[Path]:
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏"""
        # –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
        session_file = settings.sessions_dir / f"{session_name}.session"
        if session_file.exists():
            return session_file

        # –ò—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö (–ø–æ —Ä–æ–ª—è–º)
        for subdir in settings.sessions_dir.iterdir():
            if subdir.is_dir():
                session_file = subdir / f"{session_name}.session"
                if session_file.exists():
                    return session_file

        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
telegram_session_manager = TelegramSessionManager()