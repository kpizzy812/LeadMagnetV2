# core/integrations/telegram_client.py

import asyncio
import json
from pathlib import Path
from typing import Dict, Optional, List, Any
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, AuthKeyUnregisteredError
import socks

from config.settings.base import settings
from loguru import logger


class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏"""

    def __init__(self):
        self.proxies: Dict[str, Dict] = {}
        self._load_proxies()

    def _load_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        proxy_file = settings.data_dir / "proxies.json"
        if proxy_file.exists():
            try:
                with open(proxy_file, 'r', encoding='utf-8') as f:
                    self.proxies = json.load(f)
                logger.info(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")

    def get_proxy_for_session(self, session_name: str) -> Optional[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        proxy_config = self.proxies.get(session_name, {}).get("static")
        if not proxy_config:
            return None

        return (
            socks.SOCKS5,
            proxy_config["host"],
            proxy_config["port"],
            True,
            proxy_config["username"],
            proxy_config["password"]
        )


class TelegramSessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Telegram —Å–µ—Å—Å–∏–π"""

    def __init__(self):
        self.clients: Dict[str, TelegramClient] = {}
        self.proxy_manager = ProxyManager()
        self.session_locks: Dict[str, asyncio.Lock] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramSessionManager")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        settings.sessions_dir.mkdir(parents=True, exist_ok=True)

        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
        await self._scan_existing_sessions()

    async def _scan_existing_sessions(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö .session —Ñ–∞–π–ª–æ–≤"""
        session_files = list(settings.sessions_dir.rglob("*.session"))

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(session_files)} session —Ñ–∞–π–ª–æ–≤")

        for session_file in session_files:
            session_name = session_file.stem

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏
            is_authorized = await self._check_session_auth(session_file)

            if is_authorized:
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞: {session_name}")
            else:
                logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞: {session_name}")

    async def _check_session_auth(self, session_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""
        session_name = session_file.stem

        try:
            proxy = self.proxy_manager.get_proxy_for_session(session_name)

            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            await client.connect()
            is_authorized = await client.is_user_authorized()
            await client.disconnect()

            return is_authorized

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {session_name}: {e}")
            return False

    async def get_client(self, session_name: str) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        if session_name in self.clients:
            client = self.clients[session_name]
            if client.is_connected():
                return client
            else:
                # –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                del self.clients[session_name]

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        return await self._create_client(session_name)

    async def _create_client(self, session_name: str) -> Optional[TelegramClient]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if session_name not in self.session_locks:
            self.session_locks[session_name] = asyncio.Lock()

        async with self.session_locks[session_name]:
            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if session_name in self.clients:
                return self.clients[session_name]

            try:
                # –ò—â–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                session_file = self._find_session_file(session_name)
                if not session_file:
                    logger.error(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_name}")
                    return None

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
                proxy = self.proxy_manager.get_proxy_for_session(session_name)

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                client = TelegramClient(
                    str(session_file),
                    api_id=settings.telegram.api_id,
                    api_hash=settings.telegram.api_hash,
                    proxy=proxy
                )

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                await client.start()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await client.is_user_authorized():
                    logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                    await client.disconnect()
                    return None

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
                self.clients[session_name] = client

                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_name}")
                return client

            except AuthKeyUnregisteredError:
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
                return None

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {session_name}: {e}")
                return None

    def _find_session_file(self, session_name: str) -> Optional[Path]:
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏"""
        # –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
        session_file = settings.sessions_dir / f"{session_name}.session"
        if session_file.exists():
            return session_file

        # –ò—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö (–ø–æ —Ä–æ–ª—è–º)
        for subdir in settings.sessions_dir.iterdir():
            if subdir.is_dir():
                session_file = subdir / f"{session_name}.session"
                if session_file.exists():
                    return session_file

        return None

    async def send_message(
            self,
            session_name: str,
            username: str,
            message: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é"""

        client = await self.get_client(session_name)
        if not client:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {session_name}")
            return False

        try:
            await client.send_message(username, message)
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {session_name} ‚Üí {username}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {session_name} ‚Üí {username}: {e}")
            return False

    async def get_session_info(self, session_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""

        client = await self.get_client(session_name)
        if not client:
            return None

        try:
            me = await client.get_me()

            return {
                "session_name": session_name,
                "telegram_id": me.id,
                "username": me.username,
                "first_name": me.first_name,
                "last_name": me.last_name,
                "phone": me.phone,
                "is_premium": getattr(me, 'premium', False),
                "is_verified": getattr(me, 'verified', False),
                "is_connected": client.is_connected(),
                "is_authorized": await client.is_user_authorized()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return None

    async def disconnect_session(self, session_name: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if session_name in self.clients:
            client = self.clients[session_name]
            try:
                await client.disconnect()
                logger.info(f"üîå –°–µ—Å—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: {session_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            finally:
                del self.clients[session_name]

    async def disconnect_all(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        logger.info("üõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö Telegram —Å–µ—Å—Å–∏–π...")

        for session_name in list(self.clients.keys()):
            await self.disconnect_session(session_name)

        logger.info("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    async def get_active_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        active_sessions = []

        for session_name, client in self.clients.items():
            if client.is_connected():
                active_sessions.append(session_name)

        return active_sessions

    async def health_check(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        health_status = {}

        for session_name, client in self.clients.items():
            try:
                is_healthy = (
                        client.is_connected() and
                        await client.is_user_authorized()
                )
                health_status[session_name] = is_healthy

            except Exception as e:
                logger.error(f"‚ùå Health check –¥–ª—è {session_name}: {e}")
                health_status[session_name] = False

        return health_status

    async def restart_session(self, session_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏: {session_name}")

        # –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        await self.disconnect_session(session_name)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        client = await self._create_client(session_name)
        return client is not None

    async def broadcast_message(
            self,
            session_names: List[str],
            recipients: List[str],
            message: str,
            delay_between: int = 3
    ) -> Dict[str, List[str]]:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π"""

        results = {
            "success": [],
            "failed": []
        }

        for session_name in session_names:
            for recipient in recipients:
                try:
                    success = await self.send_message(session_name, recipient, message)

                    if success:
                        results["success"].append(f"{session_name} ‚Üí {recipient}")
                    else:
                        results["failed"].append(f"{session_name} ‚Üí {recipient}")

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    if delay_between > 0:
                        await asyncio.sleep(delay_between)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {session_name} ‚Üí {recipient}: {e}")
                    results["failed"].append(f"{session_name} ‚Üí {recipient}")

        return results

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        await self.disconnect_all()
        self.session_locks.clear()
        logger.info("‚úÖ TelegramSessionManager –∑–∞–≤–µ—Ä—à–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
telegram_session_manager = TelegramSessionManager()