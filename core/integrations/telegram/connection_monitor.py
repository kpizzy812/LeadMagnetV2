# core/integrations/telegram/connection_monitor.py
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Callable
from dataclasses import dataclass

from telethon import TelegramClient
from telethon.errors import (
    NetworkMigrateError, PhoneMigrateError, ServerError,
    AuthKeyUnregisteredError, AuthKeyInvalidError, AuthKeyDuplicatedError
)
from loguru import logger


@dataclass
class ConnectionStatus:
    is_connected: bool
    last_check: datetime
    last_heartbeat: Optional[datetime] = None
    error_count: int = 0
    last_error: Optional[str] = None


class ConnectionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.monitors: Dict[str, asyncio.Task] = {}
        self.statuses: Dict[str, ConnectionStatus] = {}
        self.heartbeats: Dict[str, datetime] = {}
        self.disconnect_callbacks: Dict[str, Callable] = {}

    def start_monitoring(self, session_name: str, client: TelegramClient, disconnect_callback: Callable):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        self.stop_monitoring(session_name)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback
        self.disconnect_callbacks[session_name] = disconnect_callback

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        self.statuses[session_name] = ConnectionStatus(
            is_connected=True,
            last_check=datetime.utcnow()
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        task = asyncio.create_task(self._monitor_session(session_name, client))
        self.monitors[session_name] = task

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º heartbeat
        self.heartbeats[session_name] = datetime.utcnow()

        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {session_name}")

    def stop_monitoring(self, session_name: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        if session_name in self.monitors:
            self.monitors[session_name].cancel()
            del self.monitors[session_name]

        if session_name in self.statuses:
            del self.statuses[session_name]

        if session_name in self.heartbeats:
            del self.heartbeats[session_name]

        if session_name in self.disconnect_callbacks:
            del self.disconnect_callbacks[session_name]

    def update_heartbeat(self, session_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ heartbeat –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        self.heartbeats[session_name] = datetime.utcnow()

        if session_name in self.statuses:
            self.statuses[session_name].last_heartbeat = datetime.utcnow()

    async def _monitor_session(self, session_name: str, client: TelegramClient):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            while True:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if session_name in self.statuses:
                        self.statuses[session_name].last_check = datetime.utcnow()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
                    if not client.is_connected():
                        logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {session_name} –æ—Ç–∫–ª—é—á–µ–Ω")
                        await self._handle_disconnect(session_name, "Client disconnected")
                        break

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    if not await client.is_user_authorized():
                        logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {session_name} –ø–æ—Ç–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                        await self._handle_disconnect(session_name, "Authorization lost")
                        break

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º heartbeat (–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
                    last_heartbeat = self.heartbeats.get(session_name)
                    if last_heartbeat:
                        inactive_time = datetime.utcnow() - last_heartbeat
                        if inactive_time > timedelta(hours=2):  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 2 —á–∞—Å–∞
                            logger.warning(f"üí§ –°–µ—Å—Å–∏—è {session_name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ {inactive_time}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if session_name in self.statuses:
                        self.statuses[session_name].is_connected = True
                        self.statuses[session_name].error_count = 0
                        self.statuses[session_name].last_error = None

                except (NetworkMigrateError, PhoneMigrateError, ServerError, OSError) as e:
                    logger.error(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {session_name}: {e}")
                    await self._handle_disconnect(session_name, f"Connection error: {e}")
                    break

                except (AuthKeyUnregisteredError, AuthKeyInvalidError, AuthKeyDuplicatedError) as e:
                    logger.error(f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {session_name}: {e}")
                    await self._handle_disconnect(session_name, f"Auth error: {e}")
                    break

                except Exception as e:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                    if session_name in self.statuses:
                        self.statuses[session_name].error_count += 1
                        self.statuses[session_name].last_error = str(e)

                        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –æ—Ç–∫–ª—é—á–∞–µ–º
                        if self.statuses[session_name].error_count >= 3:
                            logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –¥–ª—è {session_name}: {e}")
                            await self._handle_disconnect(session_name, f"Too many errors: {e}")
                            break

                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {session_name}: {e}")
                    await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        except asyncio.CancelledError:
            logger.info(f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {session_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {session_name}: {e}")

    async def _handle_disconnect(self, session_name: str, reason: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if session_name in self.statuses:
                self.statuses[session_name].is_connected = False
                self.statuses[session_name].last_error = reason

            # –í—ã–∑—ã–≤–∞–µ–º callback –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            if session_name in self.disconnect_callbacks:
                callback = self.disconnect_callbacks[session_name]
                await callback(session_name, reason)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}")

    def get_status(self, session_name: str) -> Optional[ConnectionStatus]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.statuses.get(session_name)

    def get_all_statuses(self) -> Dict[str, ConnectionStatus]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
        return self.statuses.copy()

    async def cleanup_inactive_monitors(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        inactive_monitors = []

        for session_name, task in self.monitors.items():
            if task.done():
                inactive_monitors.append(session_name)

        for session_name in inactive_monitors:
            self.stop_monitoring(session_name)

        if inactive_monitors:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_monitors)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ConnectionMonitor...")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for task in self.monitors.values():
            task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if self.monitors:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*self.monitors.values(), return_exceptions=True),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤")

        self.monitors.clear()
        self.statuses.clear()
        self.heartbeats.clear()
        self.disconnect_callbacks.clear()

        logger.info("‚úÖ ConnectionMonitor –∑–∞–≤–µ—Ä—à–µ–Ω")