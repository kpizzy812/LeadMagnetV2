# core/integrations/telegram/session_manager.py
import asyncio
from pathlib import Path
from typing import Optional, Dict, List, Any
from datetime import datetime, timedelta

from telethon import TelegramClient, events
from telethon.tl.types import User, PeerUser
from telethon.errors import FloodWaitError
from loguru import logger

from config.settings.base import settings
from .proxy_manager import ProxyManager
from .client_factory import TelegramClientFactory
from .connection_monitor import ConnectionMonitor


class TelegramSessionManager:
    """–†–ï–§–ê–ö–¢–û–†–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä Telegram —Å–µ—Å—Å–∏–π"""

    def __init__(self):
        self.clients: Dict[str, TelegramClient] = {}
        self.session_locks: Dict[str, asyncio.Lock] = {}
        self.session_states: Dict[str, Dict[str, Any]] = {}
        self.last_activity: Dict[str, datetime] = {}
        self.shutdown_event = asyncio.Event()
        self.cleanup_task: Optional[asyncio.Task] = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.proxy_manager = ProxyManager()
        self.client_factory = TelegramClientFactory(self.proxy_manager)
        self.connection_monitor = ConnectionMonitor()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Telegram Session Manager...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        settings.sessions_dir.mkdir(parents=True, exist_ok=True)

        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–º–µ—é—Ç –ø—Ä–æ–∫—Å–∏
        await self._validate_all_session_proxies()

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        await self._scan_available_sessions()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.cleanup_task = asyncio.create_task(self._cleanup_loop())

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å utils —Å–∏—Å—Ç–µ–º–∞–º–∏
        await self._integrate_with_utils()

        logger.success("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Telegram Session Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _integrate_with_utils(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å utils —Å–∏—Å—Ç–µ–º–∞–º–∏"""
        try:
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å proxy_validator
            from utils.proxy_validator import proxy_validator
            await proxy_validator.validate_all_from_config()

            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å dialog_recovery
            from utils.dialog_recovery import dialog_recovery
            asyncio.create_task(dialog_recovery.start_recovery_worker())

            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å reconnect_manager
            from utils.reconnect_system import reconnect_manager

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ reconnect_manager
            session_files = list(settings.sessions_dir.rglob("*.session"))
            for session_file in session_files:
                session_name = session_file.stem
                reconnect_manager.register_session(
                    session_name,
                    lambda sn=session_name: self._reconnect_session(sn)
                )

            logger.info("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å utils —Å–∏—Å—Ç–µ–º–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å utils: {e}")

    async def _reconnect_session(self, session_name: str) -> bool:
        """–†–µ–∫–æ–Ω–Ω–µ–∫—Ç —Å–µ—Å—Å–∏–∏"""
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {session_name}")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç
            if session_name in self.clients:
                try:
                    await self.clients[session_name].disconnect()
                except:
                    pass
                del self.clients[session_name]

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.connection_monitor.stop_monitoring(session_name)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            client = await self.get_client(session_name)

            if client:
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                asyncio.create_task(self._scan_missed_for_session(session_name, client))
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}")
            return False

    async def _scan_missed_for_session(self, session_name: str, client):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            # –î–∞–µ–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            await asyncio.sleep(5)

            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            from utils.dialog_recovery import dialog_recovery
            missed_messages = await dialog_recovery.scan_missed_messages(session_name, client)

            if missed_messages:
                await dialog_recovery.process_missed_messages(missed_messages)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {session_name}: {e}")

    async def _validate_all_session_proxies(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π...")

        proxy_status = self.proxy_manager.get_all_session_proxy_status()

        safe_sessions = []
        unsafe_sessions = []

        for session_name, status in proxy_status.items():
            if status["static_valid"] or status["dynamic_valid"]:
                safe_sessions.append(session_name)
                proxy_info = status.get("proxy_info", "unknown")
                logger.info(f"‚úÖ {session_name}: {proxy_info}")
            else:
                unsafe_sessions.append(session_name)
                errors = ", ".join(status["errors"]) if status["errors"] else "–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                logger.error(f"üö´ {session_name}: {errors}")

        if unsafe_sessions:
            logger.error(f"üö´ –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω–æ {len(unsafe_sessions)} —Å–µ—Å—Å–∏–π –ë–ï–ó –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            logger.error(f"üö´ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {', '.join(unsafe_sessions)}")

        logger.info(f"üìä –ò—Ç–æ–≥–æ: {len(safe_sessions)} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö, {len(unsafe_sessions)} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

    async def _scan_available_sessions(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        session_files = list(settings.sessions_dir.rglob("*.session"))

        if not session_files:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")
            return

        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(session_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for session_file in session_files:
            session_name = session_file.stem

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
            proxy_valid = self.proxy_manager.enforce_proxy_requirement(session_name)

            if proxy_valid:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
                is_valid = await self.client_factory.validate_session_file(session_file)

                if is_valid:
                    logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞: {session_name}")
                    self.session_states[session_name] = {
                        'file_path': session_file,
                        'status': 'ready',
                        'last_check': datetime.now(),
                        'has_proxy': True
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º —Å–µ—Å—Å–∏–∏: {session_name}")
            else:
                logger.error(f"üö´ –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–∫—Å–∏")

    async def get_client(self, session_name: str) -> Optional[TelegramClient]:
        """–ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if not self.proxy_manager.enforce_proxy_requirement(session_name):
            return None

        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if session_name not in self.session_locks:
            self.session_locks[session_name] = asyncio.Lock()

        async with self.session_locks[session_name]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            if session_name in self.clients:
                client = self.clients[session_name]
                if client.is_connected():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    self.last_activity[session_name] = datetime.now()
                    return client
                else:
                    # –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    await self._safe_disconnect(session_name)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            return await self._create_client_safely(session_name)

    async def _create_client_safely(self, session_name: str) -> Optional[TelegramClient]:
        """–ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞
        if session_name not in self.session_states:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            return None

        session_info = self.session_states[session_name]
        session_file = session_info['file_path']

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        client = await self.client_factory.create_client(session_name, session_file)

        if not client:
            return None

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await self._setup_event_handlers(client, session_name)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.connection_monitor.start_monitoring(
            session_name,
            client,
            self._handle_connection_lost
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
        self.clients[session_name] = client
        self.last_activity[session_name] = datetime.now()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º reconnect_manager –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        try:
            from utils.reconnect_system import reconnect_manager
            reconnect_manager.mark_connected(session_name)
        except:
            pass

        logger.success(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_name}")
        return client

    async def _handle_connection_lost(self, session_name: str, reason: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.warning(f"üîå –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {session_name}: {reason}")

        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º reconnect_manager
            from utils.reconnect_system import reconnect_manager
            reconnect_manager.mark_disconnected(session_name)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è reconnect_manager: {e}")

    async def _setup_event_handlers(self, client: TelegramClient, session_name: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""

        @client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ
                self.connection_monitor.update_heartbeat(session_name)

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                self.last_activity[session_name] = datetime.now()

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from core.handlers.message_handler import message_handler

                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await message_handler.handle_incoming_message(
                    session_name,
                    event
                )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {session_name}: {e}")

    async def _safe_disconnect(self, session_name: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.connection_monitor.stop_monitoring(session_name)

            if session_name in self.clients:
                client = self.clients[session_name]
                if client.is_connected():
                    await client.disconnect()
                del self.clients[session_name]

            if session_name in self.last_activity:
                del self.last_activity[session_name]

            logger.info(f"üîå –°–µ—Å—Å–∏—è {session_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self._cleanup_inactive_sessions()
                await self.connection_monitor.cleanup_inactive_monitors()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e}")

    async def _cleanup_inactive_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            current_time = datetime.now()
            inactive_sessions = []

            for session_name, last_activity in self.last_activity.items():
                if current_time - last_activity > timedelta(hours=1):
                    inactive_sessions.append(session_name)

            for session_name in inactive_sessions:
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {session_name}")
                await self._safe_disconnect(session_name)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

    async def send_message(self, session_name: str, username: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é"""

        client = await self.get_client(session_name)
        if not client:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {session_name}")
            return False

        try:
            await client.send_message(username, message)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ heartbeat
            self.last_activity[session_name] = datetime.now()
            self.connection_monitor.update_heartbeat(session_name)

            logger.success(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {session_name} ‚Üí {username}")
            return True

        except FloodWaitError as e:
            logger.warning(f"‚è∞ Flood wait {e.seconds}—Å –¥–ª—è {session_name}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {session_name} ‚Üí {username}: {e}")
            return False

    async def get_session_info(self, session_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""

        client = await self.get_client(session_name)
        if not client:
            return None

        try:
            me = await client.get_me()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_status = self.connection_monitor.get_status(session_name)

            return {
                "session_name": session_name,
                "telegram_id": me.id,
                "username": me.username,
                "first_name": me.first_name,
                "last_name": me.last_name,
                "phone": me.phone,
                "is_premium": getattr(me, 'premium', False),
                "is_verified": getattr(me, 'verified', False),
                "is_connected": client.is_connected(),
                "last_activity": self.last_activity.get(session_name),
                "connection_status": connection_status
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return None

    async def get_active_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        active_sessions = []

        for session_name, client in self.clients.items():
            if client.is_connected():
                active_sessions.append(session_name)

        return active_sessions

    async def health_check(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        health_status = {}

        for session_name in self.session_states.keys():
            try:
                session_info = self.session_states[session_name]
                session_file = session_info['file_path']

                is_healthy = await self.client_factory.validate_session_file(session_file)
                health_status[session_name] = is_healthy

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {session_name}: {e}")
                health_status[session_name] = False

        return health_status

    def get_session_states(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        states = {}

        for session_name, state in self.session_states.items():
            connection_status = self.connection_monitor.get_status(session_name)

            states[session_name] = {
                **state,
                'is_connected': session_name in self.clients and self.clients[session_name].is_connected(),
                'last_activity': self.last_activity.get(session_name),
                'connection_status': connection_status
            }

        return states

    async def cleanup_inactive_sessions(self):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        await self._cleanup_inactive_sessions()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Telegram Session Manager...")

        # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self.shutdown_event.set()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await self.connection_monitor.shutdown()

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        disconnect_tasks = []
        for session_name in list(self.clients.keys()):
            task = asyncio.create_task(self._safe_disconnect(session_name))
            disconnect_tasks.append(task)

        if disconnect_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*disconnect_tasks, return_exceptions=True),
                    timeout=10.0
                )
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π")

        self.clients.clear()
        self.session_locks.clear()
        self.session_states.clear()

        logger.success("‚úÖ –í—Å–µ Telegram —Å–µ—Å—Å–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
telegram_session_manager = TelegramSessionManager()