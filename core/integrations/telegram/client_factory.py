# core/integrations/telegram/client_factory.py
import asyncio
from pathlib import Path
from typing import Optional
from datetime import datetime

from telethon import TelegramClient
from telethon.errors import (
    AuthKeyUnregisteredError, SessionPasswordNeededError, FloodWaitError,
    AuthKeyInvalidError, AuthKeyDuplicatedError
)
from loguru import logger

from config.settings.base import settings
from .proxy_manager import ProxyManager


class TelegramClientFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤"""

    def __init__(self, proxy_manager: ProxyManager):
        self.proxy_manager = proxy_manager

    async def create_client(self, session_name: str, session_file: Path) -> Optional[TelegramClient]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –µ—Å—Ç—å
            proxy = self.proxy_manager.get_proxy_for_session(session_name)
            if not proxy:
                logger.error(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê –°–û–ó–î–ê–ù–ò–Ø: {session_name} –±–µ–∑ –ø—Ä–æ–∫—Å–∏!")
                return None

            logger.info(f"üì° –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {session_name} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy[1]}:{proxy[2]}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.start()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                await client.disconnect()
                return None

            logger.success(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_name}")
            return client

        except AuthKeyUnregisteredError:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        except AuthKeyDuplicatedError:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
            return None
        except FloodWaitError as e:
            logger.warning(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds}—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {session_name}: {e}")
            return None

    async def validate_session_file(self, session_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        session_name = session_file.stem

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxy = self.proxy_manager.get_proxy_for_session(session_name)
            if not proxy:
                return False

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            temp_client = TelegramClient(
                str(session_file),
                api_id=settings.telegram.api_id,
                api_hash=settings.telegram.api_hash,
                proxy=proxy
            )

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await temp_client.connect()
            is_authorized = await temp_client.is_user_authorized()

            # –ö–†–ò–¢–ò–ß–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await temp_client.disconnect()

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(0.5)

            return is_authorized

        except (AuthKeyInvalidError, AuthKeyUnregisteredError, AuthKeyDuplicatedError):
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return False