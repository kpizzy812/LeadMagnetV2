# core/handlers/message_handler.py

import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set
from telethon import TelegramClient, events
from telethon.tl.types import User, PeerUser
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config.settings.base import settings
from storage.database import get_db
from storage.models.base import Session, SessionStatus
from core.engine.conversation_manager import conversation_manager
from core.integrations.telegram_client import TelegramSessionManager
from loguru import logger


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram"""

    def __init__(self):
        self.session_manager = TelegramSessionManager()
        self.active_handlers: Dict[str, TelegramClient] = {}
        self.processing_queue = asyncio.Queue()
        self.response_delays: Dict[str, datetime] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            await self.session_manager.initialize()
            await self._setup_session_handlers()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
            asyncio.create_task(self._process_message_queue())

            logger.info("‚úÖ MessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageHandler: {e}")
            raise

    async def _setup_session_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        async with get_db() as db:
            from sqlalchemy import select

            result = await db.execute(
                select(Session).where(
                    Session.status == SessionStatus.ACTIVE,
                    Session.ai_enabled == True
                )
            )
            sessions = result.scalars().all()

            for session in sessions:
                try:
                    await self._setup_session_handler(session)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ {session.session_name}: {e}")

    async def _setup_session_handler(self, session: Session):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

        session_name = session.session_name

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏
        client = await self.session_manager.get_client(session_name)
        if not client:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not isinstance(event.peer_id, PeerUser):
                    return

                sender = await event.get_sender()
                if not isinstance(sender, User) or sender.bot:
                    return

                # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                username = sender.username
                if not username:
                    username = str(sender.id)

                message_text = event.message.message
                if not message_text or len(message_text.strip()) < 1:
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await self.processing_queue.put({
                    "session_name": session_name,
                    "username": username,
                    "message": message_text,
                    "telegram_id": sender.id,
                    "timestamp": datetime.utcnow()
                })

                logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {username} ‚Üí {session_name}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

        self.active_handlers[session_name] = client
        logger.info(f"üéß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")

    async def _process_message_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message_data = await self.processing_queue.get()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._handle_message(message_data)

                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.processing_queue.task_done()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(1)

    async def _handle_message(self, message_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
        from bot.handlers.ai_control.ai_control import GLOBAL_AI_ENABLED
        if not GLOBAL_AI_ENABLED:
            return

        session_name = message_data["session_name"]
        username = message_data["username"]
        message_text = message_data["message"]

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
            delay_key = f"{session_name}:{username}"
            if delay_key in self.response_delays:
                next_response_time = self.response_delays[delay_key]
                if datetime.utcnow() < next_response_time:
                    wait_seconds = (next_response_time - datetime.utcnow()).total_seconds()
                    logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}: {wait_seconds:.1f}—Å")
                    await asyncio.sleep(wait_seconds)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
            conversation = await conversation_manager.get_conversation(
                lead_username=username,
                session_name=session_name,
                create_if_not_exists=True
            )
            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤
            from core.filters.conversation_filter import conversation_filter

            should_respond, reason = await conversation_filter.should_respond_to_conversation(
                conversation, message_text
            )

            if not should_respond:
                logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ {conversation.id}: {reason}")

                # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                if "–æ–¥–æ–±—Ä–µ–Ω–∏—è" in reason:
                    await self._notify_admins_about_pending_approval(conversation, message_text)

                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–µ—Å—Å–∏–∏
            if (conversation.ai_disabled or
                    conversation.auto_responses_paused or
                    not conversation.session.ai_enabled):
                return

            # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏:
            if conversation.ai_disabled or conversation.auto_responses_paused:
                logger.info(f"‚è∏Ô∏è –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conversation.id}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ò–ò –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏
            if not conversation.session.ai_enabled:
                logger.info(f"üì¥ –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {conversation.session.session_name}")
                return

            if not conversation:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ {username} ‚Üî {session_name}")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = await conversation_manager.process_user_message(
                conversation_id=conversation.id,
                message_text=message_text
            )

            if response_text:
                # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                typing_delay = self._calculate_typing_delay(response_text)
                await asyncio.sleep(typing_delay)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await self._send_response(session_name, username, response_text)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                next_delay = random.randint(
                    settings.security.response_delay_min,
                    settings.security.response_delay_max
                )
                self.response_delays[delay_key] = datetime.utcnow() + timedelta(seconds=next_delay)

                await self._cancel_pending_followups(conversation.id)

                logger.success(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {session_name} ‚Üí {username}")

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è {username}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}: {e}")

    async def _cancel_pending_followups(self, conversation_id: int):
        """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from storage.database import get_db
            from storage.models.base import FollowupSchedule
            from sqlalchemy import update

            async with get_db() as db:
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–æ–ª–æ—É–∞–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                await db.execute(
                    update(FollowupSchedule)
                    .where(
                        FollowupSchedule.conversation_id == conversation_id,
                        FollowupSchedule.executed == False
                    )
                    .values(
                        executed=True,
                        executed_at=datetime.utcnow(),
                        generated_message="–û—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª"
                    )
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")

    def _calculate_typing_delay(self, text: str) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞)"""
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + –≤—Ä–µ–º—è –Ω–∞ "–ø–µ—á–∞—Ç–∞–Ω–∏–µ"
        base_delay = random.uniform(2, 5)
        typing_speed = random.uniform(3, 7)  # —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        typing_delay = len(text) / typing_speed

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        total_delay = min(base_delay + typing_delay, 15)

        return total_delay

    async def _send_response(self, session_name: str, username: str, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram"""

        try:
            client = self.active_handlers.get(session_name)
            if not client:
                logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(username, text)
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {session_name} –∫ {username}: {e}")
            return False

    async def add_session(self, session_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        async with get_db() as db:
            from sqlalchemy import select

            result = await db.execute(
                select(Session).where(Session.session_name == session_name)
            )
            session = result.scalar_one_or_none()

            if session and session.ai_enabled:
                await self._setup_session_handler(session)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {session_name}")

    async def remove_session(self, session_name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if session_name in self.active_handlers:
            client = self.active_handlers[session_name]
            await client.disconnect()
            del self.active_handlers[session_name]
            logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {session_name}")

    async def pause_session(self, session_name: str):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        pass

    async def resume_session(self, session_name: str):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        pass

    async def get_active_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        return list(self.active_handlers.keys())

    async def get_session_stats(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ—Å—Å–∏—è–º"""
        stats = {}

        for session_name in self.active_handlers:
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats[session_name] = {
                "status": "active",
                "messages_processed": 0,
                "last_activity": datetime.utcnow().isoformat()
            }

        return stats

    async def _notify_admins_about_pending_approval(self, conversation: Conversation, message_text: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –¥–∏–∞–ª–æ–≥–µ —Ç—Ä–µ–±—É—é—â–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è"""

        try:
            from bot.main import bot_manager

            text = f"""‚ö†Ô∏è <b>–î–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>

üë§ <b>–û—Ç:</b> @{conversation.lead.username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {conversation.session.session_name}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_text[:200]}{'...' if len(message_text) > 200 else ''}

üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ"""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                            callback_data=f"approve_conversation_{conversation.id}"
                        ),
                        InlineKeyboardButton(
                            text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"reject_conversation_{conversation.id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥",
                            callback_data=f"dialog_view_{conversation.id}"
                        )
                    ]
                ]
            )

            await bot_manager.broadcast_to_admins(text, keyboard)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MessageHandler...")

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        for session_name, client in self.active_handlers.items():
            try:
                await client.disconnect()
                logger.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç {session_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}")

        self.active_handlers.clear()
        await self.session_manager.shutdown()

        logger.info("‚úÖ MessageHandler –∑–∞–≤–µ—Ä—à–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
message_handler = MessageHandler()