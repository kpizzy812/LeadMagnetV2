# core/handlers/message_handler.py - –ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from sqlalchemy import select, update, and_

from config.settings.base import settings
from storage.database import get_db
from storage.models.base import Session, SessionStatus, Conversation, ConversationStatus, MessageApproval, \
    ApprovalStatus
from core.scanning.retrospective_scanner import retrospective_scanner
from core.engine.conversation_manager import conversation_manager
from loguru import logger


class MessageHandler:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
    –ë–æ–ª—å—à–µ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    –¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è–º–∏.
    """

    def __init__(self):
        self.is_running = False
        self.session_stats: Dict[str, Dict] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ MessageHandler...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
            await retrospective_scanner.start_scanning()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–π
            asyncio.create_task(self._approval_worker())

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            asyncio.create_task(self._stats_update_loop())

            self.is_running = True
            logger.success("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π MessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageHandler: {e}")
            raise

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MessageHandler...")

        self.is_running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
        await retrospective_scanner.stop_scanning()

        logger.info("‚úÖ MessageHandler –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def approve_conversation(self, conversation_id: int, admin_id: int, comment: Optional[str] = None) -> bool:
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–æ–º"""
        try:
            async with get_db() as db:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞
                await db.execute(
                    update(Conversation).where(
                        Conversation.id == conversation_id
                    ).values(
                        admin_approved=True,
                        status=ConversationStatus.APPROVED,
                        requires_approval=False,
                        updated_at=datetime.utcnow()
                    )
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                approval = MessageApproval(
                    conversation_id=conversation_id,
                    status=ApprovalStatus.APPROVED,
                    approved_by_admin_id=admin_id,
                    approved_at=datetime.utcnow(),
                    admin_comment=comment
                )
                db.add(approval)

                await db.commit()

                logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥ {conversation_id} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–æ–º {admin_id}")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {conversation_id}: {e}")
            return False

    async def reject_conversation(self, conversation_id: int, admin_id: int, comment: Optional[str] = None) -> bool:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–æ–º"""
        try:
            async with get_db() as db:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞
                await db.execute(
                    update(Conversation).where(
                        Conversation.id == conversation_id
                    ).values(
                        status=ConversationStatus.BLOCKED,
                        requires_approval=False,
                        updated_at=datetime.utcnow()
                    )
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                approval = MessageApproval(
                    conversation_id=conversation_id,
                    status=ApprovalStatus.REJECTED,
                    approved_by_admin_id=admin_id,
                    approved_at=datetime.utcnow(),
                    admin_comment=comment
                )
                db.add(approval)

                await db.commit()

                logger.info(f"üö´ –î–∏–∞–ª–æ–≥ {conversation_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {admin_id}")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {conversation_id}: {e}")
            return False

    async def get_pending_approvals(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Conversation).where(
                        and_(
                            Conversation.requires_approval == True,
                            Conversation.admin_approved == False,
                            Conversation.status == ConversationStatus.PENDING_APPROVAL
                        )
                    ).order_by(Conversation.created_at.desc())
                )

                conversations = result.scalars().all()

                pending_list = []
                for conv in conversations:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏–¥–∞
                    last_msg_result = await db.execute(
                        select(Message).where(
                            and_(
                                Message.conversation_id == conv.id,
                                Message.is_from_lead == True
                            )
                        ).order_by(Message.timestamp.desc()).limit(1)
                    )

                    last_message = last_msg_result.scalar_one_or_none()

                    pending_list.append({
                        "conversation_id": conv.id,
                        "lead_username": conv.lead_username,
                        "session_name": conv.session_name,
                        "created_at": conv.created_at,
                        "last_message": last_message.content if last_message else None,
                        "last_message_time": last_message.timestamp if last_message else None,
                        "total_messages": conv.total_messages_received
                    })

                return pending_list

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
            return []

    async def force_scan_now(self) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            return await retrospective_scanner.force_scan_now()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {"error": str(e)}

    async def pause_session_scanning(self, session_name: str) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            async with get_db() as db:
                await db.execute(
                    update(Session).where(
                        Session.session_name == session_name
                    ).values(
                        ai_enabled=False,
                        updated_at=datetime.utcnow()
                    )
                )
                await db.commit()

                logger.info(f"‚è∏Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {session_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_name}: {e}")
            return False

    async def resume_session_scanning(self, session_name: str) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        try:
            async with get_db() as db:
                await db.execute(
                    update(Session).where(
                        Session.session_name == session_name
                    ).values(
                        ai_enabled=True,
                        updated_at=datetime.utcnow()
                    )
                )
                await db.commit()

                logger.info(f"‚ñ∂Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {session_name} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_name}: {e}")
            return False

    async def get_session_status(self, session_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏"""
        try:
            async with get_db() as db:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
                session_result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = session_result.scalar_one_or_none()

                if not session:
                    return {"error": "Session not found"}

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
                dialogs_result = await db.execute(
                    select(Conversation).where(Conversation.session_name == session_name)
                )
                dialogs = dialogs_result.scalars().all()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_counts = {}
                for dialog in dialogs:
                    status = dialog.status.value
                    status_counts[status] = status_counts.get(status, 0) + 1

                # –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                pending_count = len([d for d in dialogs if d.requires_approval and not d.admin_approved])

                return {
                    "session_name": session_name,
                    "status": session.status.value,
                    "ai_enabled": session.ai_enabled,
                    "total_conversations": len(dialogs),
                    "pending_approvals": pending_count,
                    "status_breakdown": status_counts,
                    "last_activity": session.last_activity.isoformat() if session.last_activity else None,
                    "created_at": session.created_at.isoformat(),
                    "scanning_enabled": session.ai_enabled and session.status == SessionStatus.ACTIVE
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return {"error": str(e)}

    async def get_realtime_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            async with get_db() as db:
                # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                active_sessions_result = await db.execute(
                    select(Session).where(
                        and_(
                            Session.status == SessionStatus.ACTIVE,
                            Session.ai_enabled == True
                        )
                    )
                )
                active_sessions = active_sessions_result.scalars().all()

                # –î–∏–∞–ª–æ–≥–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                pending_result = await db.execute(
                    select(Conversation).where(
                        and_(
                            Conversation.requires_approval == True,
                            Conversation.admin_approved == False
                        )
                    )
                )
                pending_conversations = len(pending_result.scalars().all())

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
            scanner_stats = retrospective_scanner.get_stats()

            return {
                "system_type": "retrospective_scanning",
                "active_sessions": len(active_sessions),
                "pending_approvals": pending_conversations,
                "scanner_running": retrospective_scanner.is_running,
                "scanner_stats": scanner_stats,
                "last_updated": datetime.utcnow().isoformat()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}

    async def _approval_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–π –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        while self.is_running:
            try:
                await self._process_approval_timeouts()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –æ–¥–æ–±—Ä–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)

    async def _process_approval_timeouts(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–∏–π"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –¥–∏–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
            timeout_threshold = datetime.utcnow() - timedelta(hours=24)

            async with get_db() as db:
                timeout_conversations = await db.execute(
                    select(Conversation).where(
                        and_(
                            Conversation.requires_approval == True,
                            Conversation.admin_approved == False,
                            Conversation.created_at < timeout_threshold
                        )
                    )
                )

                conversations = timeout_conversations.scalars().all()

                for conv in conversations:
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                    await db.execute(
                        update(Conversation).where(
                            Conversation.id == conv.id
                        ).values(
                            status=ConversationStatus.BLOCKED,
                            requires_approval=False,
                            updated_at=datetime.utcnow()
                        )
                    )

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                    approval = MessageApproval(
                        conversation_id=conv.id,
                        status=ApprovalStatus.TIMEOUT,
                        approved_at=datetime.utcnow(),
                        admin_comment="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (24 —á–∞—Å–∞)"
                    )
                    db.add(approval)

                if conversations:
                    await db.commit()
                    logger.info(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ {len(conversations)} –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–∏–π: {e}")

    async def _stats_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.is_running:
            try:
                await self._update_session_stats()
                await asyncio.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(300)

    async def _update_session_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π"""
        try:
            async with get_db() as db:
                sessions_result = await db.execute(
                    select(Session).where(Session.status == SessionStatus.ACTIVE)
                )
                sessions = sessions_result.scalars().all()

                for session in sessions:
                    session_name = session.session_name

                    # –°—á–∏—Ç–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
                    dialogs_result = await db.execute(
                        select(Conversation).where(Conversation.session_name == session_name)
                    )
                    dialogs = dialogs_result.scalars().all()

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    total_conversations = len(dialogs)
                    active_conversations = len([d for d in dialogs if d.status == ConversationStatus.ACTIVE])
                    pending_approvals = len([d for d in dialogs if d.requires_approval and not d.admin_approved])

                    self.session_stats[session_name] = {
                        "total_conversations": total_conversations,
                        "active_conversations": active_conversations,
                        "pending_approvals": pending_approvals,
                        "ai_enabled": session.ai_enabled,
                        "last_updated": datetime.utcnow().isoformat()
                    }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º (–∑–∞–≥–ª—É—à–∫–∏):

    async def handle_incoming_message(self, session_name: str, event):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.debug(f"üì® handle_incoming_message –≤—ã–∑–≤–∞–Ω –¥–ª—è {session_name} (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)")

    async def add_session(self, session: Session):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.debug(f"üìù add_session –≤—ã–∑–≤–∞–Ω –¥–ª—è {session.session_name} (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)")

    async def remove_session(self, session_name: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.debug(f"üìù remove_session –≤—ã–∑–≤–∞–Ω –¥–ª—è {session_name} (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)")

    async def cleanup_inactive_sessions(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.debug("üßπ cleanup_inactive_sessions –≤—ã–∑–≤–∞–Ω (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)")
        return 0

    async def get_active_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            async with get_db() as db:
                result = await db.execute(
                    select(Session.session_name).where(
                        and_(
                            Session.status == SessionStatus.ACTIVE,
                            Session.ai_enabled == True
                        )
                    )
                )
                return [row[0] for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return []

    async def emergency_disconnect_all(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.info("üö® emergency_disconnect_all –≤—ã–∑–≤–∞–Ω (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)")

    async def force_reconnect_all(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.info("üîÑ force_reconnect_all –≤—ã–∑–≤–∞–Ω (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)")

    async def get_recovery_stats(self) -> Dict[str, Any]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return {
            "system_type": "retrospective_scanning",
            "message": "Recovery stats –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
message_handler = MessageHandler()