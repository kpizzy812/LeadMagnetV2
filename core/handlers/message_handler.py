# core/handlers/message_handler.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π utils

import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Any
from telethon import TelegramClient, events
from telethon.tl.types import User, PeerUser
from telethon.errors import (
    NetworkMigrateError, PhoneMigrateError, FloodWaitError,
    AuthKeyUnregisteredError, AuthKeyInvalidError, AuthKeyDuplicatedError,
    ServerError
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from config.settings.base import settings
from storage.database import get_db
from storage.models.base import Session, SessionStatus, Conversation
from core.engine.conversation_manager import conversation_manager
from core.integrations.telegram_client import TelegramSessionManager
from loguru import logger

# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ò–º–ø–æ—Ä—Ç—ã utils —Å–∏—Å—Ç–µ–º—ã
from utils.reconnect_system import reconnect_manager
from utils.dialog_recovery import dialog_recovery
from utils.proxy_validator import proxy_validator


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""

    def __init__(self):
        self.session_manager = TelegramSessionManager()
        self.active_handlers: Dict[str, TelegramClient] = {}
        self.processing_queue = asyncio.Queue()
        self.response_delays: Dict[str, datetime] = {}
        self.paused_sessions: Set[str] = set()  # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.session_stats: Dict[str, Dict] = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º

        # –ù–û–í–û–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.connection_monitors: Dict[str, asyncio.Task] = {}
        self.last_heartbeat: Dict[str, datetime] = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            await self.session_manager.initialize()

            # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            await self._initialize_recovery_systems()

            await self._setup_session_handlers()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
            asyncio.create_task(self._process_message_queue())

            # –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            asyncio.create_task(dialog_recovery.start_recovery_worker())

            # –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            asyncio.create_task(self._connection_monitor_loop())

            logger.info("‚úÖ MessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageHandler: {e}")
            raise

    async def _initialize_recovery_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏
            await proxy_validator.validate_all_from_config()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ reconnect_manager
            session_files = list(settings.sessions_dir.rglob("*.session"))

            for session_file in session_files:
                session_name = session_file.stem

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                reconnect_manager.register_session(
                    session_name,
                    lambda sn=session_name: self._reconnect_session(sn)
                )

            logger.info(f"üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(session_files)} —Å–µ—Å—Å–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            raise

    async def _reconnect_session(self, session_name: str) -> bool:
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ session_manager"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {session_name}")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if session_name in self.active_handlers:
                try:
                    await self.active_handlers[session_name].disconnect()
                except:
                    pass
                del self.active_handlers[session_name]

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if session_name in self.connection_monitors:
                self.connection_monitors[session_name].cancel()
                del self.connection_monitors[session_name]

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
            async with get_db() as db:
                result = await db.execute(
                    select(Session).where(Session.session_name == session_name)
                )
                session = result.scalar_one_or_none()

                if session and session.ai_enabled:
                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    await self._setup_session_handler(session)

                    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    client = self.active_handlers.get(session_name)
                    if client:
                        asyncio.create_task(self._scan_missed_messages(session_name, client))

                    logger.success(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                    return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return False

    async def _scan_missed_messages(self, session_name: str, client: TelegramClient):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –î–∞–µ–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç—É —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            await asyncio.sleep(3)

            logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º dialog_recovery –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            missed_messages = await dialog_recovery.scan_missed_messages(session_name, client)

            if missed_messages:
                logger.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(missed_messages)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name}")
                await dialog_recovery.process_missed_messages(missed_messages)
            else:
                logger.info(f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {session_name}: {e}")

    async def _setup_session_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        async with get_db() as db:
            result = await db.execute(
                select(Session).where(
                    Session.status == SessionStatus.ACTIVE,
                    Session.ai_enabled == True
                )
            )
            sessions = result.scalars().all()

            for session in sessions:
                try:
                    await self._setup_session_handler(session)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ {session.session_name}: {e}")
                    # –ù–û–í–û–ï: –û—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    reconnect_manager.mark_disconnected(session.session_name)

    async def _setup_session_handler(self, session: Session):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        session_name = session.session_name

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏
        client = await self.session_manager.get_client(session_name)
        if not client:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")
            reconnect_manager.mark_disconnected(session_name)
            return

        # –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self._start_connection_monitor(session_name, client)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        @client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat
                self.last_heartbeat[session_name] = datetime.utcnow()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not isinstance(event.peer_id, PeerUser):
                    return

                sender = await event.get_sender()
                if not isinstance(sender, User) or sender.bot:
                    return

                # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                username = sender.username
                if not username:
                    username = str(sender.id)

                message_text = event.message.message
                if not message_text or len(message_text.strip()) < 1:
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await self.processing_queue.put({
                    "session_name": session_name,
                    "username": username,
                    "message": message_text,
                    "telegram_id": sender.id,
                    "timestamp": datetime.utcnow()
                })

                logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {username} ‚Üí {session_name}")

            except (NetworkMigrateError, PhoneMigrateError, ServerError, ConnectionError) as e:
                logger.error(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {session_name}: {e}")
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                reconnect_manager.mark_disconnected(session_name)

            except (AuthKeyUnregisteredError, AuthKeyInvalidError, AuthKeyDuplicatedError) as e:
                logger.error(f"üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {session_name}: {e}")
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è

            except FloodWaitError as e:
                logger.warning(f"‚è∞ Flood wait –¥–ª—è {session_name}: {e.seconds}—Å")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

        self.active_handlers[session_name] = client

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é
        reconnect_manager.mark_connected(session_name)

        logger.info(f"üéß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}")

    def _start_connection_monitor(self, session_name: str, client: TelegramClient):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        async def monitor_connection():
            """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
            try:
                while session_name in self.active_handlers:
                    await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
                        if not client.is_connected():
                            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {session_name} –æ—Ç–∫–ª—é—á–µ–Ω")
                            reconnect_manager.mark_disconnected(session_name)
                            break

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                        if not await client.is_user_authorized():
                            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {session_name} –ø–æ—Ç–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                            reconnect_manager.mark_disconnected(session_name)
                            break

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º heartbeat (–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
                        last_heartbeat = self.last_heartbeat.get(session_name)
                        if last_heartbeat:
                            inactive_time = datetime.utcnow() - last_heartbeat
                            if inactive_time > timedelta(hours=1):
                                logger.info(f"üí§ –°–µ—Å—Å–∏—è {session_name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ {inactive_time}")

                    except (NetworkMigrateError, PhoneMigrateError, ServerError, ConnectionError) as e:
                        logger.error(f"üîå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {session_name}: {e}")
                        reconnect_manager.mark_disconnected(session_name)
                        break

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {session_name}: {e}")
                        await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

            except asyncio.CancelledError:
                logger.info(f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {session_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {session_name}: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        task = asyncio.create_task(monitor_connection())
        self.connection_monitors[session_name] = task

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º heartbeat
        self.last_heartbeat[session_name] = datetime.utcnow()

    async def _connection_monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while True:
            try:
                await asyncio.sleep(120)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
                for session_name in list(self.active_handlers.keys()):
                    client = self.active_handlers[session_name]

                    try:
                        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        if not client.is_connected():
                            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ {session_name}")
                            reconnect_manager.mark_disconnected(session_name)

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {session_name}: {e}")
                        reconnect_manager.mark_disconnected(session_name)

                # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
                await self._cleanup_inactive_monitors()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)

    async def _cleanup_inactive_monitors(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        inactive_monitors = []

        for session_name, task in self.connection_monitors.items():
            if task.done() or session_name not in self.active_handlers:
                inactive_monitors.append(session_name)

        for session_name in inactive_monitors:
            if session_name in self.connection_monitors:
                task = self.connection_monitors[session_name]
                if not task.done():
                    task.cancel()
                del self.connection_monitors[session_name]

        if inactive_monitors:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_monitors)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤")

    async def _process_message_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message_data = await self.processing_queue.get()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._handle_message(message_data)

                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.processing_queue.task_done()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(1)

    async def _handle_message(self, message_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
        from bot.handlers.ai_control.ai_control import GLOBAL_AI_ENABLED
        if not GLOBAL_AI_ENABLED:
            logger.info("üö´ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω")
            return

        session_name = message_data["session_name"]
        username = message_data["username"]
        message_text = message_data["message"]

        if session_name in self.paused_sessions:
            logger.info(f"‚è∏Ô∏è –°–µ—Å—Å–∏—è {session_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
            delay_key = f"{session_name}:{username}"
            if delay_key in self.response_delays:
                next_response_time = self.response_delays[delay_key]
                if datetime.utcnow() < next_response_time:
                    wait_seconds = (next_response_time - datetime.utcnow()).total_seconds()
                    logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}: {wait_seconds:.1f}—Å")
                    await asyncio.sleep(wait_seconds)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
            conversation = await conversation_manager.get_conversation(
                lead_username=username,
                session_name=session_name,
                create_if_not_exists=True
            )

            if not conversation:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ {username} ‚Üî {session_name}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤
            from core.filters.conversation_filter import conversation_filter

            should_respond, reason = await conversation_filter.should_respond_to_conversation(
                conversation, message_text
            )

            if not should_respond:
                logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ {conversation.id}: {reason}")

                # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                if "–æ–¥–æ–±—Ä–µ–Ω–∏—è" in reason:
                    await self._notify_admins_about_pending_approval(conversation, message_text)

                return

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            if (conversation.ai_disabled or
                    conversation.auto_responses_paused or
                    not conversation.session.ai_enabled):
                logger.info(f"‚è∏Ô∏è –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conversation.id}")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = await conversation_manager.process_user_message(
                conversation_id=conversation.id,
                message_text=message_text
            )

            if response_text:
                # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                typing_delay = self._calculate_typing_delay(response_text)
                await asyncio.sleep(typing_delay)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
                success = await self._send_response_safely(session_name, username, response_text)

                if success:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    next_delay = random.randint(
                        settings.security.response_delay_min,
                        settings.security.response_delay_max
                    )
                    self.response_delays[delay_key] = datetime.utcnow() + timedelta(seconds=next_delay)

                    # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–ª–æ—É–∞–ø—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    await self._cancel_pending_followups(conversation.id)

                    logger.success(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {session_name} ‚Üí {username}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç {session_name} ‚Üí {username}")

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è {username}")

            if session_name in self.session_stats:
                self.session_stats[session_name]["last_activity"] = datetime.utcnow().isoformat()
                self.session_stats[session_name]["messages_24h"] = self.session_stats[session_name].get("messages_24h",
                                                                                                        0) + 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}: {e}")

    async def _send_response_safely(self, session_name: str, username: str, message_text: str) -> bool:
        """–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            if session_name not in self.active_handlers:
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return False

            client = self.active_handlers[session_name]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not client.is_connected():
                logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {session_name} –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                reconnect_manager.mark_disconnected(session_name)
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(username, message_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat
            self.last_heartbeat[session_name] = datetime.utcnow()

            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {session_name} ‚Üí @{username}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            await self._update_session_stats(session_name, success=True)

            return True

        except (NetworkMigrateError, PhoneMigrateError, ServerError, ConnectionError) as e:
            logger.error(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {session_name} ‚Üí @{username}: {e}")
            reconnect_manager.mark_disconnected(session_name)
            await self._update_session_stats(session_name, success=False)
            return False

        except FloodWaitError as e:
            logger.warning(f"‚è∞ Flood wait –¥–ª—è {session_name}: {e.seconds}—Å")
            await self._update_session_stats(session_name, success=False)
            return False

        except (AuthKeyUnregisteredError, AuthKeyInvalidError, AuthKeyDuplicatedError) as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {session_name}: {e}")
            await self._update_session_stats(session_name, success=False)
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {session_name} ‚Üí @{username}: {e}")
            await self._update_session_stats(session_name, success=False)
            return False

    async def _update_session_stats(self, session_name: str, success: bool = True):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            async with get_db() as db:
                from sqlalchemy import update

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if success:
                    await db.execute(
                        update(Session)
                        .where(Session.session_name == session_name)
                        .values(
                            total_messages_sent=Session.total_messages_sent + 1,
                            last_activity=datetime.utcnow()
                        )
                    )
                    await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

    async def _cancel_pending_followups(self, conversation_id: int):
        """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ñ–æ–ª–æ—É–∞–ø–æ–≤ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from storage.database import get_db
            from storage.models.base import FollowupSchedule
            from sqlalchemy import update

            async with get_db() as db:
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–æ–ª–æ—É–∞–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                await db.execute(
                    update(FollowupSchedule)
                    .where(
                        FollowupSchedule.conversation_id == conversation_id,
                        FollowupSchedule.executed == False
                    )
                    .values(
                        executed=True,
                        executed_at=datetime.utcnow(),
                        generated_message="–û—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª"
                    )
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–æ–ª–æ—É–∞–ø–æ–≤: {e}")

    def _calculate_typing_delay(self, text: str) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞)"""
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + –≤—Ä–µ–º—è –Ω–∞ "–ø–µ—á–∞—Ç–∞–Ω–∏–µ"
        base_delay = random.uniform(2, 5)
        typing_speed = random.uniform(3, 7)  # —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        typing_delay = len(text) / typing_speed

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        total_delay = min(base_delay + typing_delay, 15)

        return total_delay

    async def _notify_admins_about_pending_approval(self, conversation: Conversation, message_text: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –¥–∏–∞–ª–æ–≥–µ —Ç—Ä–µ–±—É—é—â–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è"""

        try:
            from bot.main import bot_manager

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            truncated_message = message_text[:200] + "..." if len(message_text) > 200 else message_text

            text = f"""‚ö†Ô∏è <b>–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>

üë§ <b>–û—Ç:</b> @{conversation.lead.username}
ü§ñ <b>–°–µ—Å—Å–∏—è:</b> {conversation.session.session_name}
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞:</b> {conversation.session.persona_type or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{truncated_message}</code>

üîç <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>
‚Ä¢ –û–¥–æ–±—Ä–∏—Ç—å - –ò–ò –Ω–∞—á–Ω–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
‚Ä¢ –û—Ç–∫–ª–æ–Ω–∏—Ç—å - –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å",
                            callback_data=f"approve_conversation_{conversation.id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥",
                            callback_data=f"dialog_view_{conversation.id}"
                        ),
                        InlineKeyboardButton(
                            text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"reject_conversation_{conversation.id}"
                        )
                    ]
                ]
            )

            await bot_manager.broadcast_to_admins(text, keyboard)
            logger.info(f"üì® –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –¥–∏–∞–ª–æ–≥–µ {conversation.id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")

    async def add_session(self, session_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        async with get_db() as db:
            result = await db.execute(
                select(Session).where(Session.session_name == session_name)
            )
            session = result.scalar_one_or_none()

            if session and session.ai_enabled:
                await self._setup_session_handler(session)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {session_name}")

    async def remove_session(self, session_name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if session_name in self.active_handlers:
            client = self.active_handlers[session_name]

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if session_name in self.connection_monitors:
                self.connection_monitors[session_name].cancel()
                del self.connection_monitors[session_name]

            await client.disconnect()
            del self.active_handlers[session_name]

            # –û—á–∏—â–∞–µ–º heartbeat
            if session_name in self.last_heartbeat:
                del self.last_heartbeat[session_name]

            logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {session_name}")

    async def pause_session(self, session_name: str):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            if session_name not in self.active_handlers:
                logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return False

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
            self.paused_sessions.add(session_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            async with get_db() as db:
                from sqlalchemy import update
                await db.execute(
                    update(Session)
                    .where(Session.session_name == session_name)
                    .values(ai_enabled=False)
                )
                await db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if session_name in self.session_stats:
                self.session_stats[session_name]["status"] = "paused"

            logger.info(f"‚è∏Ô∏è –°–µ—Å—Å–∏—è {session_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return False

    async def resume_session(self, session_name: str):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
            self.paused_sessions.discard(session_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            async with get_db() as db:
                from sqlalchemy import update
                await db.execute(
                    update(Session)
                    .where(Session.session_name == session_name)
                    .values(ai_enabled=True)
                )
                await db.commit()

            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º
            if session_name not in self.active_handlers:
                await self.add_session(session_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if session_name in self.session_stats:
                self.session_stats[session_name]["status"] = "active"

            logger.info(f"‚ñ∂Ô∏è –°–µ—Å—Å–∏—è {session_name} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return False

    async def get_session_stats(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ—Å—Å–∏—è–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            await self._update_session_stats_from_db()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            return self.session_stats.copy()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return {}

    async def _update_session_stats_from_db(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –∏–∑ –ë–î"""
        try:
            async with get_db() as db:
                from sqlalchemy import select, func
                from storage.models.base import Session, Conversation, Message as DBMessage

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º
                result = await db.execute(
                    select(
                        Session.session_name,
                        Session.status,
                        Session.ai_enabled,
                        Session.total_conversations,
                        Session.total_messages_sent,
                        Session.total_conversions,
                        Session.last_activity,
                        Session.persona_type
                    ).order_by(Session.session_name)
                )
                sessions_data = result.all()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                yesterday = datetime.utcnow() - timedelta(hours=24)

                for session_data in sessions_data:
                    session_name = session_data.session_name

                    # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞
                    messages_24h_result = await db.execute(
                        select(func.count(DBMessage.id))
                        .join(Session)
                        .where(
                            Session.session_name == session_name,
                            DBMessage.role == "assistant",
                            DBMessage.created_at >= yesterday
                        )
                    )
                    messages_24h = messages_24h_result.scalar() or 0

                    # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
                    active_dialogs_result = await db.execute(
                        select(func.count(Conversation.id))
                        .join(Session)
                        .where(
                            Session.session_name == session_name,
                            Conversation.status == "active"
                        )
                    )
                    active_dialogs = active_dialogs_result.scalar() or 0

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º reconnect_manager
                    if session_name in self.paused_sessions:
                        status = "paused"
                    elif session_name in self.active_handlers:
                        client = self.active_handlers[session_name]
                        if client.is_connected() and session_data.ai_enabled:
                            status = "active"
                        else:
                            status = "disconnected"
                    else:
                        status = "inactive"

                    # –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                    connection_info = {
                        "has_monitor": session_name in self.connection_monitors,
                        "last_heartbeat": self.last_heartbeat.get(session_name),
                        "reconnect_state": reconnect_manager.session_states.get(session_name,
                                                                                "unknown").value if hasattr(
                            reconnect_manager.session_states.get(session_name, "unknown"), 'value') else str(
                            reconnect_manager.session_states.get(session_name, "unknown"))
                    }

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.session_stats[session_name] = {
                        "status": status,
                        "persona_type": session_data.persona_type,
                        "ai_enabled": session_data.ai_enabled,
                        "total_conversations": session_data.total_conversations or 0,
                        "total_messages": session_data.total_messages_sent or 0,
                        "total_conversions": session_data.total_conversions or 0,
                        "messages_24h": messages_24h,
                        "active_dialogs": active_dialogs,
                        "last_activity": session_data.last_activity.isoformat() if session_data.last_activity else None,
                        "is_connected": session_name in self.active_handlers,
                        "connection_info": connection_info,
                        "last_updated": datetime.utcnow().isoformat()
                    }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")

    async def get_session_status(self, session_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            await self._update_session_stats_from_db()

            if session_name not in self.session_stats:
                return {"error": "Session not found"}

            stats = self.session_stats[session_name].copy()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if session_name in self.active_handlers:
                client = self.active_handlers[session_name]
                stats["client_connected"] = client.is_connected()

                try:
                    stats["client_authorized"] = await client.is_user_authorized()
                except:
                    stats["client_authorized"] = False
            else:
                stats["client_connected"] = False
                stats["client_authorized"] = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
            stats["queue_size"] = self.processing_queue.qsize()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
            delay_key = f"{session_name}:*"
            stats["has_response_delays"] = any(
                key.startswith(session_name) for key in self.response_delays.keys()
            )

            # –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            stats["recovery_info"] = {
                "reconnect_retries": reconnect_manager.retry_counts.get(session_name, 0),
                "last_reconnect_attempt": reconnect_manager.last_attempt.get(session_name),
                "has_reconnect_task": session_name in reconnect_manager.reconnect_tasks
            }

            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
            return {"error": str(e)}

    async def cleanup_inactive_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            inactive_sessions = []

            for session_name in list(self.active_handlers.keys()):
                client = self.active_handlers[session_name]

                if not client.is_connected():
                    inactive_sessions.append(session_name)
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    reconnect_manager.mark_disconnected(session_name)
                    continue

                try:
                    is_authorized = await client.is_user_authorized()
                    if not is_authorized:
                        inactive_sessions.append(session_name)
                        reconnect_manager.mark_disconnected(session_name)
                except:
                    inactive_sessions.append(session_name)
                    reconnect_manager.mark_disconnected(session_name)

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            for session_name in inactive_sessions:
                await self.remove_session(session_name)
                logger.warning(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session_name}")

            if inactive_sessions:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_sessions)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")

            return len(inactive_sessions)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return 0

    async def get_active_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        return list(self.active_handlers.keys())

    def get_realtime_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            return {
                "active_sessions": len(self.active_handlers),
                "paused_sessions": len(self.paused_sessions),
                "queue_size": self.processing_queue.qsize(),
                "total_response_delays": len(self.response_delays),
                "sessions_list": list(self.active_handlers.keys()),
                "paused_list": list(self.paused_sessions),
                "connection_monitors": len(self.connection_monitors),
                "last_updated": datetime.utcnow().isoformat()
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return {}

    async def emergency_disconnect_all(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –í–°–ï–• –°–ï–°–°–ò–ô")

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
            for task in self.connection_monitors.values():
                task.cancel()
            self.connection_monitors.clear()

            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
            disconnect_tasks = []
            for session_name in list(self.active_handlers.keys()):
                task = asyncio.create_task(self.remove_session(session_name))
                disconnect_tasks.append(task)

            if disconnect_tasks:
                await asyncio.gather(*disconnect_tasks, return_exceptions=True)

            logger.info("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")

    async def force_reconnect_all(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π")

        try:
            session_names = list(self.active_handlers.keys())

            for session_name in session_names:
                logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {session_name}")
                reconnect_manager.mark_disconnected(session_name)

            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {len(session_names)} —Å–µ—Å—Å–∏–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    async def get_recovery_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            return {
                "reconnect_manager": {
                    "registered_sessions": len(reconnect_manager.session_states),
                    "active_reconnect_tasks": len(reconnect_manager.reconnect_tasks),
                    "session_states": {
                        name: state.value if hasattr(state, 'value') else str(state)
                        for name, state in reconnect_manager.session_states.items()
                    },
                    "retry_counts": reconnect_manager.retry_counts.copy()
                },
                "dialog_recovery": {
                    "recovery_queue_size": dialog_recovery.recovery_queue.qsize(),
                    "last_scan_times": {
                        session: time.isoformat() if isinstance(time, datetime) else str(time)
                        for session, time in dialog_recovery.last_scan_time.items()
                    }
                },
                "message_handler": {
                    "active_handlers": len(self.active_handlers),
                    "connection_monitors": len(self.connection_monitors),
                    "heartbeats": {
                        session: time.isoformat() if isinstance(time, datetime) else str(time)
                        for session, time in self.last_heartbeat.items()
                    }
                }
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": str(e)}

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MessageHandler...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for task in self.connection_monitors.values():
            task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        if self.connection_monitors:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*self.connection_monitors.values(), return_exceptions=True),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

        self.connection_monitors.clear()

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        for session_name, client in self.active_handlers.items():
            try:
                await client.disconnect()
                logger.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç {session_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}")

        self.active_handlers.clear()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º session_manager
        await self.session_manager.shutdown()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º reconnect_manager
        await reconnect_manager.shutdown()

        logger.info("‚úÖ MessageHandler –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def handle_incoming_message(self, session_name: str, event):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º telegram_client.py"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not hasattr(event, 'peer_id') or not hasattr(event.peer_id, '__class__'):
                return

            from telethon.tl.types import PeerUser, User

            if not isinstance(event.peer_id, PeerUser):
                return

            sender = await event.get_sender()
            if not isinstance(sender, User) or sender.bot:
                return

            # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            username = sender.username
            if not username:
                username = str(sender.id)

            message_text = event.message.message
            if not message_text or len(message_text.strip()) < 1:
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É)
            await self.processing_queue.put({
                "session_name": session_name,
                "username": username,
                "message": message_text,
                "telegram_id": sender.id,
                "timestamp": datetime.utcnow()
            })

            logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {username} ‚Üí {session_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {session_name}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
message_handler = MessageHandler()