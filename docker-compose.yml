# docker-compose.yml

version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: lead_management_db
    environment:
      POSTGRES_DB: lead_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-your_strong_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Основное приложение
  lead_management:
    build: .
    container_name: lead_management_app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database
      DATABASE__HOST: postgres
      DATABASE__PORT: 5432
      DATABASE__NAME: lead_management
      DATABASE__USER: postgres
      DATABASE__PASSWORD: ${DATABASE_PASSWORD:-your_strong_password}

      # Telegram (из .env файла)
      TELEGRAM__API_ID: ${TELEGRAM_API_ID}
      TELEGRAM__API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM__BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM__ADMIN_IDS: ${TELEGRAM_ADMIN_IDS}

      # OpenAI
      OPENAI__API_KEY: ${OPENAI_API_KEY}
      OPENAI__MODEL: ${OPENAI_MODEL:-gpt-4}

      # System
      SYSTEM__DEBUG: ${DEBUG:-false}
      SYSTEM__LOG_LEVEL: ${LOG_LEVEL:-INFO}

    volumes:
      - ./data:/app/data
      - ./logs:/app/logs

    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "python -c 'import asyncio; from storage.database import db_manager; asyncio.run(db_manager.health_check())'"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: lead_management_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx для веб-интерфейса (опционально)
  nginx:
    image: nginx:alpine
    container_name: lead_management_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - lead_management
    restart: unless-stopped
    profiles:
      - web

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: lead_management_network