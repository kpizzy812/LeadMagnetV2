# main.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

import asyncio
import signal
import sys
from typing import Optional
from datetime import datetime

from loguru import logger
from config.settings.base import settings
from storage.database import db_manager

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from core.handlers.message_handler import message_handler
from personas.persona_factory import setup_default_project
from bot.main import bot_manager
from workflows.followups.scheduler import followup_scheduler

# Cold Outreach —Å–∏—Å—Ç–µ–º–∞
from cold_outreach.core.outreach_manager import outreach_manager


class LeadManagementSystem:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏ —Å —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    - –£–±—Ä–∞–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    - –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å cold outreach –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ reconnect —Å–∏—Å—Ç–µ–º
    """

    def __init__(self):
        self.running = False
        self.shutdown_event = asyncio.Event()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Lead Management System (—Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)")

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await db_manager.initialize()

            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            await self._create_retrospective_tables()

            # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info("üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
            setup_default_project()

            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cold Outreach —Å–∏—Å—Ç–µ–º—ã
            if settings.cold_outreach.enabled:
                logger.info("üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cold Outreach —Å–∏—Å—Ç–µ–º—ã...")
                await outreach_manager.initialize()

            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            await message_handler.initialize()

            # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
            await bot_manager.initialize()

            # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤
            logger.info("üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤...")
            asyncio.create_task(followup_scheduler.start())

            # 8. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞
            await self._show_startup_stats()

            logger.success("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üîç –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {settings.system.retrospective_scan_interval} —Å–µ–∫")
            logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

    async def _create_retrospective_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from storage.models.base import Base
            from storage.database import engine

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)

            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise

    async def _show_startup_stats(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            from storage.database import get_db
            from storage.models.base import Session, Conversation, SessionStatus
            from sqlalchemy import select, func

            async with get_db() as db:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
                sessions_result = await db.execute(
                    select(
                        func.count(Session.id).label('total'),
                        func.count(Session.id).filter(Session.status == SessionStatus.ACTIVE).label('active'),
                        func.count(Session.id).filter(Session.ai_enabled == True).label('ai_enabled')
                    )
                )
                session_stats = sessions_result.first()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
                conversations_result = await db.execute(
                    select(
                        func.count(Conversation.id).label('total'),
                        func.count(Conversation.id).filter(Conversation.admin_approved == True).label('approved'),
                        func.count(Conversation.id).filter(Conversation.requires_approval == True).label('pending')
                    )
                )
                conv_stats = conversations_result.first()

            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
            logger.info(
                f"   ü§ñ –°–µ—Å—Å–∏–∏: {session_stats.total} –≤—Å–µ–≥–æ, {session_stats.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {session_stats.ai_enabled} —Å –ò–ò")
            logger.info(
                f"   üí¨ –î–∏–∞–ª–æ–≥–∏: {conv_stats.total} –≤—Å–µ–≥–æ, {conv_stats.approved} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö, {conv_stats.pending} –æ–∂–∏–¥–∞—é—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            await self.initialize()
            self.running = True

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
            for sig in [signal.SIGINT, signal.SIGTERM]:
                signal.signal(sig, lambda s, f: asyncio.create_task(self.shutdown()))

            logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            logger.info("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks = [
                asyncio.create_task(bot_manager.run()),
                asyncio.create_task(self._system_monitor()),
                asyncio.create_task(self._wait_for_shutdown())
            ]

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()

        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()

    async def _system_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)

                if not self.running:
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
                scanner_stats = message_handler.get_realtime_stats()
                if not scanner_stats.get("scanner_running", False):
                    logger.warning("‚ö†Ô∏è –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
                db_healthy = await db_manager.health_check()
                if not db_healthy:
                    logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

                logger.debug("üíì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã: –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
                await asyncio.sleep(60)

    async def _wait_for_shutdown(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        await self.shutdown_event.wait()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        if not self.running:
            return

        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        self.shutdown_event.set()

        try:
            # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–ª–æ—É–∞–ø–æ–≤
            logger.info("üìÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–æ–ª–æ—É–∞–ø–æ–≤...")
            await followup_scheduler.stop()

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º message_handler (–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä)
            logger.info("üîç –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            await message_handler.shutdown()

            # 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Cold Outreach
            if settings.cold_outreach.enabled:
                logger.info("üì§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cold Outreach —Å–∏—Å—Ç–µ–º—ã...")
                await outreach_manager.shutdown()

            # 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            logger.info("ü§ñ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
            await bot_manager.shutdown()

            # 5. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            logger.info("üìä –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            await db_manager.close()

            logger.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")

    async def get_system_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats = await message_handler.get_realtime_stats()

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ cold outreach
            if settings.cold_outreach.enabled:
                co_stats = await outreach_manager.get_status()
                stats["cold_outreach"] = co_stats

            stats.update({
                "system_version": "2.0_retrospective",
                "running": self.running,
                "startup_time": datetime.utcnow().isoformat(),
                "scan_interval": settings.system.retrospective_scan_interval
            })

            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"error": str(e)}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout,
        level=settings.system.log_level,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        colorize=True
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    logger.add(
        settings.logs_dir / "system.log",
        level="INFO",
        rotation="1 day",
        retention="30 days",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}"
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
    logger.add(
        settings.logs_dir / "errors.log",
        level="ERROR",
        rotation="1 day",
        retention="30 days",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}"
    )

    logger.info("üéØ Lead Management System v2.0 (Retrospective)")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if settings.system.retrospective_scan_interval < 60:
        logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—å—à–µ 60 —Å–µ–∫—É–Ω–¥ - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–º")

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = LeadManagementSystem()
    await system.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)