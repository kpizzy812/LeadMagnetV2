# utils/proxy_validator.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import json
import aiohttp
from typing import Dict, Set, List, Tuple
from dataclasses import dataclass
import asyncio
from loguru import logger
import time
from pathlib import Path

from config.settings.base import settings


@dataclass
class ProxyInfo:
    host: str
    port: int
    username: str = ""
    password: str = ""
    is_working: bool = True
    last_check: float = 0.0
    failures: int = 0
    response_time: float = 0.0


class ProxyValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–∫—Å–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""

    def __init__(self):
        self.validated_proxies: Dict[str, ProxyInfo] = {}
        self.failed_proxies: Set[str] = set()
        self.validation_in_progress = False

    async def validate_proxy(self, host: str, port: int, username: str = "", password: str = "") -> Tuple[bool, float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏ —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        try:
            proxy_key = f"{host}:{port}"

            if username and password:
                proxy_url = f"socks5://{username}:{password}@{host}:{port}"
            else:
                proxy_url = f"socks5://{host}:{port}"

            timeout = aiohttp.ClientTimeout(total=15)
            start_time = time.time()

            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                        "https://httpbin.org/ip",
                        proxy=proxy_url
                ) as response:
                    response_time = time.time() - start_time

                    if response.status == 200:
                        data = await response.json()
                        origin_ip = data.get("origin", "unknown")

                        # –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        self.validated_proxies[proxy_key] = ProxyInfo(
                            host=host, port=port, username=username,
                            password=password, is_working=True,
                            last_check=time.time(), response_time=response_time
                        )
                        self.failed_proxies.discard(proxy_key)

                        logger.debug(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy_key} —Ä–∞–±–æ—Ç–∞–µ—Ç (IP: {origin_ip}, –≤—Ä–µ–º—è: {response_time:.2f}—Å)")
                        return True, response_time

        except asyncio.TimeoutError:
            proxy_key = f"{host}:{port}"
            self.failed_proxies.add(proxy_key)
            logger.warning(f"‚è∞ –ü—Ä–æ–∫—Å–∏ {proxy_key} –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")

        except Exception as e:
            proxy_key = f"{host}:{port}"
            self.failed_proxies.add(proxy_key)
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy_key} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")

        return False, 0.0

    async def validate_all_from_config(self, config_path: str = None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if self.validation_in_progress:
            logger.warning("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return

        self.validation_in_progress = True

        try:
            if config_path is None:
                config_path = settings.data_dir / "proxies.json"

            if not Path(config_path).exists():
                logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                return

            with open(config_path, 'r') as f:
                proxy_data = json.load(f)

            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(proxy_data)} –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")

            tasks = []
            session_configs = []

            for session_name, config in proxy_data.items():
                # –ë–µ—Ä–µ–º static –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ, –∏–Ω–∞—á–µ dynamic
                proxy_config = config.get("static") or config.get("dynamic")

                if proxy_config and "host" in proxy_config and "port" in proxy_config:
                    task = self.validate_proxy(
                        host=proxy_config["host"],
                        port=proxy_config["port"],
                        username=proxy_config.get("username", ""),
                        password=proxy_config.get("password", "")
                    )
                    tasks.append(task)
                    session_configs.append((session_name, proxy_config))

            if not tasks:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏
            semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

            async def validate_with_semaphore(task):
                async with semaphore:
                    return await task

            results = await asyncio.gather(
                *[validate_with_semaphore(task) for task in tasks],
                return_exceptions=True
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            working_count = 0
            failed_count = 0
            total_response_time = 0

            for i, (success, response_time) in enumerate(results):
                if isinstance(success, Exception):
                    failed_count += 1
                    session_name = session_configs[i][0]
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {session_name}: {success}")
                elif success:
                    working_count += 1
                    total_response_time += response_time
                else:
                    failed_count += 1

            avg_response_time = total_response_time / working_count if working_count > 0 else 0

            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:")
            logger.info(f"   ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {working_count}")
            logger.info(f"   ‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {failed_count}")
            if working_count > 0:
                logger.info(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f}—Å")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if failed_count > 0:
                logger.warning(f"‚ö†Ô∏è {failed_count} –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

            if working_count == 0:
                logger.error(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        finally:
            self.validation_in_progress = False

    def get_validation_results(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        results = {}

        for proxy_key, proxy_info in self.validated_proxies.items():
            results[proxy_key] = {
                "host": proxy_info.host,
                "port": proxy_info.port,
                "is_working": proxy_info.is_working,
                "response_time": proxy_info.response_time,
                "last_check": proxy_info.last_check,
                "failures": proxy_info.failures
            }

        for proxy_key in self.failed_proxies:
            if proxy_key not in results:
                host, port = proxy_key.split(":")
                results[proxy_key] = {
                    "host": host,
                    "port": int(port),
                    "is_working": False,
                    "response_time": 0.0,
                    "last_check": time.time(),
                    "failures": 1
                }

        return results

    def get_working_proxies(self) -> List[ProxyInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        return [
            proxy_info for proxy_info in self.validated_proxies.values()
            if proxy_info.is_working
        ]

    def get_failed_proxies(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        return list(self.failed_proxies)

    async def revalidate_failed_proxies(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        if not self.failed_proxies:
            logger.info("‚úÖ –ù–µ—Ç –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(self.failed_proxies)} –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏")

        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        proxies_to_check = list(self.failed_proxies)

        tasks = []
        for proxy_key in proxies_to_check:
            host, port = proxy_key.split(":")
            task = self.validate_proxy(host, int(port))
            tasks.append(task)

        results = await asyncio.gather(*tasks, return_exceptions=True)

        recovered_count = sum(1 for success, _ in results if success is True)

        if recovered_count > 0:
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {recovered_count} –ø—Ä–æ–∫—Å–∏")
        else:
            logger.info("‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
proxy_validator = ProxyValidator()