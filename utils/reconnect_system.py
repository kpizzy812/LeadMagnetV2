# core/utils/reconnect_system.py - –ù–û–í–´–ô –§–ê–ô–õ
# –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

import asyncio
import time
from typing import Dict, Set, Optional, Callable
from dataclasses import dataclass
from enum import Enum
from loguru import logger


class ConnectionState(Enum):
    CONNECTED = "connected"
    DISCONNECTED = "disconnected"
    RECONNECTING = "reconnecting"
    FAILED = "failed"


@dataclass
class ReconnectConfig:
    max_retries: int = 5
    base_delay: float = 2.0
    max_delay: float = 60.0
    backoff_multiplier: float = 2.0
    reset_after: float = 300.0


class ReconnectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É telegram_client.py"""

    def __init__(self):
        self.session_states: Dict[str, ConnectionState] = {}
        self.retry_counts: Dict[str, int] = {}
        self.last_attempt: Dict[str, float] = {}
        self.reconnect_tasks: Dict[str, asyncio.Task] = {}
        self.config = ReconnectConfig()
        self.callbacks: Dict[str, Callable] = {}

    def register_session(self, session_name: str, reconnect_callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.session_states[session_name] = ConnectionState.DISCONNECTED
        self.retry_counts[session_name] = 0
        self.callbacks[session_name] = reconnect_callback
        logger.info(f"üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {session_name}")

    def mark_connected(self, session_name: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é"""
        self.session_states[session_name] = ConnectionState.CONNECTED
        self.retry_counts[session_name] = 0
        if session_name in self.reconnect_tasks:
            self.reconnect_tasks[session_name].cancel()
            del self.reconnect_tasks[session_name]
        logger.success(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

    def mark_disconnected(self, session_name: str, start_reconnect: bool = True):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if session_name not in self.session_states:
            return

        self.session_states[session_name] = ConnectionState.DISCONNECTED
        logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞")

        if start_reconnect and session_name not in self.reconnect_tasks:
            task = asyncio.create_task(self._reconnect_loop(session_name))
            self.reconnect_tasks[session_name] = task

    async def _reconnect_loop(self, session_name: str):
        """–¶–∏–∫–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        while self.session_states.get(session_name) != ConnectionState.CONNECTED:
            try:
                if self.retry_counts[session_name] >= self.config.max_retries:
                    logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {session_name}")
                    self.session_states[session_name] = ConnectionState.FAILED
                    break

                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                now = time.time()
                if (session_name in self.last_attempt and
                        now - self.last_attempt[session_name] > self.config.reset_after):
                    self.retry_counts[session_name] = 0

                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                delay = min(
                    self.config.base_delay * (self.config.backoff_multiplier ** self.retry_counts[session_name]),
                    self.config.max_delay
                )

                self.retry_counts[session_name] += 1
                self.last_attempt[session_name] = now
                self.session_states[session_name] = ConnectionState.RECONNECTING

                logger.info(
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {self.retry_counts[session_name]} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {session_name} —á–µ—Ä–µ–∑ {delay:.1f}—Å")
                await asyncio.sleep(delay)

                # –í—ã–∑—ã–≤–∞–µ–º callback –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if session_name in self.callbacks:
                    success = await self.callbacks[session_name]()
                    if success:
                        self.mark_connected(session_name)
                        break

            except asyncio.CancelledError:
                logger.info(f"üõë –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {session_name} –æ—Ç–º–µ–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}")
                await asyncio.sleep(self.config.base_delay)

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ReconnectManager...")
        for task in self.reconnect_tasks.values():
            task.cancel()
        await asyncio.gather(*self.reconnect_tasks.values(), return_exceptions=True)
        self.reconnect_tasks.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
reconnect_manager = ReconnectManager()