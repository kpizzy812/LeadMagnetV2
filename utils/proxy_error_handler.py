# utils/proxy_error_handler.py - –ù–û–í–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏

import asyncio
import time
from typing import Dict, List, Optional, Set, Callable
from dataclasses import dataclass
from enum import Enum
from datetime import datetime, timedelta
import re

from loguru import logger
from telethon.errors import (
    NetworkMigrateError, PhoneMigrateError, ServerError,
    AuthKeyUnregisteredError, AuthKeyInvalidError, AuthKeyDuplicatedError,
    FloodWaitError, TimeoutError as TelethonTimeoutError
)


class ProxyErrorType(Enum):
    TIMEOUT = "timeout"
    CONNECTION_REFUSED = "connection_refused"
    AUTH_FAILED = "auth_failed"
    GENERAL_PROXY_ERROR = "general_proxy_error"
    NETWORK_ERROR = "network_error"
    SERVER_CLOSED = "server_closed"
    UNKNOWN = "unknown"


@dataclass
class ProxyErrorInfo:
    session_name: str
    error_type: ProxyErrorType
    error_message: str
    timestamp: datetime
    proxy_info: str
    retry_count: int = 0


class ProxyErrorHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""

    def __init__(self):
        self.error_patterns = {
            ProxyErrorType.TIMEOUT: [
                r"GeneralProxyError.*?timed out",
                r"Socket error.*?timed out",
                r"TimeoutError",
                r"timeout: timed out",
                r"Connection timed out"
            ],
            ProxyErrorType.CONNECTION_REFUSED: [
                r"GeneralProxyError.*?Connection refused",
                r"ConnectionRefusedError",
                r"Connection not allowed by ruleset",
                r"Socket error.*?Connection refused"
            ],
            ProxyErrorType.AUTH_FAILED: [
                r"GeneralProxyError.*?403: Forbidden",
                r"GeneralProxyError.*?407: Proxy Authentication Required",
                r"Authentication failed"
            ],
            ProxyErrorType.SERVER_CLOSED: [
                r"The server closed the connection",
                r"Server closed the connection",
                r"Connection closed while receiving data",
                r"0 bytes read on a total of \d+ expected bytes"
            ],
            ProxyErrorType.GENERAL_PROXY_ERROR: [
                r"GeneralProxyError",
                r"ProxyConnectionError",
                r"SOCKS.*?error"
            ]
        }

        self.session_errors: Dict[str, List[ProxyErrorInfo]] = {}
        self.blocked_sessions: Set[str] = set()
        self.recovery_callbacks: Dict[str, Callable] = {}
        self.error_cooldowns: Dict[str, datetime] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.error_stats = {
            "total_errors": 0,
            "by_type": {error_type: 0 for error_type in ProxyErrorType},
            "by_session": {},
            "recovery_attempts": 0,
            "successful_recoveries": 0
        }

    def analyze_error(self, session_name: str, error_message: str, proxy_info: str = "") -> ProxyErrorInfo:
        """–ê–Ω–∞–ª–∏–∑ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏"""

        error_type = self._classify_error(error_message)

        error_info = ProxyErrorInfo(
            session_name=session_name,
            error_type=error_type,
            error_message=error_message,
            timestamp=datetime.now(),
            proxy_info=proxy_info
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if session_name not in self.session_errors:
            self.session_errors[session_name] = []

        self.session_errors[session_name].append(error_info)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.session_errors[session_name]) > 10:
            self.session_errors[session_name] = self.session_errors[session_name][-10:]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats(error_info)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        self._log_error(error_info)

        return error_info

    def _classify_error(self, error_message: str) -> ProxyErrorType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
        error_lower = error_message.lower()

        for error_type, patterns in self.error_patterns.items():
            for pattern in patterns:
                if re.search(pattern, error_message, re.IGNORECASE):
                    return error_type

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
        if "timeout" in error_lower or "timed out" in error_lower:
            return ProxyErrorType.TIMEOUT
        elif "connection" in error_lower and ("refused" in error_lower or "failed" in error_lower):
            return ProxyErrorType.CONNECTION_REFUSED
        elif "server" in error_lower and "closed" in error_lower:
            return ProxyErrorType.SERVER_CLOSED
        elif any(word in error_lower for word in ["proxy", "socks", "http"]):
            return ProxyErrorType.GENERAL_PROXY_ERROR
        elif any(word in error_lower for word in ["network", "connection"]):
            return ProxyErrorType.NETWORK_ERROR

        return ProxyErrorType.UNKNOWN

    def _log_error(self, error_info: ProxyErrorInfo):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–∞–º–∞"""
        session_name = error_info.session_name
        error_type = error_info.error_type

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        cooldown_key = f"{session_name}:{error_type.value}"
        now = datetime.now()

        if cooldown_key in self.error_cooldowns:
            last_log = self.error_cooldowns[cooldown_key]
            if now - last_log < timedelta(minutes=5):  # Cooldown 5 –º–∏–Ω—É—Ç
                return

        self.error_cooldowns[cooldown_key] = now

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if error_type in [ProxyErrorType.TIMEOUT, ProxyErrorType.SERVER_CLOSED]:
            # –≠—Ç–æ —á–∞—Å—Ç—ã–µ –∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            logger.debug(f"üîå {session_name}: {error_type.value} - {error_info.proxy_info}")
        elif error_type in [ProxyErrorType.CONNECTION_REFUSED, ProxyErrorType.AUTH_FAILED]:
            # –≠—Ç–æ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏
            logger.warning(f"‚ö†Ô∏è {session_name}: {error_type.value} - {error_info.proxy_info}")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
            logger.error(f"‚ùå {session_name}: {error_type.value} - {error_info.error_message[:100]}...")

    def should_retry_connection(self, session_name: str, error_info: ProxyErrorInfo) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫ –¥–ª—è —Å–µ—Å—Å–∏–∏
        session_history = self.session_errors.get(session_name, [])

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        recent_errors = [
            e for e in session_history
            if datetime.now() - e.timestamp < timedelta(minutes=10)
        ]

        # –ù–µ —Ä–µ—Ç—Ä–∞–∏–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ
        if len(recent_errors) > 5:
            logger.warning(f"üö´ {session_name}: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if error_info.error_type in [ProxyErrorType.AUTH_FAILED]:
            # –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
            return False

        if error_info.error_type in [ProxyErrorType.CONNECTION_REFUSED]:
            # –û—Ç–∫–∞–∑—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–µ—Ç—Ä–∞–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
            return len(recent_errors) < 2

        # –¢–∞–π–º–∞—É—Ç—ã –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–æ–∂–Ω–æ —Ä–µ—Ç—Ä–∞–∏—Ç—å
        return True

    def get_retry_delay(self, session_name: str, error_info: ProxyErrorInfo) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º"""

        session_history = self.session_errors.get(session_name, [])
        recent_errors = [
            e for e in session_history
            if datetime.now() - e.timestamp < timedelta(minutes=30)
        ]

        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        base_delays = {
            ProxyErrorType.TIMEOUT: 30.0,
            ProxyErrorType.SERVER_CLOSED: 60.0,
            ProxyErrorType.CONNECTION_REFUSED: 120.0,
            ProxyErrorType.NETWORK_ERROR: 45.0,
            ProxyErrorType.GENERAL_PROXY_ERROR: 90.0,
            ProxyErrorType.UNKNOWN: 60.0
        }

        base_delay = base_delays.get(error_info.error_type, 60.0)

        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫
        error_count = len(recent_errors)
        multiplier = min(2 ** error_count, 16)  # –ú–∞–∫—Å–∏–º—É–º x16

        return min(base_delay * multiplier, 600.0)  # –ú–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç

    def register_recovery_callback(self, session_name: str, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        self.recovery_callbacks[session_name] = callback

    async def attempt_recovery(self, session_name: str, error_info: ProxyErrorInfo) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""

        if not self.should_retry_connection(session_name, error_info):
            return False

        if session_name not in self.recovery_callbacks:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç callback –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {session_name}")
            return False

        try:
            self.error_stats["recovery_attempts"] += 1

            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay = self.get_retry_delay(session_name, error_info)
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {session_name} —á–µ—Ä–µ–∑ {delay:.0f}—Å (–æ—à–∏–±–∫–∞: {error_info.error_type.value})")

            await asyncio.sleep(delay)

            # –í—ã–∑—ã–≤–∞–µ–º callback –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            callback = self.recovery_callbacks[session_name]
            success = await callback()

            if success:
                self.error_stats["successful_recoveries"] += 1
                logger.success(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                if session_name in self.session_errors:
                    self.session_errors[session_name] = []

                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {session_name}: {e}")
            return False

    def block_session(self, session_name: str, reason: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        self.blocked_sessions.add(session_name)
        logger.error(f"üö´ –°–µ—Å—Å–∏—è {session_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {reason}")

    def unblock_session(self, session_name: str):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏"""
        self.blocked_sessions.discard(session_name)
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")

    def is_session_blocked(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏"""
        return session_name in self.blocked_sessions

    def _update_stats(self, error_info: ProxyErrorInfo):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        self.error_stats["total_errors"] += 1
        self.error_stats["by_type"][error_info.error_type] += 1

        session_name = error_info.session_name
        if session_name not in self.error_stats["by_session"]:
            self.error_stats["by_session"][session_name] = 0
        self.error_stats["by_session"][session_name] += 1

    def get_session_error_summary(self, session_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        if session_name not in self.session_errors:
            return {"total_errors": 0, "recent_errors": 0, "error_types": {}}

        all_errors = self.session_errors[session_name]
        recent_errors = [
            e for e in all_errors
            if datetime.now() - e.timestamp < timedelta(hours=1)
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        error_types = {}
        for error in recent_errors:
            error_type = error.error_type.value
            if error_type not in error_types:
                error_types[error_type] = 0
            error_types[error_type] += 1

        return {
            "total_errors": len(all_errors),
            "recent_errors": len(recent_errors),
            "error_types": error_types,
            "is_blocked": session_name in self.blocked_sessions,
            "last_error": all_errors[-1].error_message[:100] if all_errors else None,
            "last_error_time": all_errors[-1].timestamp.isoformat() if all_errors else None
        }

    def get_global_error_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""

        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        top_problematic = sorted(
            self.error_stats["by_session"].items(),
            key=lambda x: x[1],
            reverse=True
        )[:10]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        error_type_stats = {
            error_type.value: count
            for error_type, count in self.error_stats["by_type"].items()
            if count > 0
        }

        return {
            **self.error_stats,
            "by_type": error_type_stats,
            "top_problematic_sessions": top_problematic,
            "blocked_sessions_count": len(self.blocked_sessions),
            "recovery_success_rate": (
                    self.error_stats["successful_recoveries"] / max(self.error_stats["recovery_attempts"], 1) * 100
            )
        }

    def cleanup_old_errors(self, max_age_hours: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫"""
        cutoff_time = datetime.now() - timedelta(hours=max_age_hours)

        cleaned_sessions = 0
        for session_name in list(self.session_errors.keys()):
            old_count = len(self.session_errors[session_name])

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
            self.session_errors[session_name] = [
                error for error in self.session_errors[session_name]
                if error.timestamp > cutoff_time
            ]

            new_count = len(self.session_errors[session_name])

            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
            if new_count == 0:
                del self.session_errors[session_name]
                cleaned_sessions += 1

        if cleaned_sessions > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è {cleaned_sessions} —Å–µ—Å—Å–∏–π")

    def generate_error_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö"""

        stats = self.get_global_error_stats()

        report = "üìä –û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º –ø—Ä–æ–∫—Å–∏:\n\n"

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += f"üî¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}\n"
        report += f"üîÑ –ü–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {stats['recovery_attempts']}\n"
        report += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {stats['successful_recoveries']}\n"
        report += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {stats['recovery_success_rate']:.1f}%\n"
        report += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['blocked_sessions_count']}\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        if stats["by_type"]:
            report += "üìã –û—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º:\n"
            for error_type, count in sorted(stats["by_type"].items(), key=lambda x: x[1], reverse=True):
                report += f"   ‚Ä¢ {error_type}: {count}\n"
            report += "\n"

        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if stats["top_problematic_sessions"]:
            report += "‚ö†Ô∏è –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π:\n"
            for session_name, error_count in stats["top_problematic_sessions"][:5]:
                report += f"   ‚Ä¢ {session_name}: {error_count} –æ—à–∏–±–æ–∫\n"

        return report


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
proxy_error_handler = ProxyErrorHandler()