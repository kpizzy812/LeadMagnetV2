# utils/telethon_logger_filter.py - –ù–û–í–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ Telethon

import logging
import re
from typing import Set, Dict, Pattern
from datetime import datetime, timedelta

from loguru import logger


class TelethonLogFilter:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ Telethon"""

    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
        self.suppress_patterns = [
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            r"Attempt \d+ at connecting failed: GeneralProxyError.*?timed out",
            r"Attempt \d+ at connecting failed: GeneralProxyError.*?Connection refused",
            r"Attempt \d+ at connecting failed: TimeoutError",
            r"Server closed the connection: \d+ bytes read",
            r"Connection closed while receiving data",

            # –ü–æ–¥–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            r"Connection attempt \d+\.\.\.",
            r"Connecting to \d+\.\d+\.\d+\.\d+:\d+/.*",
            r"Starting send loop",
            r"Starting receive loop",
            r"Waiting for messages to send",
            r"Receiving items from the network",

            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è MTProto —Å–æ–æ–±—â–µ–Ω–∏—è
            r"Encrypting \d+ message\(s\) in \d+ bytes for sending",
            r"Assigned msg_id = \d+ to",
            r"Connection success!",
            r"Connection to.*complete!",
        ]

        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.compiled_patterns = [re.compile(pattern, re.IGNORECASE) for pattern in self.suppress_patterns]

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.message_counts: Dict[str, int] = {}
        self.last_summary: Dict[str, datetime] = {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.summary_interval = timedelta(minutes=5)  # –°–≤–æ–¥–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.max_repeated_messages = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º

    def should_suppress_log(self, record: logging.LogRecord) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∞–≤–∏—Ç—å –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ"""

        message = record.getMessage()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
        for pattern in self.compiled_patterns:
            if pattern.search(message):
                self._count_suppressed_message(message)
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if self._is_repeated_message(message):
            return True

        return False

    def _count_suppressed_message(self, message: str):
        """–ü–æ–¥—Å—á–µ—Ç –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏"""

        # –£–ø—Ä–æ—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        simplified = self._simplify_message(message)

        if simplified not in self.message_counts:
            self.message_counts[simplified] = 0

        self.message_counts[simplified] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
        self._check_summary_time()

    def _simplify_message(self, message: str) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""

        # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏ IP –∞–¥—Ä–µ—Å–∞
        simplified = re.sub(r'\d+\.\d+\.\d+\.\d+:\d+', 'IP:PORT', message)
        simplified = re.sub(r'Attempt \d+', 'Attempt N', simplified)
        simplified = re.sub(r'\d+ bytes', 'N bytes', simplified)
        simplified = re.sub(r'msg_id = \d+', 'msg_id = N', simplified)

        return simplified[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

    def _is_repeated_message(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ"""

        simplified = self._simplify_message(message)

        if simplified not in self.message_counts:
            self.message_counts[simplified] = 0

        self.message_counts[simplified] += 1

        return self.message_counts[simplified] > self.max_repeated_messages

    def _check_summary_time(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏"""

        now = datetime.now()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
        if (not self.last_summary or
                now - max(self.last_summary.values(), default=datetime.min) > self.summary_interval):
            self._show_suppressed_summary()
            self.last_summary[now.strftime("%H:%M")] = now

    def _show_suppressed_summary(self):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        if not self.message_counts:
            return

        # –¢–æ–ø –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        top_messages = sorted(
            self.message_counts.items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]

        total_suppressed = sum(self.message_counts.values())

        if total_suppressed > 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã—Ö
            logger.info(f"üìä –ü–æ–¥–∞–≤–ª–µ–Ω–æ {total_suppressed} –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è Telethon —Å–æ–æ–±—â–µ–Ω–∏–π")

            for message, count in top_messages:
                if count > 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è
                    logger.debug(f"   ‚Ä¢ {count}x: {message}")

        # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.message_counts.clear()

    def force_summary(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏"""
        self._show_suppressed_summary()


class TelethonLogHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ Telethon —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""

    def __init__(self, log_filter: TelethonLogFilter):
        super().__init__()
        self.log_filter = log_filter
        self.original_level = logging.WARNING  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ

    def emit(self, record: logging.LogRecord):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥-–∑–∞–ø–∏—Å–∏"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.log_filter.should_suppress_log(record):
                return

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ loguru —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º
            message = self.format(record)

            if record.levelno >= logging.ERROR:
                logger.error(f"[Telethon] {message}")
            elif record.levelno >= logging.WARNING:
                logger.warning(f"[Telethon] {message}")
            elif record.levelno >= logging.INFO:
                logger.info(f"[Telethon] {message}")
            else:
                logger.debug(f"[Telethon] {message}")

        except Exception:
            self.handleError(record)


def setup_telethon_logging(verbose: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ Telethon"""

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    log_filter = TelethonLogFilter()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = TelethonLogHandler(log_filter)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telethon
    telethon_loggers = [
        'telethon.network.mtprotosender',
        'telethon.network.connection',
        'telethon.client.telegrambaseclient',
        'telethon.client.updates',
        'telethon.client.downloads',
        'telethon.client.uploads',
        'telethon.crypto.aes',
        'telethon.extensions.messagepacker',
    ]

    for logger_name in telethon_loggers:
        tel_logger = logging.getLogger(logger_name)

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        tel_logger.handlers.clear()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        tel_logger.addHandler(handler)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        if verbose:
            tel_logger.setLevel(logging.DEBUG)
        else:
            tel_logger.setLevel(logging.WARNING)

        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º propagation –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        tel_logger.propagate = False

    logger.info("üîá –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ Telethon")

    return log_filter


def cleanup_telethon_logging():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Telethon"""

    telethon_loggers = [
        'telethon.network.mtprotosender',
        'telethon.network.connection',
        'telethon.client.telegrambaseclient',
        'telethon.client.updates',
        'telethon.client.downloads',
        'telethon.client.uploads',
        'telethon.crypto.aes',
        'telethon.extensions.messagepacker',
    ]

    for logger_name in telethon_loggers:
        tel_logger = logging.getLogger(logger_name)
        tel_logger.handlers.clear()
        tel_logger.setLevel(logging.WARNING)
        tel_logger.propagate = True

    logger.info("üîä –°–±—Ä–æ—à–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Telethon")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_telethon_log_filter = None


def get_telethon_log_filter() -> TelethonLogFilter:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    global _telethon_log_filter

    if _telethon_log_filter is None:
        _telethon_log_filter = setup_telethon_logging()

    return _telethon_log_filter