# utils/dialog_recovery.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from datetime import datetime, timedelta
from typing import List, Dict, Any
import asyncio
from loguru import logger


class DialogRecovery:
    """–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""

    def __init__(self):
        self.last_scan_time: Dict[str, datetime] = {}
        self.recovery_queue = asyncio.Queue()
        self.is_worker_running = False

    async def scan_missed_messages(self, session_name: str, client) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        missed_messages = []

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            last_scan = self.last_scan_time.get(session_name)
            if not last_scan:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
                last_scan = datetime.now() - timedelta(hours=2)

            logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {session_name} —Å {last_scan}")

            # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            processed_dialogs = 0

            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
            async for dialog in client.iter_dialogs():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã
                if not dialog.is_user:
                    continue

                processed_dialogs += 1

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                async for message in client.iter_messages(
                        dialog,
                        offset_date=last_scan,
                        reverse=True
                ):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if message.out:
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    if not message.text:
                        continue

                    sender = await message.get_sender()
                    if not sender or sender.bot:
                        continue

                    missed_messages.append({
                        "session_name": session_name,
                        "username": sender.username or str(sender.id),
                        "message": message.text,
                        "telegram_id": sender.id,
                        "timestamp": message.date,
                        "message_id": message.id
                    })

                    logger.debug(f"üì® –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{sender.username}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self.last_scan_time[session_name] = datetime.now()

            if missed_messages:
                logger.info(
                    f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(missed_messages)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name} –∏–∑ {processed_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤")
            else:
                logger.info(f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {processed_dialogs} –¥–∏–∞–ª–æ–≥–∞—Ö –¥–ª—è {session_name}")

            return missed_messages

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {session_name}: {e}")
            return []

    async def process_missed_messages(self, missed_messages: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not missed_messages:
            return

        logger.info(f"‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(missed_messages)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        missed_messages.sort(key=lambda x: x["timestamp"])

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for message_data in missed_messages:
            await self.recovery_queue.put(message_data)

    async def start_recovery_worker(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.is_worker_running:
            logger.warning("‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_worker_running = True
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –≤–æ—Ä–∫–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")

        while self.is_worker_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                message_data = await asyncio.wait_for(
                    self.recovery_queue.get(),
                    timeout=30
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                try:
                    from core.handlers.message_handler import message_handler
                    await message_handler.processing_queue.put(message_data)

                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message_data['username']}")

                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    self.recovery_queue.task_done()

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    await asyncio.sleep(1)

                except ImportError:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å message_handler")
                    await asyncio.sleep(5)

            except asyncio.TimeoutError:
                # –¢–∞–π–º–∞—É—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(5)

    async def stop_recovery_worker(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")
        self.is_worker_running = False

    def get_recovery_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return {
            "queue_size": self.recovery_queue.qsize(),
            "is_worker_running": self.is_worker_running,
            "sessions_tracked": len(self.last_scan_time),
            "last_scan_times": {
                session: scan_time.isoformat()
                for session, scan_time in self.last_scan_time.items()
            }
        }

    async def force_scan_session(self, session_name: str) -> int:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏
            from core.integrations.telegram_client import telegram_session_manager
            client = await telegram_session_manager.get_client(session_name)

            if not client:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_name}")
                return 0

            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            missed_messages = await self.scan_missed_messages(session_name, client)

            if missed_messages:
                await self.process_missed_messages(missed_messages)

            return len(missed_messages)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {session_name}: {e}")
            return 0

    async def clear_session_history(self, session_name: str):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        if session_name in self.last_scan_time:
            del self.last_scan_time[session_name]
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {session_name}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
dialog_recovery = DialogRecovery()